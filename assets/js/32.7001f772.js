(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{504:function(n,e,a){"use strict";a.r(e);var s=a(16),t=Object(s.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"mysql常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql常用命令"}},[n._v("#")]),n._v(" MySQL常用命令")]),n._v(" "),a("p",[n._v("将常用到的MySQL的一些命令在这里做个记录，便于查询和更新。")]),n._v(" "),a("p",[n._v("mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码，这时候第一次登录mysql数据库时需要修改这个生成的默认密码。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("systemctl start mysqld.service 启动\nsystemctl stop mysqld.service 停止\nsystemctl restart mysqld.service 重启\n\n#mysql配置文件\netc/my.cnf \n")])])]),a("h3",{attrs:{id:"数据库管理命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库管理命令"}},[n._v("#")]),n._v(" 数据库管理命令")]),n._v(" "),a("h4",{attrs:{id:"_1、登入数据库相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、登入数据库相关"}},[n._v("#")]),n._v(" 1、登入数据库相关")]),n._v(" "),a("p",[a("strong",[n._v("登录数据库")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#登录数据库\nmysql -h localhost -u root -p dbName\n\n#本地\nmysql -u root -p\n>输入密码\n\n\n#查看数据库信息\nselect version();   #查看MySQL当前的版本\nshow databases;     #查看有哪些数据库\nuse testdb;         #切换数据库\nshow tables;        #查看表\nshow engines;       #查看存储引擎\n")])])]),a("h4",{attrs:{id:"_2、用户相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、用户相关"}},[n._v("#")]),n._v(" 2、用户相关")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("select user,host,password from mysql.user; #查询mysql数据库用户\n\nCREATE USER 'test@%' IDENTIFIED BY \"123456\";                #创建用户\nCREATE USER 'username'@'localhost' IDENTIFIED BY 'password';#创建用户\n\n\n#某个用户从某台机器访问本台mysql服务器\nGRANT ALL ON dbname.tablename to user1@192.168.67.1;        #用户授权\n#mysql8授权：\nGRANT SELECT, INSERT ON db.* TO 'username'@'%';             #用户授权\nGRANT ALL PRIVILEGES ON db.* TO 'username'@'localhost';     #用户授权\n\nshow grants for user_name@localhost;                #查看用户权限\n\n\nALTER USER 'root'@'localhost' IDENTIFIED BY 'password';     #修改用户密码\n\n#上面新建用户，修改用户密码，给用户授权后使用\nflush privileges;                                   #刷新权限\n")])])]),a("h4",{attrs:{id:"_3、数据库配置相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、数据库配置相关"}},[n._v("#")]),n._v(" 3、数据库配置相关")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#创建数据库\n#utf8_bin 区分大小写，utf8_general_ci 不区分大小写\nCREATE DATABASE IF NOT EXISTS test DEFAULT CHARSET utf8 COLLATE utf8_bin; \n\n#查看 MySQL 加载配置文件的顺序\n#后面的配置会覆盖前面相同的配置项\nmysqld --help --verbose | grep -A 1 'Default options'\n\n#查看MySQL的一些配置\n#比如查看MySQL的数据库文件存放在那个目录就可以用下面的命令\nshow variables where Variable_name ='datadir'; \n\n#关闭更新时的安全模式\nSET SQL_SAFE_UPDATES=0;\n\n#关闭自动提交\nSET AUTOCOMMIT=0; # 只对当前会话生效\n\n#设置自增从 10000 开始\nALTER TABLE tableName AUTO_INCREMENT=10000; \n\n#关闭外键 约束\nSELECT @@FOREIGN_KEY_CHECKS; \nSET FOREIGN_KEY_CHECKS=1; // 开启外键约束 \nSET FOREIGN_KEY_CHECKS=0; // 关闭外键约束 \n\n#查看大小写是否敏感\n#mysql中控制数据库名和表名的大小写敏感由参数lower_case_table_names控制，为0时表示区分大小写，为1时，表示将名字转化为小写后存储，不区分大小写并且以_ci（大小写不敏感）、_cs（大小写敏感）或_bin 大小写敏感\nSHOW VARIABLES LIKE '%case%'; \n\n# 查看安装的plugin\nshow plugins; \n")])])]),a("h4",{attrs:{id:"_4、日志相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、日志相关"}},[n._v("#")]),n._v(" 4、日志相关")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#查看参数值\nshow variables like \"%log%\"; \n\n#查看错误日志的存放位置\nshow variables like '%log_error%';\n\n#刷新binlog\n# 在mysql中flush logs操作会生成一个新的binlog文件 \nflush logs;\n\n#查看最后一个bin日志\nshow master status; \n\n#清空所有日志\nreset master; \n")])])]),a("h4",{attrs:{id:"_5、数据库空间查看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、数据库空间查看"}},[n._v("#")]),n._v(" 5、数据库空间查看")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#查看数据库占用空间\nSELECT \n    table_schema,\n    SUM(data_length + index_length) / 1024 / 1024 AS total_mb,\n    SUM(data_length) / 1024 / 1024 AS data_mb,\n    SUM(index_length) / 1024 / 1024 AS index_mb,\n    COUNT(*) AS tables,\n    CURDATE() AS today\nFROM\n    information_schema.tables\nGROUP BY table_schema\nORDER BY 2 DESC; \n\n#查看某个数据库表中的情况\nSELECT \n    table_name,\n    (data_length / 1024 / 1024) AS data_mb,\n    (index_length / 1024 / 1024) AS index_mb,\n    ((data_length + index_length) / 1024 / 1024) AS all_mb,\n    table_rows\nFROM\n    information_schema.tables\nWHERE\n    table_schema = 'db_name'; \n\n#查看某个库的具体情况\nshow table status from db_name;\n\n#查看数据库中表碎片的情况\nSELECT TABLE_SCHEMA\n      ,TABLE_NAME \n      ,ENGINE\n      ,ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024), 2) AS SIZE_MB\n      ,ROUND(DATA_FREE/1024/1024,2) AS FREE_SIZ_MB\nFROM information_schema.TABLES \nWHERE DATA_FREE >=100*1024*1024\nORDER BY FREE_SIZ_MB DESC;\n")])])]),a("h3",{attrs:{id:"数据库操作sql语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库操作sql语句"}},[n._v("#")]),n._v(" 数据库操作SQL语句")]),n._v(" "),a("h4",{attrs:{id:"_1、表操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、表操作"}},[n._v("#")]),n._v(" 1、表操作")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#查看创建表的sql语句\nshow create table t1; \n\n#表删除\ntruncate table1;        #删除一张表里所有的数据\ndrop table table1;      #删除一张表\n\n#表复制\ncreate table bs_test2 like bs_test1 # 复制表结构 \nINSERT INTO bs_test1 SELECT * FROM bs_test2; #复制表中的数据 \n\n#给表添加注释\nALTER TABLE 表名 COMMENT '注释的内容'\n#查看某个表的注释\nSELECT table_name,table_comment FROM information_schema.tables where table_name='表名' \n\n#查询出 数据库 中所有的 表信息\nselect table_name from information_schema.tables where table_schema='数据库名' and table_type='base table'; select * from information_schema.tables where table_schema='数据库名' and table_type='base table'; \n\n#查看一张表 或 一条sql语句的执行情况\n(DESC 或 EXPLAIN) DESC SELECT * FROM bs_member DESC bs_member\n\n\n#创建 json 列，创建虚拟列 user_name，address\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `info` json NOT NULL,\n  `user_name` varchar(128) GENERATED ALWAYS AS (json_extract(`info`,'$.name')) VIRTUAL,\n  `address` varchar(128) GENERATED ALWAYS AS (json_extract(`info`,'$.address')) STORED,\n  PRIMARY KEY (`id`),\n  KEY `user_name_index` (`user_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8\n")])])]),a("h4",{attrs:{id:"_2、表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、表查询"}},[n._v("#")]),n._v(" 2、表查询")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#排序\nSELECT * FROM `tableName` ORDER BY colName desc, colName asc \n#将字符型的 数字（ID_）转成数字来排序 +0 或 *1\nSELECT * FROM `tableName` order by ID_+0 asc; \n\n#分组\nSELECT `colName `,count(*) as total FROM `tableName` GROUP BY colName \n\n#查询 最后 10 条数据（id 自增）\nselect * from wy_user order by id desc limit 10;\n\n#按某一列的值的长度查找，UTF8 编码中文长度为 3\nSELECT * FROM `bs_member` WHERE city like '%北京%' and length(city) > 7\n\n\n#查询重复记录\nSELECT\n    id,email\nFROM\n    wy_user2\nWHERE\n    id IN (\n        SELECT\n            id\n        FROM\n            wy_user2\n        GROUP BY\n            email\n        HAVING\n            count(email) > 1\n    )\n    \n    \n#删除重复记录，并保留id最小的记录\ndelete from wy_user2 where id not in (select minid from (select min(id) as minid from wy_user2 group by email) b);\n")])])]),a("h4",{attrs:{id:"_3、索引相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、索引相关"}},[n._v("#")]),n._v(" 3、索引相关")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#添加主键索引\n#它 是一种特殊的唯一索引，不允许有空值\nALTER TABLE `table_name` ADD PRIMARY KEY ( `column` ) \n\n#添加唯一索引\n#与"普通索引"类似，不同的就是：索引列的值必须唯一，但允许有空值。\nALTER TABLE `table_name` ADD UNIQUE ( `column` ) \n\n#添加普通索引\nALTER TABLE `table_name` ADD INDEX index_name ( `column` ) \nALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` ) \n\n#添加全文索引\n#仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时好空间 (适用于，大块数据，如文章内容)\nALTER TABLE `table_name` ADD FULLTEXT ( `column`) \n\n#查看表的索引信息\nshow index from table1\n\n#删除索引\nDROP INDEX index_name ON table_name \n\n#查询时禁止使用主键索引\nselect * from tableName ignore index(PRI)\n\n#查询时禁止使用某些索引\nselect * from tableName ignore index(PRI, indexName) \n\n#查询时强制使用主键索引\nselect * from tableName force index(PRI)\n\n#查询时强制使用某些索引\nselect * from tableName force index(PRI, indexName)\n\n')])])]),a("h4",{attrs:{id:"_4、数据备份与导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、数据备份与导入"}},[n._v("#")]),n._v(" 4、数据备份与导入")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#数据库备份\n/usr/local/mysql/bin/mysqldump -u root -p lemon > lemon.sql /usr/local/mysql/bin/mysqldump -u root -p dbName tableName --where=\"...\" > table.sql \n\n#将 CSV 文件导入 Mysql 中\nLOAD DATA LOCAL INFILE '/home/db-friend/aff11.csv' into table user1 FIELDS TERMINATED BY ',' lines terminated by '\\n' ignore 1 lines (pwsid,email,country,sex,birthday,state,zip,ip); \n")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);