(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,a,s=e[0],c=e[1],l=e[2],p=0,d=[];p<s.length;p++)a=s[p],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&d.push(o[a][0]),o[a]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(n[r]=c[r]);for(u&&u(e);d.length;)d.shift()();return i.push.apply(i,l||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,s=1;s<t.length;s++){var c=t[s];0!==o[c]&&(r=!1)}r&&(i.splice(e--,1),n=a(a.s=t[0]))}return n}var r={},o={1:0},i=[];function a(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.e=function(n){var e=[],t=o[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=o[n]=[e,r]}));e.push(t[2]=r);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,a.nc&&s.setAttribute("nonce",a.nc),s.src=function(n){return a.p+"assets/js/"+({}[n]||n)+"."+{2:"8f160e24",3:"bb85e424",4:"620e00b3",5:"019fad3e",6:"674a6ed1",7:"a02c519b",8:"d374dc82",9:"3822014c",10:"3d9b4e16",11:"4e056d62",12:"affa2bb8",13:"d4231f35",14:"a8d37966",15:"ccb4309e",16:"122e55e2",17:"731c061e",18:"6ade0574",19:"86605151",20:"3831bfc5",21:"dcd169a6",22:"f844edeb",23:"e6fb07ca",24:"92d04674",25:"c60d29fe",26:"0d51d958",27:"9f19bf6a",28:"19eb389a",29:"dab9dbf5",30:"57303ed0",31:"b315a882",32:"7001f772",33:"19bd3a46",34:"3968f9d0",35:"9d7e0ffb",36:"299f8f75",37:"7289918d",38:"c5900f0c",39:"9d63469c",40:"eae5b6fb",41:"f4b09d3d",42:"9724cb80",43:"8184dd6f",44:"def4ec73",45:"6f98a0f4",46:"75a2c9db",47:"7b4acdf8",48:"3d594ddb",49:"88bf6d16",50:"4dc46aa7",51:"cb0d0fb6",52:"c9e89abe",53:"4944f9a8",54:"4f8d3a28",55:"a35e56f7",56:"2594cd7d",57:"e4ba4da0",58:"5813e6b8"}[n]+".js"}(n);var c=new Error;i=function(e){s.onerror=s.onload=null,clearTimeout(l);var t=o[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;c.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",c.name="ChunkLoadError",c.type=r,c.request=i,t[1](c)}o[n]=void 0}};var l=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(e)},a.m=n,a.c=r,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)a.d(t,r,function(e){return n[e]}.bind(null,r));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="/",a.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var u=c;i.push([232,0]),t()}([function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var r=t(0),o=t(38).f,i=t(25),a=t(15),s=t(110),c=t(116),l=t(102);n.exports=function(n,e){var t,u,p,d,m,g=n.target,f=n.global,h=n.stat;if(t=f?r:h?r[g]||s(g,{}):(r[g]||{}).prototype)for(u in e){if(d=e[u],p=n.noTargetGet?(m=o(t,u))&&m.value:t[u],!l(f?u:g+(h?".":"#")+u,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;c(d,p)}(n.sham||p&&p.sham)&&i(d,"sham",!0),a(t,u,d,n)}}},function(n,e,t){var r=t(60),o=Function.prototype,i=o.bind,a=o.call,s=r&&i.bind(a,a);n.exports=r?function(n){return n&&s(n)}:function(n){return n&&function(){return a.apply(n,arguments)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var r=t(119),o=t(15),i=t(248);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var r=t(0),o=t(77),i=t(10),a=t(78),s=t(111),c=t(148),l=o("wks"),u=r.Symbol,p=u&&u.for,d=c?u:u&&u.withoutSetter||a;n.exports=function(n){if(!i(l,n)||!s&&"string"!=typeof l[n]){var e="Symbol."+n;s&&i(u,n)?l[n]=u[n]:l[n]=c&&p?p(e):d(e)}return l[n]}},function(n,e,t){var r=t(3);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(0),o=t(9),i=r.String,a=r.TypeError;n.exports=function(n){if(o(n))return n;throw a(i(n)+" is not an object")}},function(n,e,t){var r=t(5);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(2),o=t(14),i=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return i(o(n),e)}},function(n,e,t){var r=t(60),o=Function.prototype.call;n.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},function(n,e,t){var r=t(0),o=t(75),i=r.String;n.exports=function(n){if("Symbol"===o(n))throw TypeError("Cannot convert a Symbol value to a string");return i(n)}},function(n,e,t){var r=t(0),o=t(7),i=t(150),a=t(149),s=t(8),c=t(80),l=r.TypeError,u=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=o?a?function(n,e,t){if(s(n),e=c(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=p(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return u(n,e,t)}:u:function(n,e,t){if(s(n),e=c(e),s(t),i)try{return u(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(0),o=t(19),i=r.Object;n.exports=function(n){return i(o(n))}},function(n,e,t){var r=t(0),o=t(5),i=t(10),a=t(25),s=t(110),c=t(85),l=t(39),u=t(74).CONFIGURABLE,p=l.get,d=l.enforce,m=String(String).split("String");(n.exports=function(n,e,t,c){var l,p=!!c&&!!c.unsafe,g=!!c&&!!c.enumerable,f=!!c&&!!c.noTargetGet,h=c&&void 0!==c.name?c.name:e;o(t)&&("Symbol("===String(h).slice(0,7)&&(h="["+String(h).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(t,"name")||u&&t.name!==h)&&a(t,"name",h),(l=d(t)).source||(l.source=m.join("string"==typeof h?h:""))),n!==r?(p?!f&&n[e]&&(g=!0):delete n[e],g?n[e]=t:a(n,e,t)):g?n[e]=t:s(e,t)})(Function.prototype,"toString",(function(){return o(this)&&p(this).source||c(this)}))},function(n,e,t){"use strict";function r(n,e,t,r,o,i,a,s){var c,l="function"==typeof n?n.options:n;if(e&&(l.render=e,l.staticRenderFns=t,l._compiled=!0),r&&(l.functional=!0),i&&(l._scopeId="data-v-"+i),a?(c=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),o&&o.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(a)},l._ssrRegister=c):o&&(c=s?function(){o.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(l.functional){l._injectStyles=c;var u=l.render;l.render=function(n,e){return c.call(e),u(n,e)}}else{var p=l.beforeCreate;l.beforeCreate=p?[].concat(p,c):[c]}return{exports:n,options:l}}t.d(e,"a",(function(){return r}))},function(n,e,t){var r=t(0),o=t(5),i=function(n){return o(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?i(r[n]):r[n]&&r[n][e]}},function(n,e,t){var r=t(50);n.exports=function(n){return r(n.length)}},function(n,e,t){var r=t(0).TypeError;n.exports=function(n){if(null==n)throw r("Can't call method on "+n);return n}},function(n,e,t){var r=t(59),o=t(19);n.exports=function(n){return r(o(n))}},function(n,e,t){"use strict";var r=t(1),o=t(90);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(n,e,t){"use strict";var r=t(1),o=t(54).filter;r({target:"Array",proto:!0,forced:!t(66)("filter")},{filter:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(2),o=r({}.toString),i=r("".slice);n.exports=function(n){return i(o(n),8,-1)}},function(n,e){n.exports=!1},function(n,e,t){var r=t(7),o=t(13),i=t(47);n.exports=r?function(n,e,t){return o.f(n,e,i(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){"use strict";var r=t(167).charAt,o=t(12),i=t(39),a=t(154),s=i.set,c=i.getterFor("String Iterator");a(String,"String",(function(n){s(this,{type:"String Iterator",string:o(n),index:0})}),(function(){var n,e=c(this),t=e.string,o=e.index;return o>=t.length?{value:void 0,done:!0}:(n=r(t,o),e.index+=n.length,{value:n,done:!1})}))},function(n,e,t){"use strict";var r=t(1),o=t(174);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(n,e,t){var r=t(0),o=t(168),i=t(169),a=t(174),s=t(25),c=function(n){if(n&&n.forEach!==a)try{s(n,"forEach",a)}catch(e){n.forEach=a}};for(var l in o)o[l]&&c(r[l]&&r[l].prototype);c(i)},function(n,e,t){var r=t(15),o=t(264),i=Error.prototype;i.toString!==o&&r(i,"toString",o)},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(17);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(183),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();n.exports=i},function(n,e,t){var r=t(0),o=t(168),i=t(169),a=t(139),s=t(25),c=t(6),l=c("iterator"),u=c("toStringTag"),p=a.values,d=function(n,e){if(n){if(n[l]!==p)try{s(n,l,p)}catch(e){n[l]=p}if(n[u]||s(n,u,e),o[e])for(var t in a)if(n[t]!==a[t])try{s(n,t,a[t])}catch(e){n[t]=a[t]}}};for(var m in o)d(r[m]&&r[m].prototype,m);d(i,"DOMTokenList")},function(n,e,t){var r,o=t(8),i=t(112),a=t(114),s=t(62),c=t(153),l=t(79),u=t(84),p=u("IE_PROTO"),d=function(){},m=function(n){return"<script>"+n+"<\/script>"},g=function(n){n.write(m("")),n.close();var e=n.parentWindow.Object;return n=null,e},f=function(){try{r=new ActiveXObject("htmlfile")}catch(n){}var n,e;f="undefined"!=typeof document?document.domain&&r?g(r):((e=l("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(m("document.F=Object")),n.close(),n.F):g(r);for(var t=a.length;t--;)delete f.prototype[a[t]];return f()};s[p]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(d.prototype=o(n),t=new d,d.prototype=null,t[p]=n):t=f(),void 0===e?t:i.f(t,e)}},function(n,e,t){var r=t(2);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(60),o=Function.prototype,i=o.apply,a=o.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(i):function(){return a.apply(i,arguments)})},function(n,e,t){var r=t(0),o=t(5),i=t(82),a=r.TypeError;n.exports=function(n){if(o(n))return n;throw a(i(n)+" is not a function")}},function(n,e,t){var r=t(7),o=t(11),i=t(115),a=t(47),s=t(20),c=t(80),l=t(10),u=t(150),p=Object.getOwnPropertyDescriptor;e.f=r?p:function(n,e){if(n=s(n),e=c(e),u)try{return p(n,e)}catch(n){}if(l(n,e))return a(!o(i.f,n,e),n[e])}},function(n,e,t){var r,o,i,a=t(234),s=t(0),c=t(2),l=t(9),u=t(25),p=t(10),d=t(109),m=t(84),g=t(62),f=s.TypeError,h=s.WeakMap;if(a||d.state){var y=d.state||(d.state=new h),v=c(y.get),b=c(y.has),k=c(y.set);r=function(n,e){if(b(y,n))throw new f("Object already initialized");return e.facade=n,k(y,n,e),e},o=function(n){return v(y,n)||{}},i=function(n){return b(y,n)}}else{var x=m("state");g[x]=!0,r=function(n,e){if(p(n,x))throw new f("Object already initialized");return e.facade=n,u(n,x,e),e},o=function(n){return p(n,x)?n[x]:{}},i=function(n){return p(n,x)}}n.exports={set:r,get:o,has:i,enforce:function(n){return i(n)?o(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=o(e)).type!==n)throw f("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r=t(1),o=t(0),i=t(36),a=t(260),s=o.WebAssembly,c=7!==Error("e",{cause:7}).cause,l=function(n,e){var t={};t[n]=a(n,e,c),r({global:!0,forced:c},t)},u=function(n,e){if(s&&s[n]){var t={};t[n]=a("WebAssembly."+n,e,c),r({target:"WebAssembly",stat:!0,forced:c},t)}};l("Error",(function(n){return function(e){return i(n,this,arguments)}})),l("EvalError",(function(n){return function(e){return i(n,this,arguments)}})),l("RangeError",(function(n){return function(e){return i(n,this,arguments)}})),l("ReferenceError",(function(n){return function(e){return i(n,this,arguments)}})),l("SyntaxError",(function(n){return function(e){return i(n,this,arguments)}})),l("TypeError",(function(n){return function(e){return i(n,this,arguments)}})),l("URIError",(function(n){return function(e){return i(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return i(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return i(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return i(n,this,arguments)}}))},function(n,e,t){var r=t(285),o=t(288);n.exports=function(n,e){var t=o(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return i})),t.d(e,"j",(function(){return a})),t.d(e,"g",(function(){return c})),t.d(e,"h",(function(){return l})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return m})),t.d(e,"m",(function(){return g})),t.d(e,"d",(function(){return h})),t.d(e,"k",(function(){return y})),t.d(e,"n",(function(){return v})),t.d(e,"a",(function(){return k}));t(21),t(52),t(218),t(73),t(217),t(144),t(43),t(27),t(4),t(28),t(22),t(76),t(135),t(147),t(99),t(202),t(29),t(138);var r=/#.*$/,o=/\.(md|html)$/,i=/\/$/,a=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(o,"")}function c(n){return a.test(n)}function l(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function p(n){if(c(n))return n;var e=n.match(r),t=e?e[0]:"",o=s(n);return i.test(o)?n:o+".html"+t}function d(n,e){var t=n.hash,o=function(n){var e=n.match(r);if(e)return e[0]}(e);return(!o||t===o)&&s(n.path)===s(e)}function m(n,e,t){if(c(e))return{type:"external",path:e};t&&(e=function(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var i=n.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var s=i[a];".."===s?o.pop():"."!==s&&o.push(s)}""!==o[0]&&o.unshift("");return o.join("/")}(e,t));for(var r=s(e),o=0;o<n.length;o++)if(s(n[o].regularPath)===r)return Object.assign({},n[o],{type:"page",path:p(n[o].path)});return console.error('[vuepress] No matching page found for sidebar item "'.concat(e,'"')),{}}function g(n,e,t,r){var o=t.pages,i=t.themeConfig,a=r&&i.locales&&i.locales[r]||i;if("auto"===(n.frontmatter.sidebar||a.sidebar||i.sidebar))return f(n);var s=a.sidebar||i.sidebar;if(s){var c=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(var t in e)if(0===(r=n,/(\.html|\/)$/.test(r)?r:r+"/").indexOf(encodeURI(t)))return{base:t,config:e[t]};var r;return{}}(e,s),l=c.base,u=c.config;return"auto"===u?f(n):u?u.map((function(n){return function n(e,t,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if("string"==typeof e)return m(t,e,r);if(Array.isArray(e))return Object.assign(m(t,e[0],r),{title:e[1]});o>3&&console.error("[vuepress] detected a too deep nested sidebar group.");var i=e.children||[];return 0===i.length&&e.path?Object.assign(m(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:i.map((function(e){return n(e,t,r,o+1)})),collapsable:!1!==e.collapsable}}(n,o,l)})):[]}return[]}function f(n){var e=h(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map((function(e){return{type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}}))}]}function h(n){var e;return(n=n.map((function(n){return Object.assign({},n)}))).forEach((function(n){2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)})),n.filter((function(n){return 2===n.level}))}function y(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function v(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function b(n){var e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function k(n,e){return b(e)-b(n)}},function(n,e,t){"use strict";var r=t(1),o=t(54).map;r({target:"Array",proto:!0,forced:!t(66)("map")},{map:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=function(n){var e=+n;return e!=e||0===e?0:(e>0?r:t)(e)}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){throw 1},1)}))}},function(n,e,t){var r=t(37);n.exports=function(n,e){var t=n[e];return null==t?void 0:r(t)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r,o,i=t(0),a=t(31),s=i.process,c=i.Deno,l=s&&s.versions||c&&c.version,u=l&&l.v8;u&&(o=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=+r[1]),n.exports=o},function(n,e,t){var r=t(44),o=Math.min;n.exports=function(n){return n>0?o(r(n),9007199254740991):0}},function(n,e,t){"use strict";var r=t(80),o=t(13),i=t(47);n.exports=function(n,e,t){var a=r(e);a in n?o.f(n,a,i(0,t)):n[a]=t}},function(n,e,t){"use strict";var r=t(36),o=t(11),i=t(2),a=t(107),s=t(3),c=t(8),l=t(5),u=t(44),p=t(50),d=t(12),m=t(19),g=t(123),f=t(46),h=t(265),y=t(108),v=t(6)("replace"),b=Math.max,k=Math.min,x=i([].concat),w=i([].push),S=i("".indexOf),E=i("".slice),_="$0"==="a".replace(/./,"$0"),T=!!/./[v]&&""===/./[v]("a","$0");a("replace",(function(n,e,t){var i=T?"$":"$0";return[function(n,t){var r=m(this),i=null==n?void 0:f(n,v);return i?o(i,n,r,t):o(e,d(r),n,t)},function(n,o){var a=c(this),s=d(n);if("string"==typeof o&&-1===S(o,i)&&-1===S(o,"$<")){var m=t(e,a,s,o);if(m.done)return m.value}var f=l(o);f||(o=d(o));var v=a.global;if(v){var _=a.unicode;a.lastIndex=0}for(var T=[];;){var A=y(a,s);if(null===A)break;if(w(T,A),!v)break;""===d(A[0])&&(a.lastIndex=g(s,p(a.lastIndex),_))}for(var I,j="",R=0,C=0;C<T.length;C++){for(var z=d((A=T[C])[0]),O=b(k(u(A.index),s.length),0),B=[],P=1;P<A.length;P++)w(B,void 0===(I=A[P])?I:String(I));var D=A.groups;if(f){var q=x([z],B,O,s);void 0!==D&&w(q,D);var L=d(r(o,void 0,q))}else L=h(z,s,O,B,D,o);O>=R&&(j+=E(s,R,O)+L,R=O+z.length)}return j+E(s,R)}]}),!!s((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!_||T)},function(n,e,t){var r=t(2),o=t(37),i=t(60),a=r(r.bind);n.exports=function(n,e){return o(n),void 0===e?n:i?a(n,e):function(){return n.apply(e,arguments)}}},function(n,e,t){var r=t(53),o=t(2),i=t(59),a=t(14),s=t(18),c=t(104),l=o([].push),u=function(n){var e=1==n,t=2==n,o=3==n,u=4==n,p=6==n,d=7==n,m=5==n||p;return function(g,f,h,y){for(var v,b,k=a(g),x=i(k),w=r(f,h),S=s(x),E=0,_=y||c,T=e?_(g,S):t||d?_(g,0):void 0;S>E;E++)if((m||E in x)&&(b=w(v=x[E],E,k),n))if(e)T[E]=b;else if(b)switch(n){case 3:return!0;case 5:return v;case 6:return E;case 2:l(T,v)}else switch(n){case 4:return!1;case 7:l(T,v)}return p?-1:o||u?u:T}};n.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterReject:u(7)}},function(n,e,t){var r=t(152),o=t(114).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,o)}},function(n,e,t){var r=t(13).f,o=t(10),i=t(6)("toStringTag");n.exports=function(n,e,t){n&&!t&&(n=n.prototype),n&&!o(n,i)&&r(n,i,{configurable:!0,value:e})}},function(n,e,t){var r=t(23);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e,t){var r=t(68),o=t(270),i=t(271),a=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":a&&a in Object(n)?o(n):i(n)}},function(n,e,t){var r=t(0),o=t(2),i=t(3),a=t(23),s=r.Object,c=o("".split);n.exports=i((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==a(n)?c(n,""):s(n)}:s},function(n,e,t){var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var r=t(44),o=Math.max,i=Math.min;n.exports=function(n,e){var t=r(n);return t<0?o(t+e,0):i(t,e)}},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){var r=t(2),o=t(8),i=t(235);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return o(t),i(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e,t){var r=t(2);n.exports=r([].slice)},function(n,e,t){var r=t(3),o=t(6),i=t(49),a=o("species");n.exports=function(n){return i>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){"use strict";var r=t(1),o=t(0),i=t(17),a=t(36),s=t(11),c=t(2),l=t(24),u=t(7),p=t(111),d=t(3),m=t(10),g=t(57),f=t(5),h=t(9),y=t(35),v=t(81),b=t(8),k=t(14),x=t(20),w=t(80),S=t(12),E=t(47),_=t(34),T=t(83),A=t(55),I=t(176),j=t(117),R=t(38),C=t(13),z=t(112),O=t(115),B=t(65),P=t(15),D=t(77),q=t(84),L=t(62),U=t(78),M=t(6),$=t(177),N=t(178),F=t(56),J=t(39),H=t(54).forEach,W=q("hidden"),G=M("toPrimitive"),V=J.set,Q=J.getterFor("Symbol"),K=Object.prototype,Y=o.Symbol,X=Y&&Y.prototype,Z=o.TypeError,nn=o.QObject,en=i("JSON","stringify"),tn=R.f,rn=C.f,on=I.f,an=O.f,sn=c([].push),cn=D("symbols"),ln=D("op-symbols"),un=D("string-to-symbol-registry"),pn=D("symbol-to-string-registry"),dn=D("wks"),mn=!nn||!nn.prototype||!nn.prototype.findChild,gn=u&&d((function(){return 7!=_(rn({},"a",{get:function(){return rn(this,"a",{value:7}).a}})).a}))?function(n,e,t){var r=tn(K,e);r&&delete K[e],rn(n,e,t),r&&n!==K&&rn(K,e,r)}:rn,fn=function(n,e){var t=cn[n]=_(X);return V(t,{type:"Symbol",tag:n,description:e}),u||(t.description=e),t},hn=function(n,e,t){n===K&&hn(ln,e,t),b(n);var r=w(e);return b(t),m(cn,r)?(t.enumerable?(m(n,W)&&n[W][r]&&(n[W][r]=!1),t=_(t,{enumerable:E(0,!1)})):(m(n,W)||rn(n,W,E(1,{})),n[W][r]=!0),gn(n,r,t)):rn(n,r,t)},yn=function(n,e){b(n);var t=x(e),r=T(t).concat(xn(t));return H(r,(function(e){u&&!s(vn,t,e)||hn(n,e,t[e])})),n},vn=function(n){var e=w(n),t=s(an,this,e);return!(this===K&&m(cn,e)&&!m(ln,e))&&(!(t||!m(this,e)||!m(cn,e)||m(this,W)&&this[W][e])||t)},bn=function(n,e){var t=x(n),r=w(e);if(t!==K||!m(cn,r)||m(ln,r)){var o=tn(t,r);return!o||!m(cn,r)||m(t,W)&&t[W][r]||(o.enumerable=!0),o}},kn=function(n){var e=on(x(n)),t=[];return H(e,(function(n){m(cn,n)||m(L,n)||sn(t,n)})),t},xn=function(n){var e=n===K,t=on(e?ln:x(n)),r=[];return H(t,(function(n){!m(cn,n)||e&&!m(K,n)||sn(r,cn[n])})),r};(p||(P(X=(Y=function(){if(y(X,this))throw Z("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?S(arguments[0]):void 0,e=U(n),t=function(n){this===K&&s(t,ln,n),m(this,W)&&m(this[W],e)&&(this[W][e]=!1),gn(this,e,E(1,n))};return u&&mn&&gn(K,e,{configurable:!0,set:t}),fn(e,n)}).prototype,"toString",(function(){return Q(this).tag})),P(Y,"withoutSetter",(function(n){return fn(U(n),n)})),O.f=vn,C.f=hn,z.f=yn,R.f=bn,A.f=I.f=kn,j.f=xn,$.f=function(n){return fn(M(n),n)},u&&(rn(X,"description",{configurable:!0,get:function(){return Q(this).description}}),l||P(K,"propertyIsEnumerable",vn,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!p,sham:!p},{Symbol:Y}),H(T(dn),(function(n){N(n)})),r({target:"Symbol",stat:!0,forced:!p},{for:function(n){var e=S(n);if(m(un,e))return un[e];var t=Y(e);return un[e]=t,pn[t]=e,t},keyFor:function(n){if(!v(n))throw Z(n+" is not a symbol");if(m(pn,n))return pn[n]},useSetter:function(){mn=!0},useSimple:function(){mn=!1}}),r({target:"Object",stat:!0,forced:!p,sham:!u},{create:function(n,e){return void 0===e?_(n):yn(_(n),e)},defineProperty:hn,defineProperties:yn,getOwnPropertyDescriptor:bn}),r({target:"Object",stat:!0,forced:!p},{getOwnPropertyNames:kn,getOwnPropertySymbols:xn}),r({target:"Object",stat:!0,forced:d((function(){j.f(1)}))},{getOwnPropertySymbols:function(n){return j.f(k(n))}}),en)&&r({target:"JSON",stat:!0,forced:!p||d((function(){var n=Y();return"[null]"!=en([n])||"{}"!=en({a:n})||"{}"!=en(Object(n))}))},{stringify:function(n,e,t){var r=B(arguments),o=e;if((h(e)||void 0!==n)&&!v(n))return g(e)||(e=function(n,e){if(f(o)&&(e=s(o,this,n,e)),!v(e))return e}),r[1]=e,a(en,null,r)}});if(!X[G]){var wn=X.valueOf;P(X,G,(function(n){return s(wn,this)}))}F(Y,"Symbol"),L[W]=!0},function(n,e,t){var r=t(32).Symbol;n.exports=r},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(76);var r=t(70);t(67),t(89),t(4),t(122),t(26),t(33),t(179);var o=t(97);t(40),t(29);function i(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(o.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function r(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(1),o=t(0),i=t(57),a=t(86),s=t(9),c=t(61),l=t(18),u=t(20),p=t(51),d=t(6),m=t(66),g=t(65),f=m("slice"),h=d("species"),y=o.Array,v=Math.max;r({target:"Array",proto:!0,forced:!f},{slice:function(n,e){var t,r,o,d=u(this),m=l(d),f=c(n,m),b=c(void 0===e?m:e,m);if(i(d)&&(t=d.constructor,(a(t)&&(t===y||i(t.prototype))||s(t)&&null===(t=t[h]))&&(t=void 0),t===y||void 0===t))return g(d,f,b);for(r=new(void 0===t?y:t)(v(b-f,0)),o=0;f<b;f++,o++)f in d&&p(r,o,d[f]);return r.length=o,r}})},function(n,e,t){var r=t(1),o=t(0),i=t(36),a=t(5),s=t(31),c=t(65),l=/MSIE .\./.test(s),u=o.Function,p=function(n){return function(e,t){var r=arguments.length>2,o=r?c(arguments,2):void 0;return n(r?function(){i(a(e)?e:u(e),this,o)}:e,t)}};r({global:!0,bind:!0,forced:l},{setTimeout:p(o.setTimeout),setInterval:p(o.setInterval)})},function(n,e,t){"use strict";t(21);var r,o,i=t(1),a=t(0),s=t(11),c=t(2),l=t(5),u=t(9),p=(r=!1,(o=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===o.test("abc")&&r),d=a.Error,m=c(/./.test);i({target:"RegExp",proto:!0,forced:!p},{test:function(n){var e=this.exec;if(!l(e))return m(this,n);var t=s(e,this,n);if(null!==t&&!u(t))throw new d("RegExp exec method returned something other than an Object or null");return!!t}})},function(n,e,t){var r=t(7),o=t(10),i=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,s=o(i,"name"),c=s&&"something"===function(){}.name,l=s&&(!r||r&&a(i,"name").configurable);n.exports={EXISTS:s,PROPER:c,CONFIGURABLE:l}},function(n,e,t){var r=t(0),o=t(119),i=t(5),a=t(23),s=t(6)("toStringTag"),c=r.Object,l="Arguments"==a(function(){return arguments}());n.exports=o?a:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=c(n),s))?t:l?a(e):"Object"==(r=a(e))&&i(e.callee)?"Arguments":r}},function(n,e,t){t(1)({target:"Array",stat:!0},{isArray:t(57)})},function(n,e,t){var r=t(24),o=t(109);(n.exports=function(n,e){return o[n]||(o[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.20.3",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.20.3/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){var r=t(2),o=0,i=Math.random(),a=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+a(++o+i,36)}},function(n,e,t){var r=t(0),o=t(9),i=r.document,a=o(i)&&o(i.createElement);n.exports=function(n){return a?i.createElement(n):{}}},function(n,e,t){var r=t(151),o=t(81);n.exports=function(n){var e=r(n,"string");return o(e)?e:e+""}},function(n,e,t){var r=t(0),o=t(17),i=t(5),a=t(35),s=t(148),c=r.Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=o("Symbol");return i(e)&&a(e.prototype,c(n))}},function(n,e,t){var r=t(0).String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(152),o=t(114);n.exports=Object.keys||function(n){return r(n,o)}},function(n,e,t){var r=t(77),o=t(78),i=r("keys");n.exports=function(n){return i[n]||(i[n]=o(n))}},function(n,e,t){var r=t(2),o=t(5),i=t(109),a=r(Function.toString);o(i.inspectSource)||(i.inspectSource=function(n){return a(n)}),n.exports=i.inspectSource},function(n,e,t){var r=t(2),o=t(3),i=t(5),a=t(75),s=t(17),c=t(85),l=function(){},u=[],p=s("Reflect","construct"),d=/^\s*(?:class|function)\b/,m=r(d.exec),g=!d.exec(l),f=function(n){if(!i(n))return!1;try{return p(l,u,n),!0}catch(n){return!1}},h=function(n){if(!i(n))return!1;switch(a(n)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return g||!!m(d,c(n))}catch(n){return!0}};h.sham=!0,n.exports=!p||o((function(){var n;return f(f.call)||!f(Object)||!f((function(){n=!0}))||n}))?h:f},function(n,e,t){var r=t(23),o=t(0);n.exports="process"==r(o.process)},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(4);function r(n,e,t,r,o,i,a){try{var s=n[i](a),c=s.value}catch(n){return void t(n)}s.done?e(c):Promise.resolve(c).then(r,o)}function o(n){return function(){var e=this,t=arguments;return new Promise((function(o,i){var a=n.apply(e,t);function s(n){r(a,o,i,s,c,"next",n)}function c(n){r(a,o,i,s,c,"throw",n)}s(void 0)}))}}},function(n,e,t){"use strict";var r=t(1),o=t(7),i=t(0),a=t(2),s=t(10),c=t(5),l=t(35),u=t(12),p=t(13).f,d=t(116),m=i.Symbol,g=m&&m.prototype;if(o&&c(m)&&(!("description"in g)||void 0!==m().description)){var f={},h=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:u(arguments[0]),e=l(g,this)?new m(n):void 0===n?m():m(n);return""===n&&(f[e]=!0),e};d(h,m),h.prototype=g,g.constructor=h;var y="Symbol(test)"==String(m("test")),v=a(g.toString),b=a(g.valueOf),k=/^Symbol\((.*)\)[^)]+$/,x=a("".replace),w=a("".slice);p(g,"description",{configurable:!0,get:function(){var n=b(this),e=v(n);if(s(f,n))return"";var t=y?w(e,7,-1):x(e,k,"$1");return""===t?void 0:t}}),r({global:!0,forced:!0},{Symbol:h})}},function(n,e,t){"use strict";var r,o,i=t(11),a=t(2),s=t(12),c=t(142),l=t(106),u=t(77),p=t(34),d=t(39).get,m=t(219),g=t(226),f=u("native-string-replace",String.prototype.replace),h=RegExp.prototype.exec,y=h,v=a("".charAt),b=a("".indexOf),k=a("".replace),x=a("".slice),w=(o=/b*/g,i(h,r=/a/,"a"),i(h,o,"a"),0!==r.lastIndex||0!==o.lastIndex),S=l.BROKEN_CARET,E=void 0!==/()??/.exec("")[1];(w||E||S||m||g)&&(y=function(n){var e,t,r,o,a,l,u,m=this,g=d(m),_=s(n),T=g.raw;if(T)return T.lastIndex=m.lastIndex,e=i(y,T,_),m.lastIndex=T.lastIndex,e;var A=g.groups,I=S&&m.sticky,j=i(c,m),R=m.source,C=0,z=_;if(I&&(j=k(j,"y",""),-1===b(j,"g")&&(j+="g"),z=x(_,m.lastIndex),m.lastIndex>0&&(!m.multiline||m.multiline&&"\n"!==v(_,m.lastIndex-1))&&(R="(?: "+R+")",z=" "+z,C++),t=new RegExp("^(?:"+R+")",j)),E&&(t=new RegExp("^"+R+"$(?!\\s)",j)),w&&(r=m.lastIndex),o=i(h,I?t:m,z),I?o?(o.input=x(o.input,C),o[0]=x(o[0],C),o.index=m.lastIndex,m.lastIndex+=o[0].length):m.lastIndex=0:w&&o&&(m.lastIndex=m.global?o.index+o[0].length:r),E&&o&&o.length>1&&i(f,o[0],t,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&A)for(o.groups=l=p(null),a=0;a<A.length;a++)l[(u=A[a])[0]]=o[u[1]];return o}),n.exports=y},function(n,e,t){var r=t(275),o=t(276),i=t(277),a=t(278),s=t(279);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(185);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(41)(Object,"create");n.exports=r},function(n,e,t){var r=t(297);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(131);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r=t(1),o=t(7),i=t(13).f;r({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!o},{defineProperty:i})},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(71),t(4),t(105),t(179),t(26),t(21),t(73);var r=t(70);function o(n,e){if(n){if("string"==typeof n)return Object(r.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(n,e):void 0}}},function(n,e,t){var r,o;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(o="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function o(n,e,t){return n<e?e:n>t?t:n}function i(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=o(n,r.minimum,1),t.status=1===n?null:n;var c=t.render(!e),l=c.querySelector(r.barSelector),u=r.speed,p=r.easing;return c.offsetWidth,a((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(l,function(n,e,t){var o;return(o="translate3d"===r.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+e+"ms "+t,o}(n,u,p)),1===n?(s(c,{transition:"none",opacity:1}),c.offsetWidth,setTimeout((function(){s(c,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*o(Math.random()*e,.1,.95)),e=o(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");l(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var o,a=e.querySelector(r.barSelector),c=n?"-100":i(t.status||0),u=document.querySelector(r.parent);return s(a,{transition:"all 0 linear",transform:"translate3d("+c+"%,0,0)"}),r.showSpinner||(o=e.querySelector(r.spinnerSelector))&&d(o),u!=document.body&&l(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var a=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,o=n.length,i=e.charAt(0).toUpperCase()+e.slice(1);o--;)if((r=n[o]+i)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,o,i=arguments;if(2==i.length)for(t in e)void 0!==(o=e[t])&&e.hasOwnProperty(t)&&r(n,t,o);else r(n,i[1],i[2])}}();function c(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function l(n,e){var t=p(n),r=t+e;c(t,e)||(n.className=r.substring(1))}function u(n,e){var t,r=p(n);c(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=o)},function(n,e,t){"use strict";var r=t(1),o=t(0),i=t(3),a=t(57),s=t(9),c=t(14),l=t(18),u=t(51),p=t(104),d=t(66),m=t(6),g=t(49),f=m("isConcatSpreadable"),h=o.TypeError,y=g>=51||!i((function(){var n=[];return n[f]=!1,n.concat()[0]!==n})),v=d("concat"),b=function(n){if(!s(n))return!1;var e=n[f];return void 0!==e?!!e:a(n)};r({target:"Array",proto:!0,forced:!y||!v},{concat:function(n){var e,t,r,o,i,a=c(this),s=p(a,0),d=0;for(e=-1,r=arguments.length;e<r;e++)if(b(i=-1===e?a:arguments[e])){if(d+(o=l(i))>9007199254740991)throw h("Maximum allowed index exceeded");for(t=0;t<o;t++,d++)t in i&&u(s,d,i[t])}else{if(d>=9007199254740991)throw h("Maximum allowed index exceeded");u(s,d++,i)}return s.length=d,s}})},function(n,e,t){var r=t(6),o=t(34),i=t(13),a=r("unscopables"),s=Array.prototype;null==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),n.exports=function(n){s[a][n]=!0}},function(n,e,t){var r=t(1),o=t(14),i=t(83);r({target:"Object",stat:!0,forced:t(3)((function(){i(1)}))},{keys:function(n){return i(o(n))}})},function(n,e,t){var r=t(3),o=t(5),i=/#|\.prototype\./,a=function(n,e){var t=c[s(n)];return t==u||t!=l&&(o(e)?r(e):!!e)},s=a.normalize=function(n){return String(n).replace(i,".").toLowerCase()},c=a.data={},l=a.NATIVE="N",u=a.POLYFILL="P";n.exports=a},function(n,e,t){var r=t(75),o=t(46),i=t(63),a=t(6)("iterator");n.exports=function(n){if(null!=n)return o(n,a)||o(n,"@@iterator")||i[r(n)]}},function(n,e,t){var r=t(249);n.exports=function(n,e){return new(r(n))(0===e?0:e)}},function(n,e,t){var r=t(7),o=t(74).EXISTS,i=t(2),a=t(13).f,s=Function.prototype,c=i(s.toString),l=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,u=i(l.exec);r&&!o&&a(s,"name",{configurable:!0,get:function(){try{return u(l,c(this))[1]}catch(n){return""}}})},function(n,e,t){var r=t(3),o=t(0).RegExp,i=r((function(){var n=o("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),a=i||r((function(){return!o("a","y").sticky})),s=i||r((function(){var n=o("^r","gy");return n.lastIndex=2,null!=n.exec("str")}));n.exports={BROKEN_CARET:s,MISSED_STICKY:a,UNSUPPORTED_Y:i}},function(n,e,t){"use strict";t(21);var r=t(2),o=t(15),i=t(90),a=t(3),s=t(6),c=t(25),l=s("species"),u=RegExp.prototype;n.exports=function(n,e,t,p){var d=s(n),m=!a((function(){var e={};return e[d]=function(){return 7},7!=""[n](e)})),g=m&&!a((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[l]=function(){return t},t.flags="",t[d]=/./[d]),t.exec=function(){return e=!0,null},t[d](""),!e}));if(!m||!g||t){var f=r(/./[d]),h=e(d,""[n],(function(n,e,t,o,a){var s=r(n),c=e.exec;return c===i||c===u.exec?m&&!a?{done:!0,value:f(e,t,o)}:{done:!0,value:s(t,e,o)}:{done:!1}}));o(String.prototype,n,h[0]),o(u,d,h[1])}p&&c(u[d],"sham",!0)}},function(n,e,t){var r=t(0),o=t(11),i=t(8),a=t(5),s=t(23),c=t(90),l=r.TypeError;n.exports=function(n,e){var t=n.exec;if(a(t)){var r=o(t,n,e);return null!==r&&i(r),r}if("RegExp"===s(n))return o(c,n,e);throw l("RegExp#exec called on incompatible receiver")}},function(n,e,t){var r=t(0),o=t(110),i=r["__core-js_shared__"]||o("__core-js_shared__",{});n.exports=i},function(n,e,t){var r=t(0),o=Object.defineProperty;n.exports=function(n,e){try{o(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(49),o=t(3);n.exports=!!Object.getOwnPropertySymbols&&!o((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r=t(7),o=t(149),i=t(13),a=t(8),s=t(20),c=t(83);e.f=r&&!o?Object.defineProperties:function(n,e){a(n);for(var t,r=s(e),o=c(e),l=o.length,u=0;l>u;)i.f(n,t=o[u++],r[t]);return n}},function(n,e,t){var r=t(20),o=t(61),i=t(18),a=function(n){return function(e,t,a){var s,c=r(e),l=i(c),u=o(a,l);if(n&&t!=t){for(;l>u;)if((s=c[u++])!=s)return!0}else for(;l>u;u++)if((n||u in c)&&c[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:a(!0),indexOf:a(!1)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(n){var e=o(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(10),o=t(155),i=t(38),a=t(13);n.exports=function(n,e,t){for(var s=o(e),c=a.f,l=i.f,u=0;u<s.length;u++){var p=s[u];r(n,p)||t&&r(t,p)||c(n,p,l(e,p))}}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(0),o=t(10),i=t(5),a=t(14),s=t(84),c=t(157),l=s("IE_PROTO"),u=r.Object,p=u.prototype;n.exports=c?u.getPrototypeOf:function(n){var e=a(n);if(o(e,l))return e[l];var t=e.constructor;return i(t)&&e instanceof t?t.prototype:e instanceof u?p:null}},function(n,e,t){var r={};r[t(6)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(8),o=t(162),i=t(6)("species");n.exports=function(n,e){var t,a=r(n).constructor;return void 0===a||null==(t=r(a)[i])?e:o(t)}},function(n,e,t){var r=t(0),o=t(61),i=t(18),a=t(51),s=r.Array,c=Math.max;n.exports=function(n,e,t){for(var r=i(n),l=o(e,r),u=o(void 0===t?r:t,r),p=s(c(u-l,0)),d=0;l<u;l++,d++)a(p,d,n[l]);return p.length=d,p}},function(n,e,t){t(178)("iterator")},function(n,e,t){"use strict";var r=t(167).charAt;n.exports=function(n,e,t){return e+(t?r(n,e).length:1)}},function(n,e,t){var r=t(269),o=t(48),i=Object.prototype,a=i.hasOwnProperty,s=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(n){return o(n)&&a.call(n,"callee")&&!s.call(n,"callee")};n.exports=c},function(n,e,t){var r=t(41)(t(32),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(289),o=t(296),i=t(298),a=t(299),s=t(300);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=s,n.exports=c},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(30),o=t(131),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!o(n))||(a.test(n)||!i.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(58),o=t(48);n.exports=function(n){return"symbol"==typeof n||o(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(76);t(67),t(89),t(4),t(122),t(26),t(33);var r=t(97);t(40),t(29);function o(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i=[],a=!0,s=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(n){s=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(s)throw o}}return i}}(n,e)||Object(r.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";var r=t(1),o=t(54).some;r({target:"Array",proto:!0,forced:!t(45)("some")},{some:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(1),o=t(2),i=t(113).indexOf,a=t(45),s=o([].indexOf),c=!!s&&1/s([1],1,-0)<0,l=a("indexOf");r({target:"Array",proto:!0,forced:c||!l},{indexOf:function(n){var e=arguments.length>1?arguments[1]:void 0;return c?s(this,n,e)||0:i(this,n,e)}})},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(101),t(67),t(22),t(4),t(376),t(27),t(28),t(170),t(377),t(96);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}},function(n,e,t){var r=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function c(n,e,t,r){var o=e&&e.prototype instanceof p?e:p,i=Object.create(o.prototype),a=new S(r||[]);return i._invoke=function(n,e,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return _()}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var s=k(a,t);if(s){if(s===u)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var c=l(n,e,t);if("normal"===c.type){if(r=t.done?"completed":"suspendedYield",c.arg===u)continue;return{value:c.arg,done:t.done}}"throw"===c.type&&(r="completed",t.method="throw",t.arg=c.arg)}}}(n,t,a),i}function l(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=c;var u={};function p(){}function d(){}function m(){}var g={};s(g,o,(function(){return this}));var f=Object.getPrototypeOf,h=f&&f(f(E([])));h&&h!==e&&t.call(h,o)&&(g=h);var y=m.prototype=p.prototype=Object.create(g);function v(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function b(n,e){var r;this._invoke=function(o,i){function a(){return new e((function(r,a){!function r(o,i,a,s){var c=l(n[o],n,i);if("throw"!==c.type){var u=c.arg,p=u.value;return p&&"object"==typeof p&&t.call(p,"__await")?e.resolve(p.__await).then((function(n){r("next",n,a,s)}),(function(n){r("throw",n,a,s)})):e.resolve(p).then((function(n){u.value=n,a(u)}),(function(n){return r("throw",n,a,s)}))}s(c.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function k(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,k(n,e),"throw"===e.method))return u;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=l(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,u;var o=r.arg;return o?o.done?(e[n.resultName]=o.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function x(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function w(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function S(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(x,this),this.reset(!0)}function E(n){if(n){var e=n[o];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function e(){for(;++r<n.length;)if(t.call(n,r))return e.value=n[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:_}}function _(){return{value:void 0,done:!0}}return d.prototype=m,s(y,"constructor",m),s(m,"constructor",d),d.displayName=s(m,a,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===d||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,m):(n.__proto__=m,s(n,a,"GeneratorFunction")),n.prototype=Object.create(y),n},n.awrap=function(n){return{__await:n}},v(b.prototype),s(b.prototype,i,(function(){return this})),n.AsyncIterator=b,n.async=function(e,t,r,o,i){void 0===i&&(i=Promise);var a=new b(c(e,t,r,o),i);return n.isGeneratorFunction(t)?a:a.next().then((function(n){return n.done?n.value:a.next()}))},v(y),s(y,a,"Generator"),s(y,o,(function(){return this})),s(y,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=E,S.prototype={constructor:S,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function r(t,r){return a.type="throw",a.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=t.call(i,"catchLoc"),c=t.call(i,"finallyLoc");if(s&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=n,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,u):this.complete(a)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),u},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),w(t),u}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:E(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),u}},n}(n.exports);try{regeneratorRuntime=r}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(n,e,t){"use strict";var r=t(2),o=t(74).PROPER,i=t(15),a=t(8),s=t(35),c=t(12),l=t(3),u=t(142),p=RegExp.prototype,d=p.toString,m=r(u),g=l((function(){return"/a/b"!=d.call({source:"a",flags:"b"})})),f=o&&"toString"!=d.name;(g||f)&&i(RegExp.prototype,"toString",(function(){var n=a(this),e=c(n.source),t=n.flags;return"/"+e+"/"+c(void 0===t&&s(p,n)&&!("flags"in p)?m(n):t)}),{unsafe:!0})},function(n,e,t){"use strict";var r=t(20),o=t(100),i=t(63),a=t(39),s=t(13).f,c=t(154),l=t(24),u=t(7),p=a.set,d=a.getterFor("Array Iterator");n.exports=c(Array,"Array",(function(n,e){p(this,{type:"Array Iterator",target:r(n),index:0,kind:e})}),(function(){var n=d(this),e=n.target,t=n.kind,r=n.index++;return!e||r>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values");var m=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!l&&u&&"values"!==m.name)try{s(m,"name",{value:"values"})}catch(n){}},function(n,e,t){var r=t(0),o=t(11),i=t(37),a=t(8),s=t(82),c=t(103),l=r.TypeError;n.exports=function(n,e){var t=arguments.length<2?c(n):e;if(i(t))return a(o(t,n));throw l(s(n)+" is not iterable")}},function(n,e,t){var r=t(9),o=t(23),i=t(6)("match");n.exports=function(n){var e;return r(n)&&(void 0!==(e=n[i])?!!e:"RegExp"==o(n))}},function(n,e,t){"use strict";var r=t(8);n.exports=function(){var n=r(this),e="";return n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e,t){var r=t(5),o=t(9),i=t(64);n.exports=function(n,e,t){var a,s;return i&&r(a=e.constructor)&&a!==t&&o(s=a.prototype)&&s!==t.prototype&&i(n,s),n}},function(n,e,t){"use strict";var r=t(1),o=t(2),i=t(59),a=t(20),s=t(45),c=o([].join),l=i!=Object,u=s("join",",");r({target:"Array",proto:!0,forced:l||!u},{join:function(n){return c(a(this),void 0===n?",":n)}})},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,i=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,c="object"==typeof self&&self&&self.Object===Object&&self,l=s||c||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,m=function(){return l.Date.now()};function g(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function f(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(g(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=g(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=o.test(n);return s||i.test(n)?a(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,o,i,a,s,c,l=0,u=!1,h=!1,y=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function v(e){var t=r,i=o;return r=o=void 0,l=e,a=n.apply(i,t)}function b(n){return l=n,s=setTimeout(x,e),u?v(n):a}function k(n){var t=n-c;return void 0===c||t>=e||t<0||h&&n-l>=i}function x(){var n=m();if(k(n))return w(n);s=setTimeout(x,function(n){var t=e-(n-c);return h?d(t,i-(n-l)):t}(n))}function w(n){return s=void 0,y&&r?v(n):(r=o=void 0,a)}function S(){var n=m(),t=k(n);if(r=arguments,o=this,c=n,t){if(void 0===s)return b(c);if(h)return s=setTimeout(x,e),v(c)}return void 0===s&&(s=setTimeout(x,e)),a}return e=f(e)||0,g(t)&&(u=!!t.leading,i=(h="maxWait"in t)?p(f(t.maxWait)||0,e):i,y="trailing"in t?!!t.trailing:y),S.cancel=function(){void 0!==s&&clearTimeout(s),l=0,r=c=o=s=void 0},S.flush=function(){return void 0===s?a:w(m())},S}},function(n,e,t){var r=t(2),o=t(15),i=Date.prototype,a=r(i.toString),s=r(i.getTime);"Invalid Date"!=String(new Date(NaN))&&o(i,"toString",(function(){var n=s(this);return n==n?a(this):"Invalid Date"}))},function(n,e,t){var r=t(111);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(7),o=t(3);n.exports=r&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(7),o=t(3),i=t(79);n.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(0),o=t(11),i=t(9),a=t(81),s=t(46),c=t(233),l=t(6),u=r.TypeError,p=l("toPrimitive");n.exports=function(n,e){if(!i(n)||a(n))return n;var t,r=s(n,p);if(r){if(void 0===e&&(e="default"),t=o(r,n,e),!i(t)||a(t))return t;throw u("Can't convert object to primitive value")}return void 0===e&&(e="number"),c(n,e)}},function(n,e,t){var r=t(2),o=t(10),i=t(20),a=t(113).indexOf,s=t(62),c=r([].push);n.exports=function(n,e){var t,r=i(n),l=0,u=[];for(t in r)!o(s,t)&&o(r,t)&&c(u,t);for(;e.length>l;)o(r,t=e[l++])&&(~a(u,t)||c(u,t));return u}},function(n,e,t){var r=t(17);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(1),o=t(11),i=t(24),a=t(74),s=t(5),c=t(222),l=t(118),u=t(64),p=t(56),d=t(25),m=t(15),g=t(6),f=t(63),h=t(156),y=a.PROPER,v=a.CONFIGURABLE,b=h.IteratorPrototype,k=h.BUGGY_SAFARI_ITERATORS,x=g("iterator"),w=function(){return this};n.exports=function(n,e,t,a,g,h,S){c(t,e,a);var E,_,T,A=function(n){if(n===g&&z)return z;if(!k&&n in R)return R[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},I=e+" Iterator",j=!1,R=n.prototype,C=R[x]||R["@@iterator"]||g&&R[g],z=!k&&C||A(g),O="Array"==e&&R.entries||C;if(O&&(E=l(O.call(new n)))!==Object.prototype&&E.next&&(i||l(E)===b||(u?u(E,b):s(E[x])||m(E,x,w)),p(E,I,!0,!0),i&&(f[I]=w)),y&&"values"==g&&C&&"values"!==C.name&&(!i&&v?d(R,"name","values"):(j=!0,z=function(){return o(C,this)})),g)if(_={values:A("values"),keys:h?z:A("keys"),entries:A("entries")},S)for(T in _)(k||j||!(T in R))&&m(R,T,_[T]);else r({target:e,proto:!0,forced:k||j},_);return i&&!S||R[x]===z||m(R,x,z,{name:g}),f[e]=z,_}},function(n,e,t){var r=t(17),o=t(2),i=t(55),a=t(117),s=t(8),c=o([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=i.f(s(n)),t=a.f;return t?c(e,t(n)):e}},function(n,e,t){"use strict";var r,o,i,a=t(3),s=t(5),c=t(34),l=t(118),u=t(15),p=t(6),d=t(24),m=p("iterator"),g=!1;[].keys&&("next"in(i=[].keys())?(o=l(l(i)))!==Object.prototype&&(r=o):g=!0),null==r||a((function(){var n={};return r[m].call(n)!==n}))?r={}:d&&(r=c(r)),s(r[m])||u(r,m,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:g}},function(n,e,t){var r=t(3);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){var r=t(0);n.exports=r.Promise},function(n,e,t){var r=t(6),o=t(63),i=r("iterator"),a=Array.prototype;n.exports=function(n){return void 0!==n&&(o.Array===n||a[i]===n)}},function(n,e,t){var r=t(11),o=t(8),i=t(46);n.exports=function(n,e,t){var a,s;o(n);try{if(!(a=i(n,"return"))){if("throw"===e)throw t;return t}a=r(a,n)}catch(n){s=!0,a=n}if("throw"===e)throw t;if(s)throw a;return o(a),t}},function(n,e,t){var r=t(6)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!o)return!1;var t=!1;try{var i={};i[r]=function(){return{next:function(){return{done:t=!0}}}},n(i)}catch(n){}return t}},function(n,e,t){var r=t(0),o=t(86),i=t(82),a=r.TypeError;n.exports=function(n){if(o(n))return n;throw a(i(n)+" is not a constructor")}},function(n,e,t){var r,o,i,a,s=t(0),c=t(36),l=t(53),u=t(5),p=t(10),d=t(3),m=t(153),g=t(65),f=t(79),h=t(164),y=t(87),v=s.setImmediate,b=s.clearImmediate,k=s.process,x=s.Dispatch,w=s.Function,S=s.MessageChannel,E=s.String,_=0,T={};try{r=s.location}catch(n){}var A=function(n){if(p(T,n)){var e=T[n];delete T[n],e()}},I=function(n){return function(){A(n)}},j=function(n){A(n.data)},R=function(n){s.postMessage(E(n),r.protocol+"//"+r.host)};v&&b||(v=function(n){var e=g(arguments,1);return T[++_]=function(){c(u(n)?n:w(n),void 0,e)},o(_),_},b=function(n){delete T[n]},y?o=function(n){k.nextTick(I(n))}:x&&x.now?o=function(n){x.now(I(n))}:S&&!h?(a=(i=new S).port2,i.port1.onmessage=j,o=l(a.postMessage,a)):s.addEventListener&&u(s.postMessage)&&!s.importScripts&&r&&"file:"!==r.protocol&&!d(R)?(o=R,s.addEventListener("message",j,!1)):o="onreadystatechange"in f("script")?function(n){m.appendChild(f("script")).onreadystatechange=function(){m.removeChild(this),A(n)}}:function(n){setTimeout(I(n),0)}),n.exports={set:v,clear:b}},function(n,e,t){var r=t(31);n.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},function(n,e,t){var r=t(8),o=t(9),i=t(166);n.exports=function(n,e){if(r(n),o(e)&&e.constructor===n)return e;var t=i.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){"use strict";var r=t(37),o=function(n){var e,t;this.promise=new n((function(n,r){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=r})),this.resolve=r(e),this.reject=r(t)};n.exports.f=function(n){return new o(n)}},function(n,e,t){var r=t(2),o=t(44),i=t(12),a=t(19),s=r("".charAt),c=r("".charCodeAt),l=r("".slice),u=function(n){return function(e,t){var r,u,p=i(a(e)),d=o(t),m=p.length;return d<0||d>=m?n?"":void 0:(r=c(p,d))<55296||r>56319||d+1===m||(u=c(p,d+1))<56320||u>57343?n?s(p,d):r:n?l(p,d,d+2):u-56320+(r-55296<<10)+65536}};n.exports={codeAt:u(!1),charAt:u(!0)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var r=t(79)("span").classList,o=r&&r.constructor&&r.constructor.prototype;n.exports=o===Object.prototype?void 0:o},function(n,e,t){var r=t(1),o=t(7),i=t(155),a=t(20),s=t(38),c=t(51);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(n){for(var e,t,r=a(n),o=s.f,l=i(r),u={},p=0;l.length>p;)void 0!==(t=o(r,e=l[p++]))&&c(u,e,t);return u}})},function(n,e,t){var r=t(1),o=t(3),i=t(14),a=t(118),s=t(157);r({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!s},{getPrototypeOf:function(n){return a(i(n))}})},function(n,e,t){var r=t(0),o=t(141),i=r.TypeError;n.exports=function(n){if(o(n))throw i("The method doesn't accept regular expressions");return n}},function(n,e,t){var r=t(6)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){"use strict";var r=t(54).forEach,o=t(45)("forEach");n.exports=o?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var r=t(3);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var r=t(23),o=t(20),i=t(55).f,a=t(121),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return s&&"Window"==r(n)?function(n){try{return i(n)}catch(n){return a(s)}}(n):i(o(n))}},function(n,e,t){var r=t(6);e.f=r},function(n,e,t){var r=t(257),o=t(10),i=t(177),a=t(13).f;n.exports=function(n){var e=r.Symbol||(r.Symbol={});o(e,n)||a(e,n,{value:i.f(n)})}},function(n,e,t){var r=t(1),o=t(258);r({target:"Array",stat:!0,forced:!t(161)((function(n){Array.from(n)}))},{from:o})},function(n,e,t){var r=t(12);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){t(1)({target:"Object",stat:!0,sham:!t(7)},{create:t(34)})},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,o=n.length;++t<r;)n[o+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(91),o=t(280),i=t(281),a=t(282),s=t(283),c=t(284);function l(n){var e=this.__data__=new r(n);this.size=e.size}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=s,l.prototype.set=c,n.exports=l},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(58),o=t(126);n.exports=function(n){if(!o(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(301),o=t(48);n.exports=function n(e,t,i,a,s){return e===t||(null==e||null==t||!o(e)&&!o(t)?e!=e&&t!=t:r(e,t,i,a,n,s))}},function(n,e,t){var r=t(190),o=t(304),i=t(191);n.exports=function(n,e,t,a,s,c){var l=1&t,u=n.length,p=e.length;if(u!=p&&!(l&&p>u))return!1;var d=c.get(n),m=c.get(e);if(d&&m)return d==e&&m==n;var g=-1,f=!0,h=2&t?new r:void 0;for(c.set(n,e),c.set(e,n);++g<u;){var y=n[g],v=e[g];if(a)var b=l?a(v,y,g,e,n,c):a(y,v,g,n,e,c);if(void 0!==b){if(b)continue;f=!1;break}if(h){if(!o(e,(function(n,e){if(!i(h,e)&&(y===n||s(y,n,t,a,c)))return h.push(e)}))){f=!1;break}}else if(y!==v&&!s(y,v,t,a,c)){f=!1;break}}return c.delete(n),c.delete(e),f}},function(n,e,t){var r=t(127),o=t(302),i=t(303);function a(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}a.prototype.add=a.prototype.push=o,a.prototype.has=i,n.exports=a},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(314),o=t(320),i=t(196);n.exports=function(n){return i(n)?r(n):o(n)}},function(n,e,t){(function(n){var r=t(32),o=t(316),i=e&&!e.nodeType&&e,a=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=a&&a.exports===i?r.Buffer:void 0,c=(s?s.isBuffer:void 0)||o;n.exports=c}).call(this,t(145)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(317),o=t(318),i=t(319),a=i&&i.isTypedArray,s=a?o(a):r;n.exports=s},function(n,e,t){var r=t(186),o=t(129);n.exports=function(n){return null!=n&&o(n.length)&&!r(n)}},function(n,e,t){var r=t(41)(t(32),"Set");n.exports=r},function(n,e,t){var r=t(126);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(201),o=t(95);n.exports=function(n,e){for(var t=0,i=(e=r(e,n)).length;null!=n&&t<i;)n=n[o(e[t++])];return t&&t==i?n:void 0}},function(n,e,t){var r=t(30),o=t(130),i=t(331),a=t(334);n.exports=function(n,e){return r(n)?n:o(n,e)?[n]:i(a(n))}},function(n,e,t){"use strict";var r=t(1),o=t(364).start;r({target:"String",proto:!0,forced:t(366)},{padStart:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";var r=t(1),o=t(0),i=t(61),a=t(44),s=t(18),c=t(14),l=t(104),u=t(51),p=t(66)("splice"),d=o.TypeError,m=Math.max,g=Math.min;r({target:"Array",proto:!0,forced:!p},{splice:function(n,e){var t,r,o,p,f,h,y=c(this),v=s(y),b=i(n,v),k=arguments.length;if(0===k?t=r=0:1===k?(t=0,r=v-b):(t=k-2,r=g(m(a(e),0),v-b)),v+t-r>9007199254740991)throw d("Maximum allowed length exceeded");for(o=l(y,r),p=0;p<r;p++)(f=b+p)in y&&u(o,p,y[f]);if(o.length=r,t<r){for(p=b;p<v-r;p++)h=p+t,(f=p+r)in y?y[h]=y[f]:delete y[h];for(p=v;p>v-r+t;p--)delete y[p-1]}else if(t>r)for(p=v-r;p>b;p--)h=p+t-1,(f=p+r-1)in y?y[h]=y[f]:delete y[h];for(p=0;p<t;p++)y[p+b]=arguments[p+2];return y.length=v-r+t,o}})},function(n,e,t){t(1)({target:"Object",stat:!0},{setPrototypeOf:t(64)})},function(n,e,t){var r=t(1),o=t(17),i=t(36),a=t(375),s=t(162),c=t(8),l=t(9),u=t(34),p=t(3),d=o("Reflect","construct"),m=Object.prototype,g=[].push,f=p((function(){function n(){}return!(d((function(){}),[],n)instanceof n)})),h=!p((function(){d((function(){}))})),y=f||h;r({target:"Reflect",stat:!0,forced:y,sham:y},{construct:function(n,e){s(n),c(e);var t=arguments.length<3?n:s(arguments[2]);if(h&&!f)return d(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var r=[null];return i(g,r,e),new(i(a,n,r))}var o=t.prototype,p=u(l(o)?o:m),y=i(n,p,e);return l(y)?y:p}})},function(n,e,t){var r=t(1),o=t(0),i=t(56);r({global:!0},{Reflect:{}}),i(o.Reflect,"Reflect",!0)},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(267),o=t(272),i=t(343),a=t(351),s=t(360),c=t(229),l=i((function(n){var e=c(n);return s(e)&&(e=void 0),a(r(n,1,s,!0),o(e,2))}));n.exports=l},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,o=r.exec(t);if(!o)return t;var i="",a=0,s=0;for(a=o.index;a<t.length;a++){switch(t.charCodeAt(a)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==a&&(i+=t.substring(s,a)),s=a+1,i+=e}return s!==a?i+t.substring(s,a):i}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},o=(t(367),t(16)),i=Object(o.a)(r,(function(){var n=this.$createElement;return(this._self._c||n)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=i.exports},function(n,e,t){"use strict";t.r(e);t(27),t(4),t(28),t(43),t(22);var r={name:"CodeGroup",data:function(){return{codeTabs:[],activeCodeTabIndex:-1}},watch:{activeCodeTabIndex:function(n){this.codeTabs.forEach((function(n){n.elm.classList.remove("theme-code-block__active")})),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted:function(){var n=this;this.codeTabs=(this.$slots.default||[]).filter((function(n){return Boolean(n.componentOptions)})).map((function(e,t){return""===e.componentOptions.propsData.active&&(n.activeCodeTabIndex=t),{title:e.componentOptions.propsData.title,elm:e.elm}})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab:function(n){this.activeCodeTabIndex=n}}},o=(t(368),t(16)),i=Object(o.a)(r,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"theme-code-group"},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(e,r){return t("li",{key:e.title,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(e.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=i.exports},function(n,e,t){"use strict";var r=t(7),o=t(0),i=t(2),a=t(102),s=t(15),c=t(10),l=t(143),u=t(35),p=t(81),d=t(151),m=t(3),g=t(55).f,f=t(38).f,h=t(13).f,y=t(363),v=t(220).trim,b=o.Number,k=b.prototype,x=o.TypeError,w=i("".slice),S=i("".charCodeAt),E=function(n){var e=d(n,"number");return"bigint"==typeof e?e:_(e)},_=function(n){var e,t,r,o,i,a,s,c,l=d(n,"number");if(p(l))throw x("Cannot convert a Symbol value to a number");if("string"==typeof l&&l.length>2)if(l=v(l),43===(e=S(l,0))||45===e){if(88===(t=S(l,2))||120===t)return NaN}else if(48===e){switch(S(l,1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+l}for(a=(i=w(l,2)).length,s=0;s<a;s++)if((c=S(i,s))<48||c>o)return NaN;return parseInt(i,r)}return+l};if(a("Number",!b(" 0o1")||!b("0b1")||b("+0x1"))){for(var T,A=function(n){var e=arguments.length<1?0:b(E(n)),t=this;return u(k,t)&&m((function(){y(t)}))?l(Object(e),t,A):e},I=r?g(b):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),j=0;I.length>j;j++)c(b,T=I[j])&&!c(A,T)&&h(A,T,f(b,T));A.prototype=k,k.constructor=A,s(o,"Number",A)}},function(n,e,t){"use strict";var r=t(36),o=t(11),i=t(2),a=t(107),s=t(141),c=t(8),l=t(19),u=t(120),p=t(123),d=t(50),m=t(12),g=t(46),f=t(121),h=t(108),y=t(90),v=t(106),b=t(3),k=v.UNSUPPORTED_Y,x=Math.min,w=[].push,S=i(/./.exec),E=i(w),_=i("".slice);a("split",(function(n,e,t){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(n,t){var i=m(l(this)),a=void 0===t?4294967295:t>>>0;if(0===a)return[];if(void 0===n)return[i];if(!s(n))return o(e,i,n,a);for(var c,u,p,d=[],g=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),h=0,v=new RegExp(n.source,g+"g");(c=o(y,v,i))&&!((u=v.lastIndex)>h&&(E(d,_(i,h,c.index)),c.length>1&&c.index<i.length&&r(w,d,f(c,1)),p=c[0].length,h=u,d.length>=a));)v.lastIndex===c.index&&v.lastIndex++;return h===i.length?!p&&S(v,"")||E(d,""):E(d,_(i,h)),d.length>a?f(d,0,a):d}:"0".split(void 0,0).length?function(n,t){return void 0===n&&0===t?[]:o(e,this,n,t)}:e,[function(e,t){var r=l(this),a=null==e?void 0:g(e,n);return a?o(a,e,r,t):o(i,m(r),e,t)},function(n,r){var o=c(this),a=m(n),s=t(i,o,a,r,i!==e);if(s.done)return s.value;var l=u(o,RegExp),g=o.unicode,f=(o.ignoreCase?"i":"")+(o.multiline?"m":"")+(o.unicode?"u":"")+(k?"g":"y"),y=new l(k?"^(?:"+o.source+")":o,f),v=void 0===r?4294967295:r>>>0;if(0===v)return[];if(0===a.length)return null===h(y,a)?[a]:[];for(var b=0,w=0,S=[];w<a.length;){y.lastIndex=k?0:w;var T,A=h(y,k?_(a,w):a);if(null===A||(T=x(d(y.lastIndex+(k?w:0)),a.length))===b)w=p(a,w,g);else{if(E(S,_(a,b,w)),S.length===v)return S;for(var I=1;I<=A.length-1;I++)if(E(S,A[I]),S.length===v)return S;w=b=T}}return E(S,_(a,b)),S}]}),!!b((function(){var n=/(?:)/,e=n.exec;n.exec=function(){return e.apply(this,arguments)};var t="ab".split(n);return 2!==t.length||"a"!==t[0]||"b"!==t[1]})),k)},function(n,e,t){"use strict";var r=t(11),o=t(107),i=t(8),a=t(50),s=t(12),c=t(19),l=t(46),u=t(123),p=t(108);o("match",(function(n,e,t){return[function(e){var t=c(this),o=null==e?void 0:l(e,n);return o?r(o,e,t):new RegExp(e)[n](s(t))},function(n){var r=i(this),o=s(n),c=t(e,r,o);if(c.done)return c.value;if(!r.global)return p(r,o);var l=r.unicode;r.lastIndex=0;for(var d,m=[],g=0;null!==(d=p(r,o));){var f=s(d[0]);m[g]=f,""===f&&(r.lastIndex=u(o,a(r.lastIndex),l)),g++}return 0===g?null:m}]}))},function(n,e,t){var r=t(3),o=t(0).RegExp;n.exports=r((function(){var n=o(".","s");return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){var r=t(2),o=t(19),i=t(12),a=t(221),s=r("".replace),c="["+a+"]",l=RegExp("^"+c+c+"*"),u=RegExp(c+c+"*$"),p=function(n){return function(e){var t=i(o(e));return 1&n&&(t=s(t,l,"")),2&n&&(t=s(t,u,"")),t}};n.exports={start:p(1),end:p(2),trim:p(3)}},function(n,e){n.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(n,e,t){"use strict";var r=t(156).IteratorPrototype,o=t(34),i=t(47),a=t(56),s=t(63),c=function(){return this};n.exports=function(n,e,t,l){var u=e+" Iterator";return n.prototype=o(r,{next:i(+!l,t)}),a(n,u,!1,!0),s[u]=c,n}},function(n,e,t){var r=t(15);n.exports=function(n,e,t){for(var o in e)r(n,o,e[o],t);return n}},function(n,e,t){"use strict";var r=t(17),o=t(13),i=t(6),a=t(7),s=i("species");n.exports=function(n){var e=r(n),t=o.f;a&&e&&!e[s]&&t(e,s,{configurable:!0,get:function(){return this}})}},function(n,e,t){var r=t(0),o=t(35),i=r.TypeError;n.exports=function(n,e){if(o(e,n))return n;throw i("Incorrect invocation")}},function(n,e,t){var r=t(3),o=t(0).RegExp;n.exports=r((function(){var n=o("(?<a>b)","g");return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){"use strict";var r=t(1),o=t(113).includes,i=t(100);r({target:"Array",proto:!0},{includes:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(n,e,t){"use strict";var r=t(1),o=t(2),i=t(172),a=t(19),s=t(12),c=t(173),l=o("".indexOf);r({target:"String",proto:!0,forced:!c("includes")},{includes:function(n){return!!~l(s(a(this)),s(i(n)),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){var r=t(121),o=Math.floor,i=function(n,e){var t=n.length,c=o(t/2);return t<8?a(n,e):s(n,i(r(n,0,c),e),i(r(n,c),e),e)},a=function(n,e){for(var t,r,o=n.length,i=1;i<o;){for(r=i,t=n[i];r&&e(n[r-1],t)>0;)n[r]=n[--r];r!==i++&&(n[r]=t)}return n},s=function(n,e,t,r){for(var o=e.length,i=t.length,a=0,s=0;a<o||s<i;)n[a+s]=a<o&&s<i?r(e[a],t[s])<=0?e[a++]:t[s++]:a<o?e[a++]:t[s++];return n};n.exports=i},function(n,e,t){var r=t(0),o=t(7),i=t(106).MISSED_STICKY,a=t(23),s=t(13).f,c=t(39).get,l=RegExp.prototype,u=r.TypeError;o&&i&&s(l,"sticky",{configurable:!0,get:function(){if(this!==l){if("RegExp"===a(this))return!!c(this).sticky;throw u("Incompatible receiver, RegExp required")}}})},function(n,e,t){n.exports=t(383)},function(n,e,t){var r=t(0),o=t(11),i=t(5),a=t(9),s=r.TypeError;n.exports=function(n,e){var t,r;if("string"===e&&i(t=n.toString)&&!a(r=o(t,n)))return r;if(i(t=n.valueOf)&&!a(r=o(t,n)))return r;if("string"!==e&&i(t=n.toString)&&!a(r=o(t,n)))return r;throw s("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),o=t(5),i=t(85),a=r.WeakMap;n.exports=o(a)&&/native code/.test(i(a))},function(n,e,t){var r=t(0),o=t(5),i=r.String,a=r.TypeError;n.exports=function(n){if("object"==typeof n||o(n))return n;throw a("Can't set "+i(n)+" as a prototype")}},function(n,e,t){"use strict";var r,o,i,a,s=t(1),c=t(24),l=t(0),u=t(17),p=t(11),d=t(158),m=t(15),g=t(223),f=t(64),h=t(56),y=t(224),v=t(37),b=t(5),k=t(9),x=t(225),w=t(85),S=t(237),E=t(161),_=t(120),T=t(163).set,A=t(238),I=t(165),j=t(241),R=t(166),C=t(242),z=t(243),O=t(39),B=t(102),P=t(6),D=t(244),q=t(87),L=t(49),U=P("species"),M="Promise",$=O.getterFor(M),N=O.set,F=O.getterFor(M),J=d&&d.prototype,H=d,W=J,G=l.TypeError,V=l.document,Q=l.process,K=R.f,Y=K,X=!!(V&&V.createEvent&&l.dispatchEvent),Z=b(l.PromiseRejectionEvent),nn=!1,en=B(M,(function(){var n=w(H),e=n!==String(H);if(!e&&66===L)return!0;if(c&&!W.finally)return!0;if(L>=51&&/native code/.test(n))return!1;var t=new H((function(n){n(1)})),r=function(n){n((function(){}),(function(){}))};return(t.constructor={})[U]=r,!(nn=t.then((function(){}))instanceof r)||!e&&D&&!Z})),tn=en||!E((function(n){H.all(n).catch((function(){}))})),rn=function(n){var e;return!(!k(n)||!b(e=n.then))&&e},on=function(n,e){var t,r,o,i=e.value,a=1==e.state,s=a?n.ok:n.fail,c=n.resolve,l=n.reject,u=n.domain;try{s?(a||(2===e.rejection&&un(e),e.rejection=1),!0===s?t=i:(u&&u.enter(),t=s(i),u&&(u.exit(),o=!0)),t===n.promise?l(G("Promise-chain cycle")):(r=rn(t))?p(r,t,c,l):c(t)):l(i)}catch(n){u&&!o&&u.exit(),l(n)}},an=function(n,e){n.notified||(n.notified=!0,A((function(){for(var t,r=n.reactions;t=r.get();)on(t,n);n.notified=!1,e&&!n.rejection&&cn(n)})))},sn=function(n,e,t){var r,o;X?((r=V.createEvent("Event")).promise=e,r.reason=t,r.initEvent(n,!1,!0),l.dispatchEvent(r)):r={promise:e,reason:t},!Z&&(o=l["on"+n])?o(r):"unhandledrejection"===n&&j("Unhandled promise rejection",t)},cn=function(n){p(T,l,(function(){var e,t=n.facade,r=n.value;if(ln(n)&&(e=C((function(){q?Q.emit("unhandledRejection",r,t):sn("unhandledrejection",t,r)})),n.rejection=q||ln(n)?2:1,e.error))throw e.value}))},ln=function(n){return 1!==n.rejection&&!n.parent},un=function(n){p(T,l,(function(){var e=n.facade;q?Q.emit("rejectionHandled",e):sn("rejectionhandled",e,n.value)}))},pn=function(n,e,t){return function(r){n(e,r,t)}},dn=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,an(n,!0))},mn=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw G("Promise can't be resolved itself");var r=rn(e);r?A((function(){var t={done:!1};try{p(r,e,pn(mn,t,n),pn(dn,t,n))}catch(e){dn(t,e,n)}})):(n.value=e,n.state=1,an(n,!1))}catch(e){dn({done:!1},e,n)}}};if(en&&(W=(H=function(n){x(this,W),v(n),p(r,this);var e=$(this);try{n(pn(mn,e),pn(dn,e))}catch(n){dn(e,n)}}).prototype,(r=function(n){N(this,{type:M,done:!1,notified:!1,parent:!1,reactions:new z,rejection:!1,state:0,value:void 0})}).prototype=g(W,{then:function(n,e){var t=F(this),r=K(_(this,H));return t.parent=!0,r.ok=!b(n)||n,r.fail=b(e)&&e,r.domain=q?Q.domain:void 0,0==t.state?t.reactions.add(r):A((function(){on(r,t)})),r.promise},catch:function(n){return this.then(void 0,n)}}),o=function(){var n=new r,e=$(n);this.promise=n,this.resolve=pn(mn,e),this.reject=pn(dn,e)},R.f=K=function(n){return n===H||n===i?new o(n):Y(n)},!c&&b(d)&&J!==Object.prototype)){a=J.then,nn||(m(J,"then",(function(n,e){var t=this;return new H((function(n,e){p(a,t,n,e)})).then(n,e)}),{unsafe:!0}),m(J,"catch",W.catch,{unsafe:!0}));try{delete J.constructor}catch(n){}f&&f(J,W)}s({global:!0,wrap:!0,forced:en},{Promise:H}),h(H,M,!1,!0),y(M),i=u(M),s({target:M,stat:!0,forced:en},{reject:function(n){var e=K(this);return p(e.reject,void 0,n),e.promise}}),s({target:M,stat:!0,forced:c||en},{resolve:function(n){return I(c&&this===i?H:this,n)}}),s({target:M,stat:!0,forced:tn},{all:function(n){var e=this,t=K(e),r=t.resolve,o=t.reject,i=C((function(){var t=v(e.resolve),i=[],a=0,s=1;S(n,(function(n){var c=a++,l=!1;s++,p(t,e,n).then((function(n){l||(l=!0,i[c]=n,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),t.promise},race:function(n){var e=this,t=K(e),r=t.reject,o=C((function(){var o=v(e.resolve);S(n,(function(n){p(o,e,n).then(t.resolve,r)}))}));return o.error&&r(o.value),t.promise}})},function(n,e,t){var r=t(0),o=t(53),i=t(11),a=t(8),s=t(82),c=t(159),l=t(18),u=t(35),p=t(140),d=t(103),m=t(160),g=r.TypeError,f=function(n,e){this.stopped=n,this.result=e},h=f.prototype;n.exports=function(n,e,t){var r,y,v,b,k,x,w,S=t&&t.that,E=!(!t||!t.AS_ENTRIES),_=!(!t||!t.IS_ITERATOR),T=!(!t||!t.INTERRUPTED),A=o(e,S),I=function(n){return r&&m(r,"normal",n),new f(!0,n)},j=function(n){return E?(a(n),T?A(n[0],n[1],I):A(n[0],n[1])):T?A(n,I):A(n)};if(_)r=n;else{if(!(y=d(n)))throw g(s(n)+" is not iterable");if(c(y)){for(v=0,b=l(n);b>v;v++)if((k=j(n[v]))&&u(h,k))return k;return new f(!1)}r=p(n,y)}for(x=r.next;!(w=i(x,r)).done;){try{k=j(w.value)}catch(n){m(r,"throw",n)}if("object"==typeof k&&k&&u(h,k))return k}return new f(!1)}},function(n,e,t){var r,o,i,a,s,c,l,u,p=t(0),d=t(53),m=t(38).f,g=t(163).set,f=t(164),h=t(239),y=t(240),v=t(87),b=p.MutationObserver||p.WebKitMutationObserver,k=p.document,x=p.process,w=p.Promise,S=m(p,"queueMicrotask"),E=S&&S.value;E||(r=function(){var n,e;for(v&&(n=x.domain)&&n.exit();o;){e=o.fn,o=o.next;try{e()}catch(n){throw o?a():i=void 0,n}}i=void 0,n&&n.enter()},f||v||y||!b||!k?!h&&w&&w.resolve?((l=w.resolve(void 0)).constructor=w,u=d(l.then,l),a=function(){u(r)}):v?a=function(){x.nextTick(r)}:(g=d(g,p),a=function(){g(r)}):(s=!0,c=k.createTextNode(""),new b(r).observe(c,{characterData:!0}),a=function(){c.data=s=!s})),n.exports=E||function(n){var e={fn:n,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},function(n,e,t){var r=t(31),o=t(0);n.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==o.Pebble},function(n,e,t){var r=t(31);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,e,t){var r=t(0);n.exports=function(n,e){var t=r.console;t&&t.error&&(1==arguments.length?t.error(n):t.error(n,e))}},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(n){var e={item:n,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var n=this.head;if(n)return this.head=n.next,this.tail===n&&(this.tail=null),n.item}},n.exports=t},function(n,e){n.exports="object"==typeof window},function(n,e,t){var r=t(1),o=t(246);r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},function(n,e,t){"use strict";var r=t(7),o=t(2),i=t(11),a=t(3),s=t(83),c=t(117),l=t(115),u=t(14),p=t(59),d=Object.assign,m=Object.defineProperty,g=o([].concat);n.exports=!d||a((function(){if(r&&1!==d({b:1},d(m({},"a",{enumerable:!0,get:function(){m(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=d({},n)[t]||"abcdefghijklmnopqrst"!=s(d({},e)).join("")}))?function(n,e){for(var t=u(n),o=arguments.length,a=1,d=c.f,m=l.f;o>a;)for(var f,h=p(arguments[a++]),y=d?g(s(h),d(h)):s(h),v=y.length,b=0;v>b;)f=y[b++],r&&!i(m,h,f)||(t[f]=h[f]);return t}:d},function(n,e,t){"use strict";var r=t(1),o=t(24),i=t(158),a=t(3),s=t(17),c=t(5),l=t(120),u=t(165),p=t(15);if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&a((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=l(this,s("Promise")),t=c(n);return this.then(t?function(t){return u(e,n()).then((function(){return t}))}:n,t?function(t){return u(e,n()).then((function(){throw t}))}:n)}}),!o&&c(i)){var d=s("Promise").prototype.finally;i.prototype.finally!==d&&p(i.prototype,"finally",d,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(119),o=t(75);n.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(n,e,t){var r=t(0),o=t(57),i=t(86),a=t(9),s=t(6)("species"),c=r.Array;n.exports=function(n){var e;return o(n)&&(e=n.constructor,(i(e)&&(e===c||o(e.prototype))||a(e)&&null===(e=e[s]))&&(e=void 0)),void 0===e?c:e}},function(n,e,t){"use strict";var r=t(1),o=t(251).left,i=t(45),a=t(49),s=t(87);r({target:"Array",proto:!0,forced:!i("reduce")||!s&&a>79&&a<83},{reduce:function(n){var e=arguments.length;return o(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),o=t(37),i=t(14),a=t(59),s=t(18),c=r.TypeError,l=function(n){return function(e,t,r,l){o(t);var u=i(e),p=a(u),d=s(u),m=n?d-1:0,g=n?-1:1;if(r<2)for(;;){if(m in p){l=p[m],m+=g;break}if(m+=g,n?m<0:d<=m)throw c("Reduce of empty array with no initial value")}for(;n?m>=0:d>m;m+=g)m in p&&(l=t(l,p[m],m,u));return l}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r,o=t(1),i=t(2),a=t(38).f,s=t(50),c=t(12),l=t(172),u=t(19),p=t(173),d=t(24),m=i("".startsWith),g=i("".slice),f=Math.min,h=p("startsWith");o({target:"String",proto:!0,forced:!!(d||h||(r=a(String.prototype,"startsWith"),!r||r.writable))&&!h},{startsWith:function(n){var e=c(u(this));l(n);var t=s(f(arguments.length>1?arguments[1]:void 0,e.length)),r=c(n);return m?m(e,r,t):g(e,t,t+r.length)===r}})},function(n,e,t){var r=t(1),o=t(175),i=t(3),a=t(9),s=t(254).onFreeze,c=Object.freeze;r({target:"Object",stat:!0,forced:i((function(){c(1)})),sham:!o},{freeze:function(n){return c&&a(n)?c(s(n)):n}})},function(n,e,t){var r=t(1),o=t(2),i=t(62),a=t(9),s=t(10),c=t(13).f,l=t(55),u=t(176),p=t(255),d=t(78),m=t(175),g=!1,f=d("meta"),h=0,y=function(n){c(n,f,{value:{objectID:"O"+h++,weakData:{}}})},v=n.exports={enable:function(){v.enable=function(){},g=!0;var n=l.f,e=o([].splice),t={};t[f]=1,n(t).length&&(l.f=function(t){for(var r=n(t),o=0,i=r.length;o<i;o++)if(r[o]===f){e(r,o,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:u.f}))},fastKey:function(n,e){if(!a(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!s(n,f)){if(!p(n))return"F";if(!e)return"E";y(n)}return n[f].objectID},getWeakData:function(n,e){if(!s(n,f)){if(!p(n))return!0;if(!e)return!1;y(n)}return n[f].weakData},onFreeze:function(n){return m&&g&&p(n)&&!s(n,f)&&y(n),n}};i[f]=!0},function(n,e,t){var r=t(3),o=t(9),i=t(23),a=t(256),s=Object.isExtensible,c=r((function(){s(1)}));n.exports=c||a?function(n){return!!o(n)&&((!a||"ArrayBuffer"!=i(n))&&(!s||s(n)))}:s},function(n,e,t){var r=t(3);n.exports=r((function(){if("function"==typeof ArrayBuffer){var n=new ArrayBuffer(8);Object.isExtensible(n)&&Object.defineProperty(n,"a",{value:8})}}))},function(n,e,t){var r=t(0);n.exports=r},function(n,e,t){"use strict";var r=t(0),o=t(53),i=t(11),a=t(14),s=t(259),c=t(159),l=t(86),u=t(18),p=t(51),d=t(140),m=t(103),g=r.Array;n.exports=function(n){var e=a(n),t=l(this),r=arguments.length,f=r>1?arguments[1]:void 0,h=void 0!==f;h&&(f=o(f,r>2?arguments[2]:void 0));var y,v,b,k,x,w,S=m(e),E=0;if(!S||this==g&&c(S))for(y=u(e),v=t?new this(y):g(y);y>E;E++)w=h?f(e[E],E):e[E],p(v,E,w);else for(x=(k=d(e,S)).next,v=t?new this:[];!(b=i(x,k)).done;E++)w=h?s(k,f,[b.value,E],!0):b.value,p(v,E,w);return v.length=E,v}},function(n,e,t){var r=t(8),o=t(160);n.exports=function(n,e,t,i){try{return i?e(r(t)[0],t[1]):e(t)}catch(e){o(n,"throw",e)}}},function(n,e,t){"use strict";var r=t(17),o=t(10),i=t(25),a=t(35),s=t(64),c=t(116),l=t(143),u=t(180),p=t(261),d=t(262),m=t(263),g=t(24);n.exports=function(n,e,t,f){var h=f?2:1,y=n.split("."),v=y[y.length-1],b=r.apply(null,y);if(b){var k=b.prototype;if(!g&&o(k,"cause")&&delete k.cause,!t)return b;var x=r("Error"),w=e((function(n,e){var t=u(f?e:n,void 0),r=f?new b(n):new b;return void 0!==t&&i(r,"message",t),m&&i(r,"stack",d(r.stack,2)),this&&a(k,this)&&l(r,this,w),arguments.length>h&&p(r,arguments[h]),r}));if(w.prototype=k,"Error"!==v&&(s?s(w,x):c(w,x,{name:!0})),c(w,b),!g)try{k.name!==v&&i(k,"name",v),k.constructor=w}catch(n){}return w}}},function(n,e,t){var r=t(9),o=t(25);n.exports=function(n,e){r(e)&&"cause"in e&&o(n,"cause",e.cause)}},function(n,e,t){var r=t(2)("".replace),o=String(Error("zxcasd").stack),i=/\n\s*at [^:]*:[^\n]*/,a=i.test(o);n.exports=function(n,e){if(a&&"string"==typeof n)for(;e--;)n=r(n,i,"");return n}},function(n,e,t){var r=t(3),o=t(47);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",o(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(7),o=t(3),i=t(8),a=t(34),s=t(180),c=Error.prototype.toString,l=o((function(){if(r){var n=a(Object.defineProperty({},"name",{get:function(){return this===n}}));if("true"!==c.call(n))return!0}return"2: 1"!==c.call({message:1,name:2})||"Error"!==c.call({})}));n.exports=l?function(){var n=i(this),e=s(n.name,"Error"),t=s(n.message);return e?t?e+": "+t:e:t}:c},function(n,e,t){var r=t(2),o=t(14),i=Math.floor,a=r("".charAt),s=r("".replace),c=r("".slice),l=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,r,p,d){var m=t+n.length,g=r.length,f=u;return void 0!==p&&(p=o(p),f=l),s(d,f,(function(o,s){var l;switch(a(s,0)){case"$":return"$";case"&":return n;case"`":return c(e,0,t);case"'":return c(e,m);case"<":l=p[c(s,1,-1)];break;default:var u=+s;if(0===u)return o;if(u>g){var d=i(u/10);return 0===d?o:d<=g?void 0===r[d-1]?a(s,1):r[d-1]+a(s,1):o}l=r[u-1]}return void 0===l?"":l}))}},function(n,e,t){var r=t(1),o=t(0),i=t(17),a=t(36),s=t(2),c=t(3),l=o.Array,u=i("JSON","stringify"),p=s(/./.exec),d=s("".charAt),m=s("".charCodeAt),g=s("".replace),f=s(1..toString),h=/[\uD800-\uDFFF]/g,y=/^[\uD800-\uDBFF]$/,v=/^[\uDC00-\uDFFF]$/,b=function(n,e,t){var r=d(t,e-1),o=d(t,e+1);return p(y,n)&&!p(v,o)||p(v,n)&&!p(y,r)?"\\u"+f(m(n,0),16):n},k=c((function(){return'"\\udf06\\ud834"'!==u("\udf06\ud834")||'"\\udead"'!==u("\udead")}));u&&r({target:"JSON",stat:!0,forced:k},{stringify:function(n,e,t){for(var r=0,o=arguments.length,i=l(o);r<o;r++)i[r]=arguments[r];var s=a(u,null,i);return"string"==typeof s?g(s,h,b):s}})},function(n,e,t){var r=t(182),o=t(268);n.exports=function n(e,t,i,a,s){var c=-1,l=e.length;for(i||(i=o),s||(s=[]);++c<l;){var u=e[c];t>0&&i(u)?t>1?n(u,t-1,i,a,s):r(s,u):a||(s[s.length]=u)}return s}},function(n,e,t){var r=t(68),o=t(124),i=t(30),a=r?r.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||o(n)||!!(a&&n&&n[a])}},function(n,e,t){var r=t(58),o=t(48);n.exports=function(n){return o(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(68),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=i.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var o=a.call(n);return r&&(e?n[s]=t:delete n[s]),o}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(273),o=t(329),i=t(132),a=t(30),s=t(340);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?a(n)?o(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(274),o=t(328),i=t(199);n.exports=function(n){var e=o(n);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(184),o=t(188);n.exports=function(n,e,t,i){var a=t.length,s=a,c=!i;if(null==n)return!s;for(n=Object(n);a--;){var l=t[a];if(c&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++a<s;){var u=(l=t[a])[0],p=n[u],d=l[1];if(c&&l[2]){if(void 0===p&&!(u in n))return!1}else{var m=new r;if(i)var g=i(p,d,u,n,e,m);if(!(void 0===g?o(d,p,3,i,m):g))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(92),o=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():o.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(92);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(92);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(92);n.exports=function(n,e){var t=this.__data__,o=r(t,n);return o<0?(++this.size,t.push([n,e])):t[o][1]=e,this}},function(n,e,t){var r=t(91);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(91),o=t(125),i=t(127);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var a=t.__data__;if(!o||a.length<199)return a.push([n,e]),this.size=++t.size,this;t=this.__data__=new i(a)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(186),o=t(286),i=t(126),a=t(187),s=/^\[object .+?Constructor\]$/,c=Function.prototype,l=Object.prototype,u=c.toString,p=l.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||o(n))&&(r(n)?d:s).test(a(n))}},function(n,e,t){var r,o=t(287),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!i&&i in n}},function(n,e,t){var r=t(32)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(290),o=t(91),i=t(125);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(n,e,t){var r=t(291),o=t(292),i=t(293),a=t(294),s=t(295);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(93);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(93),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return o.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(93),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:o.call(e,n)}},function(n,e,t){var r=t(93);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(94);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(94);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(94);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(94);n.exports=function(n,e){var t=r(this,n),o=t.size;return t.set(n,e),this.size+=t.size==o?0:1,this}},function(n,e,t){var r=t(184),o=t(189),i=t(305),a=t(308),s=t(324),c=t(30),l=t(193),u=t(195),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,m,g,f){var h=c(n),y=c(e),v=h?"[object Array]":s(n),b=y?"[object Array]":s(e),k=(v="[object Arguments]"==v?p:v)==p,x=(b="[object Arguments]"==b?p:b)==p,w=v==b;if(w&&l(n)){if(!l(e))return!1;h=!0,k=!1}if(w&&!k)return f||(f=new r),h||u(n)?o(n,e,t,m,g,f):i(n,e,v,t,m,g,f);if(!(1&t)){var S=k&&d.call(n,"__wrapped__"),E=x&&d.call(e,"__wrapped__");if(S||E){var _=S?n.value():n,T=E?e.value():e;return f||(f=new r),g(_,T,t,m,f)}}return!!w&&(f||(f=new r),a(n,e,t,m,g,f))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(68),o=t(306),i=t(185),a=t(189),s=t(307),c=t(128),l=r?r.prototype:void 0,u=l?l.valueOf:void 0;n.exports=function(n,e,t,r,l,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new o(n),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var m=s;case"[object Set]":var g=1&r;if(m||(m=c),n.size!=e.size&&!g)return!1;var f=d.get(n);if(f)return f==e;r|=2,d.set(n,e);var h=a(m(n),m(e),r,l,p,d);return d.delete(n),h;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var r=t(32).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(309),o=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,i,a,s){var c=1&t,l=r(n),u=l.length;if(u!=r(e).length&&!c)return!1;for(var p=u;p--;){var d=l[p];if(!(c?d in e:o.call(e,d)))return!1}var m=s.get(n),g=s.get(e);if(m&&g)return m==e&&g==n;var f=!0;s.set(n,e),s.set(e,n);for(var h=c;++p<u;){var y=n[d=l[p]],v=e[d];if(i)var b=c?i(v,y,d,e,n,s):i(y,v,d,n,e,s);if(!(void 0===b?y===v||a(y,v,t,i,s):b)){f=!1;break}h||(h="constructor"==d)}if(f&&!h){var k=n.constructor,x=e.constructor;k==x||!("constructor"in n)||!("constructor"in e)||"function"==typeof k&&k instanceof k&&"function"==typeof x&&x instanceof x||(f=!1)}return s.delete(n),s.delete(e),f}},function(n,e,t){var r=t(310),o=t(311),i=t(192);n.exports=function(n){return r(n,i,o)}},function(n,e,t){var r=t(182),o=t(30);n.exports=function(n,e,t){var i=e(n);return o(n)?i:r(i,t(n))}},function(n,e,t){var r=t(312),o=t(313),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(n){return null==n?[]:(n=Object(n),r(a(n),(function(e){return i.call(n,e)})))}:o;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=0,i=[];++t<r;){var a=n[t];e(a,t,n)&&(i[o++]=a)}return i}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(315),o=t(124),i=t(30),a=t(193),s=t(194),c=t(195),l=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=i(n),u=!t&&o(n),p=!t&&!u&&a(n),d=!t&&!u&&!p&&c(n),m=t||u||p||d,g=m?r(n.length,String):[],f=g.length;for(var h in n)!e&&!l.call(n,h)||m&&("length"==h||p&&("offset"==h||"parent"==h)||d&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||s(h,f))||g.push(h);return g}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(58),o=t(129),i=t(48),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&o(n.length)&&!!a[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(183),o=e&&!e.nodeType&&e,i=o&&"object"==typeof n&&n&&!n.nodeType&&n,a=i&&i.exports===o&&r.process,s=function(){try{var n=i&&i.require&&i.require("util").types;return n||a&&a.binding&&a.binding("util")}catch(n){}}();n.exports=s}).call(this,t(145)(n))},function(n,e,t){var r=t(321),o=t(322),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return o(n);var e=[];for(var t in Object(n))i.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(323)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(325),o=t(125),i=t(326),a=t(197),s=t(327),c=t(58),l=t(187),u=l(r),p=l(o),d=l(i),m=l(a),g=l(s),f=c;(r&&"[object DataView]"!=f(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=f(new o)||i&&"[object Promise]"!=f(i.resolve())||a&&"[object Set]"!=f(new a)||s&&"[object WeakMap]"!=f(new s))&&(f=function(n){var e=c(n),t="[object Object]"==e?n.constructor:void 0,r=t?l(t):"";if(r)switch(r){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case m:return"[object Set]";case g:return"[object WeakMap]"}return e}),n.exports=f},function(n,e,t){var r=t(41)(t(32),"DataView");n.exports=r},function(n,e,t){var r=t(41)(t(32),"Promise");n.exports=r},function(n,e,t){var r=t(41)(t(32),"WeakMap");n.exports=r},function(n,e,t){var r=t(198),o=t(192);n.exports=function(n){for(var e=o(n),t=e.length;t--;){var i=e[t],a=n[i];e[t]=[i,a,r(a)]}return e}},function(n,e,t){var r=t(188),o=t(330),i=t(337),a=t(130),s=t(198),c=t(199),l=t(95);n.exports=function(n,e){return a(n)&&s(e)?c(l(n),e):function(t){var a=o(t,n);return void 0===a&&a===e?i(t,n):r(e,a,3)}}},function(n,e,t){var r=t(200);n.exports=function(n,e,t){var o=null==n?void 0:r(n,e);return void 0===o?t:o}},function(n,e,t){var r=t(332),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(o,(function(n,t,r,o){e.push(r?o.replace(i,"$1"):t||n)})),e}));n.exports=a},function(n,e,t){var r=t(333);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(127);function o(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,o=e?e.apply(this,r):r[0],i=t.cache;if(i.has(o))return i.get(o);var a=n.apply(this,r);return t.cache=i.set(o,a)||i,a};return t.cache=new(o.Cache||r),t}o.Cache=r,n.exports=o},function(n,e,t){var r=t(335);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(68),o=t(336),i=t(30),a=t(131),s=r?r.prototype:void 0,c=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(i(e))return o(e,n)+"";if(a(e))return c?c.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=Array(r);++t<r;)o[t]=e(n[t],t,n);return o}},function(n,e,t){var r=t(338),o=t(339);n.exports=function(n,e){return null!=n&&o(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(201),o=t(124),i=t(30),a=t(194),s=t(129),c=t(95);n.exports=function(n,e,t){for(var l=-1,u=(e=r(e,n)).length,p=!1;++l<u;){var d=c(e[l]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++l!=u?p:!!(u=null==n?0:n.length)&&s(u)&&a(d,u)&&(i(n)||o(n))}},function(n,e,t){var r=t(341),o=t(342),i=t(130),a=t(95);n.exports=function(n){return i(n)?r(a(n)):o(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(200);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(132),o=t(344),i=t(346);n.exports=function(n,e){return i(o(n,e,r),n+"")}},function(n,e,t){var r=t(345),o=Math.max;n.exports=function(n,e,t){return e=o(void 0===e?n.length-1:e,0),function(){for(var i=arguments,a=-1,s=o(i.length-e,0),c=Array(s);++a<s;)c[a]=i[e+a];a=-1;for(var l=Array(e+1);++a<e;)l[a]=i[a];return l[e]=t(c),r(n,this,l)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(347),o=t(350)(r);n.exports=o},function(n,e,t){var r=t(348),o=t(349),i=t(132),a=o?function(n,e){return o(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:i;n.exports=a},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(41),o=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=o},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var o=t(),i=16-(o-r);if(r=o,i>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(190),o=t(352),i=t(357),a=t(191),s=t(358),c=t(128);n.exports=function(n,e,t){var l=-1,u=o,p=n.length,d=!0,m=[],g=m;if(t)d=!1,u=i;else if(p>=200){var f=e?null:s(n);if(f)return c(f);d=!1,u=a,g=new r}else g=e?[]:m;n:for(;++l<p;){var h=n[l],y=e?e(h):h;if(h=t||0!==h?h:0,d&&y==y){for(var v=g.length;v--;)if(g[v]===y)continue n;e&&g.push(y),m.push(h)}else u(g,y,t)||(g!==m&&g.push(y),m.push(h))}return m}},function(n,e,t){var r=t(353);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(354),o=t(355),i=t(356);n.exports=function(n,e,t){return e==e?i(n,e,t):r(n,o,t)}},function(n,e){n.exports=function(n,e,t,r){for(var o=n.length,i=t+(r?1:-1);r?i--:++i<o;)if(e(n[i],i,n))return i;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,o=n.length;++r<o;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,o=null==n?0:n.length;++r<o;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(197),o=t(359),i=t(128),a=r&&1/i(new r([,-0]))[1]==1/0?function(n){return new r(n)}:o;n.exports=a},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(196),o=t(48);n.exports=function(n){return o(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(2);n.exports=r(1..valueOf)},function(n,e,t){var r=t(2),o=t(50),i=t(12),a=t(365),s=t(19),c=r(a),l=r("".slice),u=Math.ceil,p=function(n){return function(e,t,r){var a,p,d=i(s(e)),m=o(t),g=d.length,f=void 0===r?" ":i(r);return m<=g||""==f?d:((p=c(f,u((a=m-g)/f.length))).length>a&&(p=l(p,0,a)),n?d+p:p+d)}};n.exports={start:p(!1),end:p(!0)}},function(n,e,t){"use strict";var r=t(0),o=t(44),i=t(12),a=t(19),s=r.RangeError;n.exports=function(n){var e=i(a(this)),t="",r=o(n);if(r<0||r==1/0)throw s("Wrong number of repetitions");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(t+=e);return t}},function(n,e,t){var r=t(31);n.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},function(n,e,t){"use strict";t(203)},function(n,e,t){"use strict";t(204)},function(n,e,t){"use strict";var r=t(1),o=t(2),i=t(37),a=t(14),s=t(18),c=t(12),l=t(3),u=t(230),p=t(45),d=t(370),m=t(371),g=t(49),f=t(372),h=[],y=o(h.sort),v=o(h.push),b=l((function(){h.sort(void 0)})),k=l((function(){h.sort(null)})),x=p("sort"),w=!l((function(){if(g)return g<70;if(!(d&&d>3)){if(m)return!0;if(f)return f<603;var n,e,t,r,o="";for(n=65;n<76;n++){switch(e=String.fromCharCode(n),n){case 66:case 69:case 70:case 72:t=3;break;case 68:case 71:t=4;break;default:t=2}for(r=0;r<47;r++)h.push({k:e+r,v:t})}for(h.sort((function(n,e){return e.v-n.v})),r=0;r<h.length;r++)e=h[r].k.charAt(0),o.charAt(o.length-1)!==e&&(o+=e);return"DGBEFHACIJK"!==o}}));r({target:"Array",proto:!0,forced:b||!k||!x||!w},{sort:function(n){void 0!==n&&i(n);var e=a(this);if(w)return void 0===n?y(e):y(e,n);var t,r,o=[],l=s(e);for(r=0;r<l;r++)r in e&&v(o,e[r]);for(u(o,function(n){return function(e,t){return void 0===t?-1:void 0===e?1:void 0!==n?+n(e,t)||0:c(e)>c(t)?1:-1}}(n)),t=o.length,r=0;r<t;)e[r]=o[r++];for(;r<l;)delete e[r++];return e}})},function(n,e,t){var r=t(31).match(/firefox\/(\d+)/i);n.exports=!!r&&+r[1]},function(n,e,t){var r=t(31);n.exports=/MSIE|Trident/.test(r)},function(n,e,t){var r=t(31).match(/AppleWebKit\/(\d+)\./);n.exports=!!r&&+r[1]},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";var r=t(0),o=t(2),i=t(37),a=t(9),s=t(10),c=t(65),l=t(60),u=r.Function,p=o([].concat),d=o([].join),m={},g=function(n,e,t){if(!s(m,e)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";m[e]=u("C,a","return new C("+d(r,",")+")")}return m[e](n,t)};n.exports=l?u.bind:function(n){var e=i(this),t=e.prototype,r=c(arguments,1),o=function(){var t=p(r,c(arguments));return this instanceof o?g(e,t.length,t):e.apply(n,t)};return a(t)&&(o.prototype=t),o}},function(n,e,t){var r=t(1),o=t(3),i=t(20),a=t(38).f,s=t(7),c=o((function(){a(1)}));r({target:"Object",stat:!0,forced:!s||c,sham:!s},{getOwnPropertyDescriptor:function(n,e){return a(i(n),e)}})},function(n,e,t){var r=t(1),o=t(7),i=t(112).f;r({target:"Object",stat:!0,forced:Object.defineProperties!==i,sham:!o},{defineProperties:i})},function(n,e,t){var r=t(1),o=t(379),i=t(100);r({target:"Array",proto:!0},{fill:o}),i("fill")},function(n,e,t){"use strict";var r=t(14),o=t(61),i=t(18);n.exports=function(n){for(var e=r(this),t=i(e),a=arguments.length,s=o(a>1?arguments[1]:void 0,t),c=a>2?arguments[2]:void 0,l=void 0===c?t:o(c,t);l>s;)e[s++]=n;return e}},function(n,e,t){"use strict";t(209)},function(n,e,t){"use strict";t(210)},function(n,e,t){"use strict";t(211)},function(n,e,t){"use strict";t.r(e);t(139),t(236),t(245),t(247);var r=t(88),o=(t(137),t(71),t(4),t(26),t(33),t(43),t(22),Object.freeze({}));function i(n){return null==n}function a(n){return null!=n}function s(n){return!0===n}function c(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function l(n){return null!==n&&"object"==typeof n}var u=Object.prototype.toString;function p(n){return"[object Object]"===u.call(n)}function d(n){return"[object RegExp]"===u.call(n)}function m(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function g(n){return a(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function f(n){return null==n?"":Array.isArray(n)||p(n)&&n.toString===u?JSON.stringify(n,null,2):String(n)}function h(n){var e=parseFloat(n);return isNaN(e)?n:e}function y(n,e){for(var t=Object.create(null),r=n.split(","),o=0;o<r.length;o++)t[r[o]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}y("slot,component",!0);var v=y("key,ref,slot,slot-scope,is");function b(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var k=Object.prototype.hasOwnProperty;function x(n,e){return k.call(n,e)}function w(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var S=/-(\w)/g,E=w((function(n){return n.replace(S,(function(n,e){return e?e.toUpperCase():""}))})),_=w((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),T=/\B([A-Z])/g,A=w((function(n){return n.replace(T,"-$1").toLowerCase()}));var I=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function j(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function R(n,e){for(var t in e)n[t]=e[t];return n}function C(n){for(var e={},t=0;t<n.length;t++)n[t]&&R(e,n[t]);return e}function z(n,e,t){}var O=function(n,e,t){return!1},B=function(n){return n};function P(n,e){if(n===e)return!0;var t=l(n),r=l(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var o=Array.isArray(n),i=Array.isArray(e);if(o&&i)return n.length===e.length&&n.every((function(n,t){return P(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(n),s=Object.keys(e);return a.length===s.length&&a.every((function(t){return P(n[t],e[t])}))}catch(n){return!1}}function D(n,e){for(var t=0;t<n.length;t++)if(P(n[t],e))return t;return-1}function q(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var L=["component","directive","filter"],U=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],M={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:O,isReservedAttr:O,isUnknownElement:O,getTagNamespace:z,parsePlatformTagName:B,mustUseProp:O,async:!0,_lifecycleHooks:U},$=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function N(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var F=new RegExp("[^"+$.source+".$_\\d]");var J,H="__proto__"in{},W="undefined"!=typeof window,G="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,V=G&&WXEnvironment.platform.toLowerCase(),Q=W&&window.navigator.userAgent.toLowerCase(),K=Q&&/msie|trident/.test(Q),Y=Q&&Q.indexOf("msie 9.0")>0,X=Q&&Q.indexOf("edge/")>0,Z=(Q&&Q.indexOf("android"),Q&&/iphone|ipad|ipod|ios/.test(Q)||"ios"===V),nn=(Q&&/chrome\/\d+/.test(Q),Q&&/phantomjs/.test(Q),Q&&Q.match(/firefox\/(\d+)/)),en={}.watch,tn=!1;if(W)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){tn=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var on=function(){return void 0===J&&(J=!W&&!G&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),J},an=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function sn(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,ln="undefined"!=typeof Symbol&&sn(Symbol)&&"undefined"!=typeof Reflect&&sn(Reflect.ownKeys);cn="undefined"!=typeof Set&&sn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var un=z,pn=0,dn=function(){this.id=pn++,this.subs=[]};dn.prototype.addSub=function(n){this.subs.push(n)},dn.prototype.removeSub=function(n){b(this.subs,n)},dn.prototype.depend=function(){dn.target&&dn.target.addDep(this)},dn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},dn.target=null;var mn=[];function gn(n){mn.push(n),dn.target=n}function fn(){mn.pop(),dn.target=mn[mn.length-1]}var hn=function(n,e,t,r,o,i,a,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},yn={child:{configurable:!0}};yn.child.get=function(){return this.componentInstance},Object.defineProperties(hn.prototype,yn);var vn=function(n){void 0===n&&(n="");var e=new hn;return e.text=n,e.isComment=!0,e};function bn(n){return new hn(void 0,void 0,void 0,String(n))}function kn(n){var e=new hn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var xn=Array.prototype,wn=Object.create(xn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=xn[n];N(wn,n,(function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];var o,i=e.apply(this,t),a=this.__ob__;switch(n){case"push":case"unshift":o=t;break;case"splice":o=t.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i}))}));var Sn=Object.getOwnPropertyNames(wn),En=!0;function _n(n){En=n}var Tn=function(n){this.value=n,this.dep=new dn,this.vmCount=0,N(n,"__ob__",this),Array.isArray(n)?(H?function(n,e){n.__proto__=e}(n,wn):function(n,e,t){for(var r=0,o=t.length;r<o;r++){var i=t[r];N(n,i,e[i])}}(n,wn,Sn),this.observeArray(n)):this.walk(n)};function An(n,e){var t;if(l(n)&&!(n instanceof hn))return x(n,"__ob__")&&n.__ob__ instanceof Tn?t=n.__ob__:En&&!on()&&(Array.isArray(n)||p(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new Tn(n)),e&&t&&t.vmCount++,t}function In(n,e,t,r,o){var i=new dn,a=Object.getOwnPropertyDescriptor(n,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(t=n[e]);var l=!o&&An(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(n):t;return dn.target&&(i.depend(),l&&(l.dep.depend(),Array.isArray(e)&&Cn(e))),e},set:function(e){var r=s?s.call(n):t;e===r||e!=e&&r!=r||s&&!c||(c?c.call(n,e):t=e,l=!o&&An(e),i.notify())}})}}function jn(n,e,t){if(Array.isArray(n)&&m(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var r=n.__ob__;return n._isVue||r&&r.vmCount?t:r?(In(r.value,e,t),r.dep.notify(),t):(n[e]=t,t)}function Rn(n,e){if(Array.isArray(n)&&m(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||x(n,e)&&(delete n[e],t&&t.dep.notify())}}function Cn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Cn(e)}Tn.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)In(n,e[t])},Tn.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)An(n[e])};var zn=M.optionMergeStrategies;function On(n,e){if(!e)return n;for(var t,r,o,i=ln?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)"__ob__"!==(t=i[a])&&(r=n[t],o=e[t],x(n,t)?r!==o&&p(r)&&p(o)&&On(r,o):jn(n,t,o));return n}function Bn(n,e,t){return t?function(){var r="function"==typeof e?e.call(t,t):e,o="function"==typeof n?n.call(t,t):n;return r?On(r,o):o}:e?n?function(){return On("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Pn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Dn(n,e,t,r){var o=Object.create(n||null);return e?R(o,e):o}zn.data=function(n,e,t){return t?Bn(n,e,t):e&&"function"!=typeof e?n:Bn(n,e)},U.forEach((function(n){zn[n]=Pn})),L.forEach((function(n){zn[n+"s"]=Dn})),zn.watch=function(n,e,t,r){if(n===en&&(n=void 0),e===en&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var o={};for(var i in R(o,n),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},zn.props=zn.methods=zn.inject=zn.computed=function(n,e,t,r){if(!n)return e;var o=Object.create(null);return R(o,n),e&&R(o,e),o},zn.provide=Bn;var qn=function(n,e){return void 0===e?n:e};function Ln(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var r,o,i={};if(Array.isArray(t))for(r=t.length;r--;)"string"==typeof(o=t[r])&&(i[E(o)]={type:null});else if(p(t))for(var a in t)o=t[a],i[E(a)]=p(o)?o:{type:o};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(Array.isArray(t))for(var o=0;o<t.length;o++)r[t[o]]={from:t[o]};else if(p(t))for(var i in t){var a=t[i];r[i]=p(a)?R({from:i},a):{from:a}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];"function"==typeof r&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Ln(n,e.extends,t)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)n=Ln(n,e.mixins[r],t);var i,a={};for(i in n)s(i);for(i in e)x(n,i)||s(i);function s(r){var o=zn[r]||qn;a[r]=o(n[r],e[r],t,r)}return a}function Un(n,e,t,r){if("string"==typeof t){var o=n[e];if(x(o,t))return o[t];var i=E(t);if(x(o,i))return o[i];var a=_(i);return x(o,a)?o[a]:o[t]||o[i]||o[a]}}function Mn(n,e,t,r){var o=e[n],i=!x(t,n),a=t[n],s=Jn(Boolean,o.type);if(s>-1)if(i&&!x(o,"default"))a=!1;else if(""===a||a===A(n)){var c=Jn(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(n,e,t){if(!x(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof r&&"Function"!==Nn(e.type)?r.call(n):r}(r,o,n);var l=En;_n(!0),An(a),_n(l)}return a}var $n=/^\s*function (\w+)/;function Nn(n){var e=n&&n.toString().match($n);return e?e[1]:""}function Fn(n,e){return Nn(n)===Nn(e)}function Jn(n,e){if(!Array.isArray(e))return Fn(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Fn(e[t],n))return t;return-1}function Hn(n,e,t){gn();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,n,e,t))return}catch(n){Gn(n,r,"errorCaptured hook")}}Gn(n,e,t)}finally{fn()}}function Wn(n,e,t,r,o){var i;try{(i=t?n.apply(e,t):n.call(e))&&!i._isVue&&g(i)&&!i._handled&&(i.catch((function(n){return Hn(n,r,o+" (Promise/async)")})),i._handled=!0)}catch(n){Hn(n,r,o)}return i}function Gn(n,e,t){if(M.errorHandler)try{return M.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Vn(e,null,"config.errorHandler")}Vn(n,e,t)}function Vn(n,e,t){if(!W&&!G||"undefined"==typeof console)throw n;console.error(n)}var Qn,Kn=!1,Yn=[],Xn=!1;function Zn(){Xn=!1;var n=Yn.slice(0);Yn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&sn(Promise)){var ne=Promise.resolve();Qn=function(){ne.then(Zn),Z&&setTimeout(z)},Kn=!0}else if(K||"undefined"==typeof MutationObserver||!sn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Qn="undefined"!=typeof setImmediate&&sn(setImmediate)?function(){setImmediate(Zn)}:function(){setTimeout(Zn,0)};else{var ee=1,te=new MutationObserver(Zn),re=document.createTextNode(String(ee));te.observe(re,{characterData:!0}),Qn=function(){ee=(ee+1)%2,re.data=String(ee)},Kn=!0}function oe(n,e){var t;if(Yn.push((function(){if(n)try{n.call(e)}catch(n){Hn(n,e,"nextTick")}else t&&t(e)})),Xn||(Xn=!0,Qn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var ie=new cn;function ae(n){!function n(e,t){var r,o,i=Array.isArray(e);if(!i&&!l(e)||Object.isFrozen(e)||e instanceof hn)return;if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(i)for(r=e.length;r--;)n(e[r],t);else for(o=Object.keys(e),r=o.length;r--;)n(e[o[r]],t)}(n,ie),ie.clear()}var se=w((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function ce(n,e){function t(){var n=arguments,r=t.fns;if(!Array.isArray(r))return Wn(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)Wn(o[i],null,n,e,"v-on handler")}return t.fns=n,t}function le(n,e,t,r,o,a){var c,l,u,p;for(c in n)l=n[c],u=e[c],p=se(c),i(l)||(i(u)?(i(l.fns)&&(l=n[c]=ce(l,a)),s(p.once)&&(l=n[c]=o(p.name,l,p.capture)),t(p.name,l,p.capture,p.passive,p.params)):l!==u&&(u.fns=l,n[c]=u));for(c in e)i(n[c])&&r((p=se(c)).name,e[c],p.capture)}function ue(n,e,t){var r;n instanceof hn&&(n=n.data.hook||(n.data.hook={}));var o=n[e];function c(){t.apply(this,arguments),b(r.fns,c)}i(o)?r=ce([c]):a(o.fns)&&s(o.merged)?(r=o).fns.push(c):r=ce([o,c]),r.merged=!0,n[e]=r}function pe(n,e,t,r,o){if(a(e)){if(x(e,t))return n[t]=e[t],o||delete e[t],!0;if(x(e,r))return n[t]=e[r],o||delete e[r],!0}return!1}function de(n){return c(n)?[bn(n)]:Array.isArray(n)?function n(e,t){var r,o,l,u,p=[];for(r=0;r<e.length;r++)i(o=e[r])||"boolean"==typeof o||(l=p.length-1,u=p[l],Array.isArray(o)?o.length>0&&(me((o=n(o,(t||"")+"_"+r))[0])&&me(u)&&(p[l]=bn(u.text+o[0].text),o.shift()),p.push.apply(p,o)):c(o)?me(u)?p[l]=bn(u.text+o):""!==o&&p.push(bn(o)):me(o)&&me(u)?p[l]=bn(u.text+o.text):(s(e._isVList)&&a(o.tag)&&i(o.key)&&a(t)&&(o.key="__vlist"+t+"_"+r+"__"),p.push(o)));return p}(n):void 0}function me(n){return a(n)&&a(n.text)&&!1===n.isComment}function ge(n,e){if(n){for(var t=Object.create(null),r=ln?Reflect.ownKeys(n):Object.keys(n),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var a=n[i].from,s=e;s;){if(s._provided&&x(s._provided,a)){t[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in n[i]){var c=n[i].default;t[i]="function"==typeof c?c.call(e):c}else 0}}return t}}function fe(n,e){if(!n||!n.length)return{};for(var t={},r=0,o=n.length;r<o;r++){var i=n[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(t.default||(t.default=[])).push(i);else{var s=a.slot,c=t[s]||(t[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var l in t)t[l].every(he)&&delete t[l];return t}function he(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ye(n){return n.isComment&&n.asyncFactory}function ve(n,e,t){var r,i=Object.keys(e).length>0,a=n?!!n.$stable:!i,s=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(a&&t&&t!==o&&s===t.$key&&!i&&!t.$hasNormal)return t;for(var c in r={},n)n[c]&&"$"!==c[0]&&(r[c]=be(e,c,n[c]))}else r={};for(var l in e)l in r||(r[l]=ke(e,l));return n&&Object.isExtensible(n)&&(n._normalized=r),N(r,"$stable",a),N(r,"$key",s),N(r,"$hasNormal",i),r}function be(n,e,t){var r=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:de(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!ye(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:r,enumerable:!0,configurable:!0}),r}function ke(n,e){return function(){return n[e]}}function xe(n,e){var t,r,o,i,s;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),r=0,o=n.length;r<o;r++)t[r]=e(n[r],r);else if("number"==typeof n)for(t=new Array(n),r=0;r<n;r++)t[r]=e(r+1,r);else if(l(n))if(ln&&n[Symbol.iterator]){t=[];for(var c=n[Symbol.iterator](),u=c.next();!u.done;)t.push(e(u.value,t.length)),u=c.next()}else for(i=Object.keys(n),t=new Array(i.length),r=0,o=i.length;r<o;r++)s=i[r],t[r]=e(n[s],s,r);return a(t)||(t=[]),t._isVList=!0,t}function we(n,e,t,r){var o,i=this.$scopedSlots[n];i?(t=t||{},r&&(t=R(R({},r),t)),o=i(t)||("function"==typeof e?e():e)):o=this.$slots[n]||("function"==typeof e?e():e);var a=t&&t.slot;return a?this.$createElement("template",{slot:a},o):o}function Se(n){return Un(this.$options,"filters",n)||B}function Ee(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function _e(n,e,t,r,o){var i=M.keyCodes[e]||t;return o&&r&&!M.keyCodes[e]?Ee(o,r):i?Ee(i,n):r?A(r)!==e:void 0===n}function Te(n,e,t,r,o){if(t)if(l(t)){var i;Array.isArray(t)&&(t=C(t));var a=function(a){if("class"===a||"style"===a||v(a))i=n;else{var s=n.attrs&&n.attrs.type;i=r||M.mustUseProp(e,s,a)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var c=E(a),l=A(a);c in i||l in i||(i[a]=t[a],o&&((n.on||(n.on={}))["update:"+a]=function(n){t[a]=n}))};for(var s in t)a(s)}else;return n}function Ae(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||je(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function Ie(n,e,t){return je(n,"__once__"+e+(t?"_"+t:""),!0),n}function je(n,e,t){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&Re(n[r],e+"_"+r,t);else Re(n,e,t)}function Re(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function Ce(n,e){if(e)if(p(e)){var t=n.on=n.on?R({},n.on):{};for(var r in e){var o=t[r],i=e[r];t[r]=o?[].concat(o,i):i}}else;return n}function ze(n,e,t,r){e=e||{$stable:!t};for(var o=0;o<n.length;o++){var i=n[o];Array.isArray(i)?ze(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Oe(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function Be(n,e){return"string"==typeof n?e+n:n}function Pe(n){n._o=Ie,n._n=h,n._s=f,n._l=xe,n._t=we,n._q=P,n._i=D,n._m=Ae,n._f=Se,n._k=_e,n._b=Te,n._v=bn,n._e=vn,n._u=ze,n._g=Ce,n._d=Oe,n._p=Be}function De(n,e,t,r,i){var a,c=this,l=i.options;x(r,"_uid")?(a=Object.create(r))._original=r:(a=r,r=r._original);var u=s(l._compiled),p=!u;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||o,this.injections=ge(l.inject,r),this.slots=function(){return c.$slots||ve(n.scopedSlots,c.$slots=fe(t,r)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ve(n.scopedSlots,this.slots())}}),u&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=ve(n.scopedSlots,this.$slots)),l._scopeId?this._c=function(n,e,t,o){var i=Fe(a,n,e,t,o,p);return i&&!Array.isArray(i)&&(i.fnScopeId=l._scopeId,i.fnContext=r),i}:this._c=function(n,e,t,r){return Fe(a,n,e,t,r,p)}}function qe(n,e,t,r,o){var i=kn(n);return i.fnContext=t,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function Le(n,e){for(var t in e)n[E(t)]=e[t]}Pe(De.prototype);var Ue={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;Ue.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;a(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Xe)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,i){0;var a=r.data.scopedSlots,s=n.$scopedSlots,c=!!(a&&!a.$stable||s!==o&&!s.$stable||a&&n.$scopedSlots.$key!==a.$key||!a&&n.$scopedSlots.$key),l=!!(i||n.$options._renderChildren||c);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=i,n.$attrs=r.data.attrs||o,n.$listeners=t||o,e&&n.$options.props){_n(!1);for(var u=n._props,p=n.$options._propKeys||[],d=0;d<p.length;d++){var m=p[d],g=n.$options.props;u[m]=Mn(m,g,e,n)}_n(!0),n.$options.propsData=e}t=t||o;var f=n.$options._parentListeners;n.$options._parentListeners=t,Ye(n,t,f),l&&(n.$slots=fe(i,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,tt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,ot.push(e)):et(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,nt(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);tt(e,"deactivated")}}(e,!0):e.$destroy())}},Me=Object.keys(Ue);function $e(n,e,t,r,c){if(!i(n)){var u=t.$options._base;if(l(n)&&(n=u.extend(n)),"function"==typeof n){var p;if(i(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&a(n.errorComp))return n.errorComp;if(a(n.resolved))return n.resolved;var t=He;t&&a(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(s(n.loading)&&a(n.loadingComp))return n.loadingComp;if(t&&!a(n.owners)){var r=n.owners=[t],o=!0,c=null,u=null;t.$on("hook:destroyed",(function(){return b(r,t)}));var p=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==u&&(clearTimeout(u),u=null))},d=q((function(t){n.resolved=We(t,e),o?r.length=0:p(!0)})),m=q((function(e){a(n.errorComp)&&(n.error=!0,p(!0))})),f=n(d,m);return l(f)&&(g(f)?i(n.resolved)&&f.then(d,m):g(f.component)&&(f.component.then(d,m),a(f.error)&&(n.errorComp=We(f.error,e)),a(f.loading)&&(n.loadingComp=We(f.loading,e),0===f.delay?n.loading=!0:c=setTimeout((function(){c=null,i(n.resolved)&&i(n.error)&&(n.loading=!0,p(!1))}),f.delay||200)),a(f.timeout)&&(u=setTimeout((function(){u=null,i(n.resolved)&&m(null)}),f.timeout)))),o=!1,n.loading?n.loadingComp:n.resolved}}(p=n,u)))return function(n,e,t,r,o){var i=vn();return i.asyncFactory=n,i.asyncMeta={data:e,context:t,children:r,tag:o},i}(p,e,t,r,c);e=e||{},Et(n),a(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var o=e.on||(e.on={}),i=o[r],s=e.model.callback;a(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(o[r]=[s].concat(i)):o[r]=s}(n.options,e);var d=function(n,e,t){var r=e.options.props;if(!i(r)){var o={},s=n.attrs,c=n.props;if(a(s)||a(c))for(var l in r){var u=A(l);pe(o,c,l,u,!0)||pe(o,s,l,u,!1)}return o}}(e,n);if(s(n.options.functional))return function(n,e,t,r,i){var s=n.options,c={},l=s.props;if(a(l))for(var u in l)c[u]=Mn(u,l,e||o);else a(t.attrs)&&Le(c,t.attrs),a(t.props)&&Le(c,t.props);var p=new De(t,c,i,r,n),d=s.render.call(null,p._c,p);if(d instanceof hn)return qe(d,t,p.parent,s,p);if(Array.isArray(d)){for(var m=de(d)||[],g=new Array(m.length),f=0;f<m.length;f++)g[f]=qe(m[f],t,p.parent,s,p);return g}}(n,d,e,t,r);var m=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var f=e.slot;e={},f&&(e.slot=f)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<Me.length;t++){var r=Me[t],o=e[r],i=Ue[r];o===i||o&&o._merged||(e[r]=o?Ne(i,o):i)}}(e);var h=n.options.name||c;return new hn("vue-component-"+n.cid+(h?"-"+h:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:d,listeners:m,tag:c,children:r},p)}}}function Ne(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}function Fe(n,e,t,r,o,u){return(Array.isArray(t)||c(t))&&(o=r,r=t,t=void 0),s(u)&&(o=2),function(n,e,t,r,o){if(a(t)&&a(t.__ob__))return vn();a(t)&&a(t.is)&&(e=t.is);if(!e)return vn();0;Array.isArray(r)&&"function"==typeof r[0]&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===o?r=de(r):1===o&&(r=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var c,u;if("string"==typeof e){var p;u=n.$vnode&&n.$vnode.ns||M.getTagNamespace(e),c=M.isReservedTag(e)?new hn(M.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!a(p=Un(n.$options,"components",e))?new hn(e,t,r,void 0,void 0,n):$e(p,t,n,r,e)}else c=$e(e,t,n,r);return Array.isArray(c)?c:a(c)?(a(u)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(a(e.children))for(var o=0,c=e.children.length;o<c;o++){var l=e.children[o];a(l.tag)&&(i(l.ns)||s(r)&&"svg"!==l.tag)&&n(l,t,r)}}(c,u),a(t)&&function(n){l(n.style)&&ae(n.style);l(n.class)&&ae(n.class)}(t),c):vn()}(n,e,t,r,o)}var Je,He=null;function We(n,e){return(n.__esModule||ln&&"Module"===n[Symbol.toStringTag])&&(n=n.default),l(n)?e.extend(n):n}function Ge(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(a(t)&&(a(t.componentOptions)||ye(t)))return t}}function Ve(n,e){Je.$on(n,e)}function Qe(n,e){Je.$off(n,e)}function Ke(n,e){var t=Je;return function r(){var o=e.apply(null,arguments);null!==o&&t.$off(n,r)}}function Ye(n,e,t){Je=n,le(e,t||{},Ve,Qe,Ke,n),Je=void 0}var Xe=null;function Ze(n){var e=Xe;return Xe=n,function(){Xe=e}}function nt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function et(n,e){if(e){if(n._directInactive=!1,nt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)et(n.$children[t]);tt(n,"activated")}}function tt(n,e){gn();var t=n.$options[e],r=e+" hook";if(t)for(var o=0,i=t.length;o<i;o++)Wn(t[o],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+e),fn()}var rt=[],ot=[],it={},at=!1,st=!1,ct=0;var lt=0,ut=Date.now;if(W&&!K){var pt=window.performance;pt&&"function"==typeof pt.now&&ut()>document.createEvent("Event").timeStamp&&(ut=function(){return pt.now()})}function dt(){var n,e;for(lt=ut(),st=!0,rt.sort((function(n,e){return n.id-e.id})),ct=0;ct<rt.length;ct++)(n=rt[ct]).before&&n.before(),e=n.id,it[e]=null,n.run();var t=ot.slice(),r=rt.slice();ct=rt.length=ot.length=0,it={},at=st=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,et(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r._watcher===t&&r._isMounted&&!r._isDestroyed&&tt(r,"updated")}}(r),an&&M.devtools&&an.emit("flush")}var mt=0,gt=function(n,e,t,r,o){this.vm=n,o&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++mt,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!F.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=z)),this.value=this.lazy?void 0:this.get()};gt.prototype.get=function(){var n;gn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Hn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ae(n),fn(),this.cleanupDeps()}return n},gt.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},gt.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},gt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==it[e]){if(it[e]=!0,st){for(var t=rt.length-1;t>ct&&rt[t].id>n.id;)t--;rt.splice(t+1,0,n)}else rt.push(n);at||(at=!0,oe(dt))}}(this)},gt.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||l(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';Wn(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},gt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},gt.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},gt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var ft={enumerable:!0,configurable:!0,get:z,set:z};function ht(n,e,t){ft.get=function(){return this[e][t]},ft.set=function(n){this[e][t]=n},Object.defineProperty(n,t,ft)}function yt(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props={},o=n.$options._propKeys=[];n.$parent&&_n(!1);var i=function(i){o.push(i);var a=Mn(i,e,t,n);In(r,i,a),i in n||ht(n,"_props",i)};for(var a in e)i(a);_n(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?z:I(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;p(e=n._data="function"==typeof e?function(n,e){gn();try{return n.call(e,e)}catch(n){return Hn(n,e,"data()"),{}}finally{fn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,o=(n.$options.methods,t.length);for(;o--;){var i=t[o];0,r&&x(r,i)||(a=void 0,36!==(a=(i+"").charCodeAt(0))&&95!==a&&ht(n,"_data",i))}var a;An(e,!0)}(n):An(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=on();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;0,r||(t[o]=new gt(n,a||z,z,vt)),o in n||bt(n,o,i)}}(n,e.computed),e.watch&&e.watch!==en&&function(n,e){for(var t in e){var r=e[t];if(Array.isArray(r))for(var o=0;o<r.length;o++)wt(n,t,r[o]);else wt(n,t,r)}}(n,e.watch)}var vt={lazy:!0};function bt(n,e,t){var r=!on();"function"==typeof t?(ft.get=r?kt(e):xt(t),ft.set=z):(ft.get=t.get?r&&!1!==t.cache?kt(e):xt(t.get):z,ft.set=t.set||z),Object.defineProperty(n,e,ft)}function kt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),dn.target&&e.depend(),e.value}}function xt(n){return function(){return n.call(this,this)}}function wt(n,e,t,r){return p(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var St=0;function Et(n){var e=n.options;if(n.super){var t=Et(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var o in t)t[o]!==r[o]&&(e||(e={}),e[o]=t[o]);return e}(n);r&&R(n.extendOptions,r),(e=n.options=Ln(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function _t(n){this._init(n)}function Tt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,o=n._Ctor||(n._Ctor={});if(o[r])return o[r];var i=n.name||t.options.name;var a=function(n){this._init(n)};return(a.prototype=Object.create(t.prototype)).constructor=a,a.cid=e++,a.options=Ln(t.options,n),a.super=t,a.options.props&&function(n){var e=n.options.props;for(var t in e)ht(n.prototype,"_props",t)}(a),a.options.computed&&function(n){var e=n.options.computed;for(var t in e)bt(n.prototype,t,e[t])}(a),a.extend=t.extend,a.mixin=t.mixin,a.use=t.use,L.forEach((function(n){a[n]=t[n]})),i&&(a.options.components[i]=a),a.superOptions=t.options,a.extendOptions=n,a.sealedOptions=R({},a.options),o[r]=a,a}}function At(n){return n&&(n.Ctor.options.name||n.tag)}function It(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!d(n)&&n.test(e)}function jt(n,e){var t=n.cache,r=n.keys,o=n._vnode;for(var i in t){var a=t[i];if(a){var s=a.name;s&&!e(s)&&Rt(t,i,r,o)}}}function Rt(n,e,t,r){var o=n[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),n[e]=null,b(t,e)}_t.prototype._init=function(n){var e=this;e._uid=St++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var o=r.componentOptions;t.propsData=o.propsData,t._parentListeners=o.listeners,t._renderChildren=o.children,t._componentTag=o.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Ln(Et(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Ye(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=fe(e._renderChildren,r),n.$scopedSlots=o,n._c=function(e,t,r,o){return Fe(n,e,t,r,o,!1)},n.$createElement=function(e,t,r,o){return Fe(n,e,t,r,o,!0)};var i=t&&t.data;In(n,"$attrs",i&&i.attrs||o,null,!0),In(n,"$listeners",e._parentListeners||o,null,!0)}(e),tt(e,"beforeCreate"),function(n){var e=ge(n.$options.inject,n);e&&(_n(!1),Object.keys(e).forEach((function(t){In(n,t,e[t])})),_n(!0))}(e),yt(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),tt(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=jn,n.prototype.$delete=Rn,n.prototype.$watch=function(n,e,t){if(p(e))return wt(this,n,e,t);(t=t||{}).user=!0;var r=new gt(this,n,e,t);if(t.immediate){var o='callback for immediate watcher "'+r.expression+'"';gn(),Wn(e,this,[r.value],this,o),fn()}return function(){r.teardown()}}}(_t),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)r.$on(n[o],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var r=0,o=n.length;r<o;r++)t.$off(n[r],e);return t}var i,a=t._events[n];if(!a)return t;if(!e)return t._events[n]=null,t;for(var s=a.length;s--;)if((i=a[s])===e||i.fn===e){a.splice(s,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?j(t):t;for(var r=j(arguments,1),o='event handler for "'+n+'"',i=0,a=t.length;i<a;i++)Wn(t[i],e,r,e,o)}return e}}(_t),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,o=t._vnode,i=Ze(t);t._vnode=n,t.$el=o?t.__patch__(o,n):t.__patch__(t.$el,n,e,!1),i(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){tt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||b(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),tt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(_t),function(n){Pe(n.prototype),n.prototype.$nextTick=function(n){return oe(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,o=t._parentVnode;o&&(e.$scopedSlots=ve(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{He=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Hn(t,e,"render"),n=e._vnode}finally{He=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof hn||(n=vn()),n.parent=o,n}}(_t);var Ct=[String,RegExp,Array],zt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Ct,exclude:Ct,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var o=t.tag,i=t.componentInstance,a=t.componentOptions;n[r]={name:At(a),tag:o,componentInstance:i},e.push(r),this.max&&e.length>parseInt(this.max)&&Rt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Rt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){jt(n,(function(n){return It(e,n)}))})),this.$watch("exclude",(function(e){jt(n,(function(n){return!It(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Ge(n),t=e&&e.componentOptions;if(t){var r=At(t),o=this.include,i=this.exclude;if(o&&(!r||!It(o,r))||i&&r&&It(i,r))return e;var a=this.cache,s=this.keys,c=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,b(s,c),s.push(c)):(this.vnodeToCache=e,this.keyToCache=c),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return M}};Object.defineProperty(n,"config",e),n.util={warn:un,extend:R,mergeOptions:Ln,defineReactive:In},n.set=jn,n.delete=Rn,n.nextTick=oe,n.observable=function(n){return An(n),n},n.options=Object.create(null),L.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,R(n.options.components,zt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=j(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Ln(this.options,n),this}}(n),Tt(n),function(n){L.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&p(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(_t),Object.defineProperty(_t.prototype,"$isServer",{get:on}),Object.defineProperty(_t.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(_t,"FunctionalRenderContext",{value:De}),_t.version="2.6.14";var Ot=y("style,class"),Bt=y("input,textarea,option,select,progress"),Pt=y("contenteditable,draggable,spellcheck"),Dt=y("events,caret,typing,plaintext-only"),qt=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Lt="http://www.w3.org/1999/xlink",Ut=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},Mt=function(n){return Ut(n)?n.slice(6,n.length):""},$t=function(n){return null==n||!1===n};function Nt(n){for(var e=n.data,t=n,r=n;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Ft(r.data,e));for(;a(t=t.parent);)t&&t.data&&(e=Ft(e,t.data));return function(n,e){if(a(n)||a(e))return Jt(n,Ht(e));return""}(e.staticClass,e.class)}function Ft(n,e){return{staticClass:Jt(n.staticClass,e.staticClass),class:a(n.class)?[n.class,e.class]:e.class}}function Jt(n,e){return n?e?n+" "+e:n:e||""}function Ht(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,o=n.length;r<o;r++)a(e=Ht(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):l(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Wt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Gt=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Vt=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Qt=function(n){return Gt(n)||Vt(n)};var Kt=Object.create(null);var Yt=y("text,number,password,search,email,tel,url");var Xt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(Wt[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),Zt={create:function(n,e){nr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(nr(n,!0),nr(e))},destroy:function(n){nr(n,!0)}};function nr(n,e){var t=n.data.ref;if(a(t)){var r=n.context,o=n.componentInstance||n.elm,i=r.$refs;e?Array.isArray(i[t])?b(i[t],o):i[t]===o&&(i[t]=void 0):n.data.refInFor?Array.isArray(i[t])?i[t].indexOf(o)<0&&i[t].push(o):i[t]=[o]:i[t]=o}}var er=new hn("",{},[]),tr=["create","activate","update","remove","destroy"];function rr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&a(n.data)===a(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=a(t=n.data)&&a(t=t.attrs)&&t.type,o=a(t=e.data)&&a(t=t.attrs)&&t.type;return r===o||Yt(r)&&Yt(o)}(n,e)||s(n.isAsyncPlaceholder)&&i(e.asyncFactory.error))}function or(n,e,t){var r,o,i={};for(r=e;r<=t;++r)a(o=n[r].key)&&(i[o]=r);return i}var ir={create:ar,update:ar,destroy:function(n){ar(n,er)}};function ar(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,o,i=n===er,a=e===er,s=cr(n.data.directives,n.context),c=cr(e.data.directives,e.context),l=[],u=[];for(t in c)r=s[t],o=c[t],r?(o.oldValue=r.value,o.oldArg=r.arg,ur(o,"update",e,n),o.def&&o.def.componentUpdated&&u.push(o)):(ur(o,"bind",e,n),o.def&&o.def.inserted&&l.push(o));if(l.length){var p=function(){for(var t=0;t<l.length;t++)ur(l[t],"inserted",e,n)};i?ue(e,"insert",p):p()}u.length&&ue(e,"postpatch",(function(){for(var t=0;t<u.length;t++)ur(u[t],"componentUpdated",e,n)}));if(!i)for(t in s)c[t]||ur(s[t],"unbind",n,n,a)}(n,e)}var sr=Object.create(null);function cr(n,e){var t,r,o=Object.create(null);if(!n)return o;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=sr),o[lr(r)]=r,r.def=Un(e.$options,"directives",r.name);return o}function lr(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function ur(n,e,t,r,o){var i=n.def&&n.def[e];if(i)try{i(t.elm,n,t,r,o)}catch(r){Hn(r,t.context,"directive "+n.name+" "+e+" hook")}}var pr=[Zt,ir];function dr(n,e){var t=e.componentOptions;if(!(a(t)&&!1===t.Ctor.options.inheritAttrs||i(n.data.attrs)&&i(e.data.attrs))){var r,o,s=e.elm,c=n.data.attrs||{},l=e.data.attrs||{};for(r in a(l.__ob__)&&(l=e.data.attrs=R({},l)),l)o=l[r],c[r]!==o&&mr(s,r,o,e.data.pre);for(r in(K||X)&&l.value!==c.value&&mr(s,"value",l.value),c)i(l[r])&&(Ut(r)?s.removeAttributeNS(Lt,Mt(r)):Pt(r)||s.removeAttribute(r))}}function mr(n,e,t,r){r||n.tagName.indexOf("-")>-1?gr(n,e,t):qt(e)?$t(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Pt(e)?n.setAttribute(e,function(n,e){return $t(e)||"false"===e?"false":"contenteditable"===n&&Dt(e)?e:"true"}(e,t)):Ut(e)?$t(t)?n.removeAttributeNS(Lt,Mt(e)):n.setAttributeNS(Lt,e,t):gr(n,e,t)}function gr(n,e,t){if($t(t))n.removeAttribute(e);else{if(K&&!Y&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var fr={create:dr,update:dr};function hr(n,e){var t=e.elm,r=e.data,o=n.data;if(!(i(r.staticClass)&&i(r.class)&&(i(o)||i(o.staticClass)&&i(o.class)))){var s=Nt(e),c=t._transitionClasses;a(c)&&(s=Jt(s,Ht(c))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var yr,vr={create:hr,update:hr};function br(n,e,t){var r=yr;return function o(){var i=e.apply(null,arguments);null!==i&&wr(n,o,t,r)}}var kr=Kn&&!(nn&&Number(nn[1])<=53);function xr(n,e,t,r){if(kr){var o=lt,i=e;e=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=o||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}yr.addEventListener(n,e,tn?{capture:t,passive:r}:t)}function wr(n,e,t,r){(r||yr).removeEventListener(n,e._wrapper||e,t)}function Sr(n,e){if(!i(n.data.on)||!i(e.data.on)){var t=e.data.on||{},r=n.data.on||{};yr=e.elm,function(n){if(a(n.__r)){var e=K?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}a(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),le(t,r,xr,wr,br,e.context),yr=void 0}}var Er,_r={create:Sr,update:Sr};function Tr(n,e){if(!i(n.data.domProps)||!i(e.data.domProps)){var t,r,o=e.elm,s=n.data.domProps||{},c=e.data.domProps||{};for(t in a(c.__ob__)&&(c=e.data.domProps=R({},c)),s)t in c||(o[t]="");for(t in c){if(r=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===s[t])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===t&&"PROGRESS"!==o.tagName){o._value=r;var l=i(r)?"":String(r);Ar(o,l)&&(o.value=l)}else if("innerHTML"===t&&Vt(o.tagName)&&i(o.innerHTML)){(Er=Er||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=Er.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;u.firstChild;)o.appendChild(u.firstChild)}else if(r!==s[t])try{o[t]=r}catch(n){}}}}function Ar(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(a(r)){if(r.number)return h(t)!==h(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Ir={create:Tr,update:Tr},jr=w((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Rr(n){var e=Cr(n.style);return n.staticStyle?R(n.staticStyle,e):e}function Cr(n){return Array.isArray(n)?C(n):"string"==typeof n?jr(n):n}var zr,Or=/^--/,Br=/\s*!important$/,Pr=function(n,e,t){if(Or.test(e))n.style.setProperty(e,t);else if(Br.test(t))n.style.setProperty(A(e),t.replace(Br,""),"important");else{var r=qr(e);if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)n.style[r]=t[o];else n.style[r]=t}},Dr=["Webkit","Moz","ms"],qr=w((function(n){if(zr=zr||document.createElement("div").style,"filter"!==(n=E(n))&&n in zr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<Dr.length;t++){var r=Dr[t]+e;if(r in zr)return r}}));function Lr(n,e){var t=e.data,r=n.data;if(!(i(t.staticStyle)&&i(t.style)&&i(r.staticStyle)&&i(r.style))){var o,s,c=e.elm,l=r.staticStyle,u=r.normalizedStyle||r.style||{},p=l||u,d=Cr(e.data.style)||{};e.data.normalizedStyle=a(d.__ob__)?R({},d):d;var m=function(n,e){var t,r={};if(e)for(var o=n;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(t=Rr(o.data))&&R(r,t);(t=Rr(n.data))&&R(r,t);for(var i=n;i=i.parent;)i.data&&(t=Rr(i.data))&&R(r,t);return r}(e,!0);for(s in p)i(m[s])&&Pr(c,s,"");for(s in m)(o=m[s])!==p[s]&&Pr(c,s,null==o?"":o)}}var Ur={create:Lr,update:Lr},Mr=/\s+/;function $r(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Mr).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Nr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Mr).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Fr(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&R(e,Jr(n.name||"v")),R(e,n),e}return"string"==typeof n?Jr(n):void 0}}var Jr=w((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),Hr=W&&!Y,Wr="transition",Gr="transitionend",Vr="animation",Qr="animationend";Hr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Wr="WebkitTransition",Gr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Vr="WebkitAnimation",Qr="webkitAnimationEnd"));var Kr=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Yr(n){Kr((function(){Kr(n)}))}function Xr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),$r(n,e))}function Zr(n,e){n._transitionClasses&&b(n._transitionClasses,e),Nr(n,e)}function no(n,e,t){var r=to(n,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return t();var s="transition"===o?Gr:Qr,c=0,l=function(){n.removeEventListener(s,u),t()},u=function(e){e.target===n&&++c>=a&&l()};setTimeout((function(){c<a&&l()}),i+1),n.addEventListener(s,u)}var eo=/\b(transform|all)(,|$)/;function to(n,e){var t,r=window.getComputedStyle(n),o=(r[Wr+"Delay"]||"").split(", "),i=(r[Wr+"Duration"]||"").split(", "),a=ro(o,i),s=(r[Vr+"Delay"]||"").split(", "),c=(r[Vr+"Duration"]||"").split(", "),l=ro(s,c),u=0,p=0;return"transition"===e?a>0&&(t="transition",u=a,p=i.length):"animation"===e?l>0&&(t="animation",u=l,p=c.length):p=(t=(u=Math.max(a,l))>0?a>l?"transition":"animation":null)?"transition"===t?i.length:c.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&eo.test(r[Wr+"Property"])}}function ro(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return oo(e)+oo(n[t])})))}function oo(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function io(n,e){var t=n.elm;a(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=Fr(n.data.transition);if(!i(r)&&!a(t._enterCb)&&1===t.nodeType){for(var o=r.css,s=r.type,c=r.enterClass,u=r.enterToClass,p=r.enterActiveClass,d=r.appearClass,m=r.appearToClass,g=r.appearActiveClass,f=r.beforeEnter,y=r.enter,v=r.afterEnter,b=r.enterCancelled,k=r.beforeAppear,x=r.appear,w=r.afterAppear,S=r.appearCancelled,E=r.duration,_=Xe,T=Xe.$vnode;T&&T.parent;)_=T.context,T=T.parent;var A=!_._isMounted||!n.isRootInsert;if(!A||x||""===x){var I=A&&d?d:c,j=A&&g?g:p,R=A&&m?m:u,C=A&&k||f,z=A&&"function"==typeof x?x:y,O=A&&w||v,B=A&&S||b,P=h(l(E)?E.enter:E);0;var D=!1!==o&&!Y,L=co(z),U=t._enterCb=q((function(){D&&(Zr(t,R),Zr(t,j)),U.cancelled?(D&&Zr(t,I),B&&B(t)):O&&O(t),t._enterCb=null}));n.data.show||ue(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),z&&z(t,U)})),C&&C(t),D&&(Xr(t,I),Xr(t,j),Yr((function(){Zr(t,I),U.cancelled||(Xr(t,R),L||(so(P)?setTimeout(U,P):no(t,s,U)))}))),n.data.show&&(e&&e(),z&&z(t,U)),D||L||U()}}}function ao(n,e){var t=n.elm;a(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=Fr(n.data.transition);if(i(r)||1!==t.nodeType)return e();if(!a(t._leaveCb)){var o=r.css,s=r.type,c=r.leaveClass,u=r.leaveToClass,p=r.leaveActiveClass,d=r.beforeLeave,m=r.leave,g=r.afterLeave,f=r.leaveCancelled,y=r.delayLeave,v=r.duration,b=!1!==o&&!Y,k=co(m),x=h(l(v)?v.leave:v);0;var w=t._leaveCb=q((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),b&&(Zr(t,u),Zr(t,p)),w.cancelled?(b&&Zr(t,c),f&&f(t)):(e(),g&&g(t)),t._leaveCb=null}));y?y(S):S()}function S(){w.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),b&&(Xr(t,c),Xr(t,p),Yr((function(){Zr(t,c),w.cancelled||(Xr(t,u),k||(so(x)?setTimeout(w,x):no(t,s,w)))}))),m&&m(t,w),b||k||w())}}function so(n){return"number"==typeof n&&!isNaN(n)}function co(n){if(i(n))return!1;var e=n.fns;return a(e)?co(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function lo(n,e){!0!==e.data.show&&io(e)}var uo=function(n){var e,t,r={},o=n.modules,l=n.nodeOps;for(e=0;e<tr.length;++e)for(r[tr[e]]=[],t=0;t<o.length;++t)a(o[t][tr[e]])&&r[tr[e]].push(o[t][tr[e]]);function u(n){var e=l.parentNode(n);a(e)&&l.removeChild(e,n)}function p(n,e,t,o,i,c,u){if(a(n.elm)&&a(c)&&(n=c[u]=kn(n)),n.isRootInsert=!i,!function(n,e,t,o){var i=n.data;if(a(i)){var c=a(n.componentInstance)&&i.keepAlive;if(a(i=i.hook)&&a(i=i.init)&&i(n,!1),a(n.componentInstance))return d(n,e),m(t,n.elm,o),s(c)&&function(n,e,t,o){var i,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,a(i=s.data)&&a(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](er,s);e.push(s);break}m(t,n.elm,o)}(n,e,t,o),!0}}(n,e,t,o)){var p=n.data,f=n.children,y=n.tag;a(y)?(n.elm=n.ns?l.createElementNS(n.ns,y):l.createElement(y,n),v(n),g(n,f,e),a(p)&&h(n,e),m(t,n.elm,o)):s(n.isComment)?(n.elm=l.createComment(n.text),m(t,n.elm,o)):(n.elm=l.createTextNode(n.text),m(t,n.elm,o))}}function d(n,e){a(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,f(n)?(h(n,e),v(n)):(nr(n),e.push(n))}function m(n,e,t){a(n)&&(a(t)?l.parentNode(t)===n&&l.insertBefore(n,e,t):l.appendChild(n,e))}function g(n,e,t){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)p(e[r],t,n.elm,null,!0,e,r)}else c(n.text)&&l.appendChild(n.elm,l.createTextNode(String(n.text)))}function f(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return a(n.tag)}function h(n,t){for(var o=0;o<r.create.length;++o)r.create[o](er,n);a(e=n.data.hook)&&(a(e.create)&&e.create(er,n),a(e.insert)&&t.push(n))}function v(n){var e;if(a(e=n.fnScopeId))l.setStyleScope(n.elm,e);else for(var t=n;t;)a(e=t.context)&&a(e=e.$options._scopeId)&&l.setStyleScope(n.elm,e),t=t.parent;a(e=Xe)&&e!==n.context&&e!==n.fnContext&&a(e=e.$options._scopeId)&&l.setStyleScope(n.elm,e)}function b(n,e,t,r,o,i){for(;r<=o;++r)p(t[r],i,n,e,!1,t,r)}function k(n){var e,t,o=n.data;if(a(o))for(a(e=o.hook)&&a(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(a(e=n.children))for(t=0;t<n.children.length;++t)k(n.children[t])}function x(n,e,t){for(;e<=t;++e){var r=n[e];a(r)&&(a(r.tag)?(w(r),k(r)):u(r.elm))}}function w(n,e){if(a(e)||a(n.data)){var t,o=r.remove.length+1;for(a(e)?e.listeners+=o:e=function(n,e){function t(){0==--t.listeners&&u(n)}return t.listeners=e,t}(n.elm,o),a(t=n.componentInstance)&&a(t=t._vnode)&&a(t.data)&&w(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);a(t=n.data.hook)&&a(t=t.remove)?t(n,e):e()}else u(n.elm)}function S(n,e,t,r){for(var o=t;o<r;o++){var i=e[o];if(a(i)&&rr(n,i))return o}}function E(n,e,t,o,c,u){if(n!==e){a(e.elm)&&a(o)&&(e=o[c]=kn(e));var d=e.elm=n.elm;if(s(n.isAsyncPlaceholder))a(e.asyncFactory.resolved)?A(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var m,g=e.data;a(g)&&a(m=g.hook)&&a(m=m.prepatch)&&m(n,e);var h=n.children,y=e.children;if(a(g)&&f(e)){for(m=0;m<r.update.length;++m)r.update[m](n,e);a(m=g.hook)&&a(m=m.update)&&m(n,e)}i(e.text)?a(h)&&a(y)?h!==y&&function(n,e,t,r,o){var s,c,u,d=0,m=0,g=e.length-1,f=e[0],h=e[g],y=t.length-1,v=t[0],k=t[y],w=!o;for(0;d<=g&&m<=y;)i(f)?f=e[++d]:i(h)?h=e[--g]:rr(f,v)?(E(f,v,r,t,m),f=e[++d],v=t[++m]):rr(h,k)?(E(h,k,r,t,y),h=e[--g],k=t[--y]):rr(f,k)?(E(f,k,r,t,y),w&&l.insertBefore(n,f.elm,l.nextSibling(h.elm)),f=e[++d],k=t[--y]):rr(h,v)?(E(h,v,r,t,m),w&&l.insertBefore(n,h.elm,f.elm),h=e[--g],v=t[++m]):(i(s)&&(s=or(e,d,g)),i(c=a(v.key)?s[v.key]:S(v,e,d,g))?p(v,r,n,f.elm,!1,t,m):rr(u=e[c],v)?(E(u,v,r,t,m),e[c]=void 0,w&&l.insertBefore(n,u.elm,f.elm)):p(v,r,n,f.elm,!1,t,m),v=t[++m]);d>g?b(n,i(t[y+1])?null:t[y+1].elm,t,m,y,r):m>y&&x(e,d,g)}(d,h,y,t,u):a(y)?(a(n.text)&&l.setTextContent(d,""),b(d,null,y,0,y.length-1,t)):a(h)?x(h,0,h.length-1):a(n.text)&&l.setTextContent(d,""):n.text!==e.text&&l.setTextContent(d,e.text),a(g)&&a(m=g.hook)&&a(m=m.postpatch)&&m(n,e)}}}function _(n,e,t){if(s(t)&&a(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=y("attrs,class,staticClass,staticStyle,key");function A(n,e,t,r){var o,i=e.tag,c=e.data,l=e.children;if(r=r||c&&c.pre,e.elm=n,s(e.isComment)&&a(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(a(c)&&(a(o=c.hook)&&a(o=o.init)&&o(e,!0),a(o=e.componentInstance)))return d(e,t),!0;if(a(i)){if(a(l))if(n.hasChildNodes())if(a(o=c)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==n.innerHTML)return!1}else{for(var u=!0,p=n.firstChild,m=0;m<l.length;m++){if(!p||!A(p,l[m],t,r)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else g(e,l,t);if(a(c)){var f=!1;for(var y in c)if(!T(y)){f=!0,h(e,t);break}!f&&c.class&&ae(c.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,o){if(!i(e)){var c,u=!1,d=[];if(i(n))u=!0,p(e,d);else{var m=a(n.nodeType);if(!m&&rr(n,e))E(n,e,d,null,null,o);else{if(m){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&A(n,e,d))return _(e,d,!0),n;c=n,n=new hn(l.tagName(c).toLowerCase(),{},[],void 0,c)}var g=n.elm,h=l.parentNode(g);if(p(e,d,g._leaveCb?null:h,l.nextSibling(g)),a(e.parent))for(var y=e.parent,v=f(e);y;){for(var b=0;b<r.destroy.length;++b)r.destroy[b](y);if(y.elm=e.elm,v){for(var w=0;w<r.create.length;++w)r.create[w](er,y);var S=y.data.hook.insert;if(S.merged)for(var T=1;T<S.fns.length;T++)S.fns[T]()}else nr(y);y=y.parent}a(h)?x([n],0,0):a(n.tag)&&k(n)}}return _(e,d,u),e.elm}a(n)&&k(n)}}({nodeOps:Xt,modules:[fr,vr,_r,Ir,Ur,W?{create:lo,activate:lo,remove:function(n,e){!0!==n.data.show?ao(n,e):e()}}:{}].concat(pr)});Y&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&bo(n,"input")}));var po={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?ue(t,"postpatch",(function(){po.componentUpdated(n,e,t)})):mo(n,e,t.context),n._vOptions=[].map.call(n.options,ho)):("textarea"===t.tag||Yt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",yo),n.addEventListener("compositionend",vo),n.addEventListener("change",vo),Y&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){mo(n,e,t.context);var r=n._vOptions,o=n._vOptions=[].map.call(n.options,ho);if(o.some((function(n,e){return!P(n,r[e])})))(n.multiple?e.value.some((function(n){return fo(n,o)})):e.value!==e.oldValue&&fo(e.value,o))&&bo(n,"change")}}};function mo(n,e,t){go(n,e,t),(K||X)&&setTimeout((function(){go(n,e,t)}),0)}function go(n,e,t){var r=e.value,o=n.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=n.options.length;s<c;s++)if(a=n.options[s],o)i=D(r,ho(a))>-1,a.selected!==i&&(a.selected=i);else if(P(ho(a),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));o||(n.selectedIndex=-1)}}function fo(n,e){return e.every((function(e){return!P(e,n)}))}function ho(n){return"_value"in n?n._value:n.value}function yo(n){n.target.composing=!0}function vo(n){n.target.composing&&(n.target.composing=!1,bo(n.target,"input"))}function bo(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function ko(n){return!n.componentInstance||n.data&&n.data.transition?n:ko(n.componentInstance._vnode)}var xo={model:po,show:{bind:function(n,e,t){var r=e.value,o=(t=ko(t)).data&&t.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&o?(t.data.show=!0,io(t,(function(){n.style.display=i}))):n.style.display=r?i:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=ko(t)).data&&t.data.transition?(t.data.show=!0,r?io(t,(function(){n.style.display=n.__vOriginalDisplay})):ao(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,o){o||(n.style.display=n.__vOriginalDisplay)}}},wo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function So(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?So(Ge(e.children)):n}function Eo(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var o=t._parentListeners;for(var i in o)e[E(i)]=o[i];return e}function _o(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var To=function(n){return n.tag||ye(n)},Ao=function(n){return"show"===n.name},Io={name:"transition",props:wo,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(To)).length){0;var r=this.mode;0;var o=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return o;var i=So(o);if(!i)return o;if(this._leaving)return _o(n,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:c(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var s=(i.data||(i.data={})).transition=Eo(this),l=this._vnode,u=So(l);if(i.data.directives&&i.data.directives.some(Ao)&&(i.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(i,u)&&!ye(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=R({},s);if("out-in"===r)return this._leaving=!0,ue(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),_o(n,o);if("in-out"===r){if(ye(i))return l;var d,m=function(){d()};ue(s,"afterEnter",m),ue(s,"enterCancelled",m),ue(p,"delayLeave",(function(n){d=n}))}}return o}}},jo=R({tag:String,moveClass:String},wo);function Ro(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Co(n){n.data.newPos=n.elm.getBoundingClientRect()}function zo(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,o=e.top-t.top;if(r||o){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete jo.mode;var Oo={Transition:Io,TransitionGroup:{props:jo,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var o=Ze(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,o(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=Eo(this),s=0;s<o.length;s++){var c=o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),t[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var l=[],u=[],p=0;p<r.length;p++){var d=r[p];d.data.transition=a,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?l.push(d):u.push(d)}this.kept=n(e,null,l),this.removed=u}return n(e,null,i)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Ro),n.forEach(Co),n.forEach(zo),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;Xr(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(Gr,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(Gr,n),t._moveCb=null,Zr(t,e))})}})))},methods:{hasMove:function(n,e){if(!Hr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){Nr(t,n)})),$r(t,e),t.style.display="none",this.$el.appendChild(t);var r=to(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};_t.config.mustUseProp=function(n,e,t){return"value"===t&&Bt(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},_t.config.isReservedTag=Qt,_t.config.isReservedAttr=Ot,_t.config.getTagNamespace=function(n){return Vt(n)?"svg":"math"===n?"math":void 0},_t.config.isUnknownElement=function(n){if(!W)return!0;if(Qt(n))return!1;if(n=n.toLowerCase(),null!=Kt[n])return Kt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Kt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Kt[n]=/HTMLUnknownElement/.test(e.toString())},R(_t.options.directives,xo),R(_t.options.components,Oo),_t.prototype.__patch__=W?uo:z,_t.prototype.$mount=function(n,e){return function(n,e,t){var r;return n.$el=e,n.$options.render||(n.$options.render=vn),tt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new gt(n,r,z,{before:function(){n._isMounted&&!n._isDestroyed&&tt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,tt(n,"mounted")),n}(this,n=n&&W?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},W&&setTimeout((function(){M.devtools&&an&&an.emit("init",_t)}),0);var Bo=_t;
/*!
  * vue-router v3.5.3
  * (c) 2021 Evan You
  * @license MIT
  */function Po(n,e){for(var t in e)n[t]=e[t];return n}var Do=/[!'()*]/g,qo=function(n){return"%"+n.charCodeAt(0).toString(16)},Lo=/%2C/g,Uo=function(n){return encodeURIComponent(n).replace(Do,qo).replace(Lo,",")};function Mo(n){try{return decodeURIComponent(n)}catch(n){0}return n}var $o=function(n){return null==n||"object"==typeof n?n:String(n)};function No(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=Mo(t.shift()),o=t.length>0?Mo(t.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function Fo(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return Uo(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(Uo(e)):r.push(Uo(e)+"="+Uo(n)))})),r.join("&")}return Uo(e)+"="+Uo(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var Jo=/\/?$/;function Ho(n,e,t,r){var o=r&&r.options.stringifyQuery,i=e.query||{};try{i=Wo(i)}catch(n){}var a={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:Qo(e,o),matched:n?Vo(n):[]};return t&&(a.redirectedFrom=Qo(t,o)),Object.freeze(a)}function Wo(n){if(Array.isArray(n))return n.map(Wo);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=Wo(n[t]);return e}return n}var Go=Ho(null,{path:"/"});function Vo(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function Qo(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var o=n.hash;return void 0===o&&(o=""),(t||"/")+(e||Fo)(r)+o}function Ko(n,e,t){return e===Go?n===e:!!e&&(n.path&&e.path?n.path.replace(Jo,"")===e.path.replace(Jo,"")&&(t||n.hash===e.hash&&Yo(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&Yo(n.query,e.query)&&Yo(n.params,e.params))))}function Yo(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,o){var i=n[t];if(r[o]!==t)return!1;var a=e[t];return null==i||null==a?i===a:"object"==typeof i&&"object"==typeof a?Yo(i,a):String(i)===String(a)}))}function Xo(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var o=t.instances[r],i=t.enteredCbs[r];if(o&&i){delete t.enteredCbs[r];for(var a=0;a<i.length;a++)o._isBeingDestroyed||i[a](o)}}}}var Zo={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,o=e.parent,i=e.data;i.routerView=!0;for(var a=o.$createElement,s=t.name,c=o.$route,l=o._routerViewCache||(o._routerViewCache={}),u=0,p=!1;o&&o._routerRoot!==o;){var d=o.$vnode?o.$vnode.data:{};d.routerView&&u++,d.keepAlive&&o._directInactive&&o._inactive&&(p=!0),o=o.$parent}if(i.routerViewDepth=u,p){var m=l[s],g=m&&m.component;return g?(m.configProps&&ni(g,i,m.route,m.configProps),a(g,i,r)):a()}var f=c.matched[u],h=f&&f.components[s];if(!f||!h)return l[s]=null,a();l[s]={component:h},i.registerRouteInstance=function(n,e){var t=f.instances[s];(e&&t!==n||!e&&t===n)&&(f.instances[s]=e)},(i.hook||(i.hook={})).prepatch=function(n,e){f.instances[s]=e.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==f.instances[s]&&(f.instances[s]=n.componentInstance),Xo(c)};var y=f.props&&f.props[s];return y&&(Po(l[s],{route:c,configProps:y}),ni(h,i,c,y)),a(h,i,r)}};function ni(n,e,t,r){var o=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(o){o=e.props=Po({},o);var i=e.attrs=e.attrs||{};for(var a in o)n.props&&a in n.props||(i[a]=o[a],delete o[a])}}function ei(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var i=n.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var s=i[a];".."===s?o.pop():"."!==s&&o.push(s)}return""!==o[0]&&o.unshift(""),o.join("/")}function ti(n){return n.replace(/\/+/g,"/")}var ri=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},oi=vi,ii=ui,ai=function(n,e){return di(ui(n,e),e)},si=di,ci=yi,li=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function ui(n,e){for(var t,r=[],o=0,i=0,a="",s=e&&e.delimiter||"/";null!=(t=li.exec(n));){var c=t[0],l=t[1],u=t.index;if(a+=n.slice(i,u),i=u+c.length,l)a+=l[1];else{var p=n[i],d=t[2],m=t[3],g=t[4],f=t[5],h=t[6],y=t[7];a&&(r.push(a),a="");var v=null!=d&&null!=p&&p!==d,b="+"===h||"*"===h,k="?"===h||"*"===h,x=t[2]||s,w=g||f;r.push({name:m||o++,prefix:d||"",delimiter:x,optional:k,repeat:b,partial:v,asterisk:!!y,pattern:w?gi(w):y?".*":"[^"+mi(x)+"]+?"})}}return i<n.length&&(a+=n.substr(i)),a&&r.push(a),r}function pi(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function di(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",hi(e)));return function(e,r){for(var o="",i=e||{},a=(r||{}).pretty?pi:encodeURIComponent,s=0;s<n.length;s++){var c=n[s];if("string"!=typeof c){var l,u=i[c.name];if(null==u){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(ri(u)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(l=a(u[p]),!t[s].test(l))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(l)+"`");o+=(0===p?c.prefix:c.delimiter)+l}}else{if(l=c.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):a(u),!t[s].test(l))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+l+'"');o+=c.prefix+l}}else o+=c}return o}}function mi(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function gi(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function fi(n,e){return n.keys=e,n}function hi(n){return n&&n.sensitive?"":"i"}function yi(n,e,t){ri(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,o=!1!==t.end,i="",a=0;a<n.length;a++){var s=n[a];if("string"==typeof s)i+=mi(s);else{var c=mi(s.prefix),l="(?:"+s.pattern+")";e.push(s),s.repeat&&(l+="(?:"+c+l+")*"),i+=l=s.optional?s.partial?c+"("+l+")?":"(?:"+c+"("+l+"))?":c+"("+l+")"}}var u=mi(t.delimiter||"/"),p=i.slice(-u.length)===u;return r||(i=(p?i.slice(0,-u.length):i)+"(?:"+u+"(?=$))?"),i+=o?"$":r&&p?"":"(?="+u+"|$)",fi(new RegExp("^"+i,hi(t)),e)}function vi(n,e,t){return ri(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return fi(n,e)}(n,e):ri(n)?function(n,e,t){for(var r=[],o=0;o<n.length;o++)r.push(vi(n[o],e,t).source);return fi(new RegExp("(?:"+r.join("|")+")",hi(t)),e)}(n,e,t):function(n,e,t){return yi(ui(n,t),e,t)}(n,e,t)}oi.parse=ii,oi.compile=ai,oi.tokensToFunction=si,oi.tokensToRegExp=ci;var bi=Object.create(null);function ki(n,e,t){e=e||{};try{var r=bi[n]||(bi[n]=oi.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function xi(n,e,t,r){var o="string"==typeof n?{path:n}:n;if(o._normalized)return o;if(o.name){var i=(o=Po({},n)).params;return i&&"object"==typeof i&&(o.params=Po({},i)),o}if(!o.path&&o.params&&e){(o=Po({},o))._normalized=!0;var a=Po(Po({},e.params),o.params);if(e.name)o.name=e.name,o.params=a;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;o.path=ki(s,a,e.path)}else 0;return o}var c=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var o=n.indexOf("?");return o>=0&&(t=n.slice(o+1),n=n.slice(0,o)),{path:n,query:t,hash:e}}(o.path||""),l=e&&e.path||"/",u=c.path?ei(c.path,l,t||o.append):l,p=function(n,e,t){void 0===e&&(e={});var r,o=t||No;try{r=o(n||"")}catch(n){r={}}for(var i in e){var a=e[i];r[i]=Array.isArray(a)?a.map($o):$o(a)}return r}(c.query,o.query,r&&r.options.parseQuery),d=o.hash||c.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var wi,Si=function(){},Ei={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,o=t.resolve(this.to,r,this.append),i=o.location,a=o.route,s=o.href,c={},l=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==l?"router-link-active":l,d=null==u?"router-link-exact-active":u,m=null==this.activeClass?p:this.activeClass,g=null==this.exactActiveClass?d:this.exactActiveClass,f=a.redirectedFrom?Ho(null,xi(a.redirectedFrom),null,t):a;c[g]=Ko(r,f,this.exactPath),c[m]=this.exact||this.exactPath?c[g]:function(n,e){return 0===n.path.replace(Jo,"/").indexOf(e.path.replace(Jo,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,f);var h=c[g]?this.ariaCurrentValue:null,y=function(n){_i(n)&&(e.replace?t.replace(i,Si):t.push(i,Si))},v={click:_i};Array.isArray(this.event)?this.event.forEach((function(n){v[n]=y})):v[this.event]=y;var b={class:c},k=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:a,navigate:y,isActive:c[m],isExactActive:c[g]});if(k){if(1===k.length)return k[0];if(k.length>1||!k.length)return 0===k.length?n():n("span",{},k)}if("a"===this.tag)b.on=v,b.attrs={href:s,"aria-current":h};else{var x=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(x){x.isStatic=!1;var w=x.data=Po({},x.data);for(var S in w.on=w.on||{},w.on){var E=w.on[S];S in v&&(w.on[S]=Array.isArray(E)?E:[E])}for(var _ in v)_ in w.on?w.on[_].push(v[_]):w.on[_]=y;var T=x.data.attrs=Po({},x.data.attrs);T.href=s,T["aria-current"]=h}else b.on=v}return n(this.tag,b,this.$slots.default)}};function _i(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Ti="undefined"!=typeof window;function Ai(n,e,t,r,o){var i=e||[],a=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,o,i,a){var s=o.path,c=o.name;0;var l=o.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ti(e.path+"/"+n)}(s,i,l.strict);"boolean"==typeof o.caseSensitive&&(l.sensitive=o.caseSensitive);var p={path:u,regex:Ii(u,l),components:o.components||{default:o.component},alias:o.alias?"string"==typeof o.alias?[o.alias]:o.alias:[],instances:{},enteredCbs:{},name:c,parent:i,matchAs:a,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach((function(o){var i=a?ti(a+"/"+o.path):void 0;n(e,t,r,o,p,i)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==o.alias)for(var d=Array.isArray(o.alias)?o.alias:[o.alias],m=0;m<d.length;++m){0;var g={path:d[m],children:o.children};n(e,t,r,g,i,p.path||"/")}c&&(r[c]||(r[c]=p))}(i,a,s,n,o)}));for(var c=0,l=i.length;c<l;c++)"*"===i[c]&&(i.push(i.splice(c,1)[0]),l--,c--);return{pathList:i,pathMap:a,nameMap:s}}function Ii(n,e){return oi(n,[],e)}function ji(n,e){var t=Ai(n),r=t.pathList,o=t.pathMap,i=t.nameMap;function a(n,t,a){var s=xi(n,t,!1,e),l=s.name;if(l){var u=i[l];if(!u)return c(null,s);var p=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=ki(u.path,s.params),c(u,s,a)}if(s.path){s.params={};for(var m=0;m<r.length;m++){var g=r[m],f=o[g];if(Ri(f.regex,s.path,s.params))return c(f,s,a)}}return c(null,s)}function s(n,t){var r=n.redirect,o="function"==typeof r?r(Ho(n,t,null,e)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return c(null,t);var s=o,l=s.name,u=s.path,p=t.query,d=t.hash,m=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,m=s.hasOwnProperty("params")?s.params:m,l){i[l];return a({_normalized:!0,name:l,query:p,hash:d,params:m},void 0,t)}if(u){var g=function(n,e){return ei(n,e.parent?e.parent.path:"/",!0)}(u,n);return a({_normalized:!0,path:ki(g,m),query:p,hash:d},void 0,t)}return c(null,t)}function c(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=a({_normalized:!0,path:ki(t,e.params)});if(r){var o=r.matched,i=o[o.length-1];return e.params=r.params,c(i,e)}return c(null,e)}(0,t,n.matchAs):Ho(n,t,r,e)}return{match:a,addRoute:function(n,e){var t="object"!=typeof n?i[n]:void 0;Ai([e||n],r,o,i,t),t&&t.alias.length&&Ai(t.alias.map((function(n){return{path:n,children:[e]}})),r,o,i,t)},getRoutes:function(){return r.map((function(n){return o[n]}))},addRoutes:function(n){Ai(n,r,o,i)}}}function Ri(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var o=1,i=r.length;o<i;++o){var a=n.keys[o-1];a&&(t[a.name||"pathMatch"]="string"==typeof r[o]?Mo(r[o]):r[o])}return!0}var Ci=Ti&&window.performance&&window.performance.now?window.performance:Date;function zi(){return Ci.now().toFixed(3)}var Oi=zi();function Bi(){return Oi}function Pi(n){return Oi=n}var Di=Object.create(null);function qi(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=Po({},window.history.state);return t.key=Bi(),window.history.replaceState(t,"",e),window.addEventListener("popstate",Mi),function(){window.removeEventListener("popstate",Mi)}}function Li(n,e,t,r){if(n.app){var o=n.options.scrollBehavior;o&&n.app.$nextTick((function(){var i=function(){var n=Bi();if(n)return Di[n]}(),a=o.call(n,e,t,r?i:null);a&&("function"==typeof a.then?a.then((function(n){Hi(n,i)})).catch((function(n){0})):Hi(a,i))}))}}function Ui(){var n=Bi();n&&(Di[n]={x:window.pageXOffset,y:window.pageYOffset})}function Mi(n){Ui(),n.state&&n.state.key&&Pi(n.state.key)}function $i(n){return Fi(n.x)||Fi(n.y)}function Ni(n){return{x:Fi(n.x)?n.x:window.pageXOffset,y:Fi(n.y)?n.y:window.pageYOffset}}function Fi(n){return"number"==typeof n}var Ji=/^#\d/;function Hi(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var o=Ji.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(o){var i=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(o,i={x:Fi((t=i).x)?t.x:0,y:Fi(t.y)?t.y:0})}else $i(n)&&(e=Ni(n))}else r&&$i(n)&&(e=Ni(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var Wi,Gi=Ti&&((-1===(Wi=window.navigator.userAgent).indexOf("Android 2.")&&-1===Wi.indexOf("Android 4.0")||-1===Wi.indexOf("Mobile Safari")||-1!==Wi.indexOf("Chrome")||-1!==Wi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Vi(n,e){Ui();var t=window.history;try{if(e){var r=Po({},t.state);r.key=Bi(),t.replaceState(r,"",n)}else t.pushState({key:Pi(zi())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function Qi(n){Vi(n,!0)}function Ki(n,e,t){var r=function(o){o>=n.length?t():n[o]?e(n[o],(function(){r(o+1)})):r(o+1)};r(0)}var Yi={redirected:2,aborted:4,cancelled:8,duplicated:16};function Xi(n,e){return na(n,e,Yi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return ea.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function Zi(n,e){return na(n,e,Yi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function na(n,e,t,r){var o=new Error(r);return o._isRouter=!0,o.from=n,o.to=e,o.type=t,o}var ea=["params","query","hash"];function ta(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function ra(n,e){return ta(n)&&n._isRouter&&(null==e||n.type===e)}function oa(n){return function(e,t,r){var o=!1,i=0,a=null;ia(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){o=!0,i++;var c,l=ca((function(e){var o;((o=e).__esModule||sa&&"Module"===o[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:wi.extend(e),t.components[s]=e,--i<=0&&r()})),u=ca((function(n){var e="Failed to resolve async component "+s+": "+n;a||(a=ta(n)?n:new Error(e),r(a))}));try{c=n(l,u)}catch(n){u(n)}if(c)if("function"==typeof c.then)c.then(l,u);else{var p=c.component;p&&"function"==typeof p.then&&p.then(l,u)}}})),o||r()}}function ia(n,e){return aa(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function aa(n){return Array.prototype.concat.apply([],n)}var sa="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function ca(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var la=function(n,e){this.router=n,this.base=function(n){if(!n)if(Ti){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=Go,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function ua(n,e,t,r){var o=ia(n,(function(n,r,o,i){var a=function(n,e){"function"!=typeof n&&(n=wi.extend(n));return n.options[e]}(n,e);if(a)return Array.isArray(a)?a.map((function(n){return t(n,r,o,i)})):t(a,r,o,i)}));return aa(r?o.reverse():o)}function pa(n,e){if(e)return function(){return n.apply(e,arguments)}}la.prototype.listen=function(n){this.cb=n},la.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},la.prototype.onError=function(n){this.errorCbs.push(n)},la.prototype.transitionTo=function(n,e,t){var r,o=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var i=this.current;this.confirmTransition(r,(function(){o.updateRoute(r),e&&e(r),o.ensureURL(),o.router.afterHooks.forEach((function(n){n&&n(r,i)})),o.ready||(o.ready=!0,o.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!o.ready&&(ra(n,Yi.redirected)&&i===Go||(o.ready=!0,o.readyErrorCbs.forEach((function(e){e(n)}))))}))},la.prototype.confirmTransition=function(n,e,t){var r=this,o=this.current;this.pending=n;var i,a,s=function(n){!ra(n)&&ta(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},c=n.matched.length-1,l=o.matched.length-1;if(Ko(n,o)&&c===l&&n.matched[c]===o.matched[l])return this.ensureURL(),n.hash&&Li(this.router,o,n,!1),s(((a=na(i=o,n,Yi.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",a));var u=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=u.updated,d=u.deactivated,m=u.activated,g=[].concat(function(n){return ua(n,"beforeRouteLeave",pa,!0)}(d),this.router.beforeHooks,function(n){return ua(n,"beforeRouteUpdate",pa)}(p),m.map((function(n){return n.beforeEnter})),oa(m)),f=function(e,t){if(r.pending!==n)return s(Zi(o,n));try{e(n,o,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return na(n,e,Yi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(o,n))):ta(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(Xi(o,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Ki(g,f,(function(){Ki(function(n){return ua(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,o,i){return n(r,o,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),i(n)}))}}(n,t,r)}))}(m).concat(r.router.resolveHooks),f,(function(){if(r.pending!==n)return s(Zi(o,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){Xo(n)}))}))}))},la.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},la.prototype.setupListeners=function(){},la.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=Go,this.pending=null};var da=function(n){function e(e,t){n.call(this,e,t),this._startLocation=ma(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=Gi&&t;r&&this.listeners.push(qi());var o=function(){var t=n.current,o=ma(n.base);n.current===Go&&o===n._startLocation||n.transitionTo(o,(function(n){r&&Li(e,n,t,!0)}))};window.addEventListener("popstate",o),this.listeners.push((function(){window.removeEventListener("popstate",o)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Vi(ti(r.base+n.fullPath)),Li(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Qi(ti(r.base+n.fullPath)),Li(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(ma(this.base)!==this.current.fullPath){var e=ti(this.base+this.current.fullPath);n?Vi(e):Qi(e)}},e.prototype.getCurrentLocation=function(){return ma(this.base)},e}(la);function ma(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ti(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var ga=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=ma(n);if(!/^\/#/.test(e))return window.location.replace(ti(n+"/#"+e)),!0}(this.base)||fa()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=Gi&&e;t&&this.listeners.push(qi());var r=function(){var e=n.current;fa()&&n.transitionTo(ha(),(function(r){t&&Li(n.router,r,e,!0),Gi||ba(r.fullPath)}))},o=Gi?"popstate":"hashchange";window.addEventListener(o,r),this.listeners.push((function(){window.removeEventListener(o,r)}))}},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){va(n.fullPath),Li(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){ba(n.fullPath),Li(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;ha()!==e&&(n?va(e):ba(e))},e.prototype.getCurrentLocation=function(){return ha()},e}(la);function fa(){var n=ha();return"/"===n.charAt(0)||(ba("/"+n),!1)}function ha(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function ya(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function va(n){Gi?Vi(ya(n)):window.location.hash=n}function ba(n){Gi?Qi(ya(n)):window.location.replace(ya(n))}var ka=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){ra(n,Yi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(la),xa=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=ji(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!Gi&&!1!==n.fallback,this.fallback&&(e="hash"),Ti||(e="abstract"),this.mode=e,e){case"history":this.history=new da(this,n.base);break;case"hash":this.history=new ga(this,n.base,this.fallback);break;case"abstract":this.history=new ka(this,n.base);break;default:0}},wa={currentRoute:{configurable:!0}};function Sa(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}xa.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},wa.currentRoute.get=function(){return this.history&&this.history.current},xa.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof da||t instanceof ga){var r=function(n){t.setupListeners(),function(n){var r=t.current,o=e.options.scrollBehavior;Gi&&o&&"fullPath"in n&&Li(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},xa.prototype.beforeEach=function(n){return Sa(this.beforeHooks,n)},xa.prototype.beforeResolve=function(n){return Sa(this.resolveHooks,n)},xa.prototype.afterEach=function(n){return Sa(this.afterHooks,n)},xa.prototype.onReady=function(n,e){this.history.onReady(n,e)},xa.prototype.onError=function(n){this.history.onError(n)},xa.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},xa.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},xa.prototype.go=function(n){this.history.go(n)},xa.prototype.back=function(){this.go(-1)},xa.prototype.forward=function(){this.go(1)},xa.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},xa.prototype.resolve=function(n,e,t){var r=xi(n,e=e||this.history.current,t,this),o=this.match(r,e),i=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ti(n+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:o}},xa.prototype.getRoutes=function(){return this.matcher.getRoutes()},xa.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==Go&&this.history.transitionTo(this.history.getCurrentLocation())},xa.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Go&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(xa.prototype,wa),xa.install=function n(e){if(!n.installed||wi!==e){n.installed=!0,wi=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",Zo),e.component("RouterLink",Ei);var o=e.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},xa.version="3.5.3",xa.isNavigationFailure=ra,xa.NavigationFailureType=Yi,xa.START_LOCATION=Go,Ti&&window.Vue&&window.Vue.use(xa);var Ea=xa;t(170),t(171),t(250),t(101),t(252),t(27),t(28),t(253);function _a(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}t(67),t(89),t(122);function Ta(n){return(Ta="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var Aa=t(69),Ia=(t(181),t(21),t(52),t(227),t(228),t(40),t(29),{NotFound:function(){return Promise.all([t.e(0),t.e(4)]).then(t.bind(null,476))},Layout:function(){return Promise.all([t.e(0),t.e(2)]).then(t.bind(null,475))}}),ja={"v-25b81bb6":function(){return t.e(5).then(t.bind(null,477))},"v-00c345ae":function(){return t.e(6).then(t.bind(null,478))},"v-ab13ac78":function(){return t.e(7).then(t.bind(null,479))},"v-53104ef6":function(){return t.e(8).then(t.bind(null,480))},"v-1a9d53e5":function(){return t.e(9).then(t.bind(null,481))},"v-150b83f6":function(){return t.e(10).then(t.bind(null,482))},"v-400d4d36":function(){return t.e(11).then(t.bind(null,483))},"v-460154d7":function(){return t.e(12).then(t.bind(null,484))},"v-1b773c08":function(){return t.e(13).then(t.bind(null,485))},"v-b06ecd3a":function(){return t.e(14).then(t.bind(null,486))},"v-b673a666":function(){return t.e(15).then(t.bind(null,487))},"v-e72bac0a":function(){return t.e(16).then(t.bind(null,488))},"v-732a2f39":function(){return t.e(17).then(t.bind(null,489))},"v-4a0974f9":function(){return t.e(18).then(t.bind(null,490))},"v-035690b5":function(){return t.e(19).then(t.bind(null,491))},"v-9a2f34ce":function(){return t.e(20).then(t.bind(null,492))},"v-7e99b8ce":function(){return t.e(21).then(t.bind(null,493))},"v-f18c332a":function(){return t.e(22).then(t.bind(null,494))},"v-e80e330a":function(){return t.e(23).then(t.bind(null,495))},"v-4fb836dd":function(){return t.e(24).then(t.bind(null,496))},"v-4c310cce":function(){return t.e(25).then(t.bind(null,497))},"v-7b4d7bc7":function(){return t.e(26).then(t.bind(null,498))},"v-525c82f9":function(){return t.e(27).then(t.bind(null,499))},"v-0f635eb9":function(){return t.e(28).then(t.bind(null,500))},"v-51306d75":function(){return t.e(29).then(t.bind(null,501))},"v-333d5a73":function(){return t.e(30).then(t.bind(null,502))},"v-33820a93":function(){return t.e(31).then(t.bind(null,503))},"v-680b3833":function(){return t.e(32).then(t.bind(null,504))},"v-097f0cda":function(){return t.e(33).then(t.bind(null,505))},"v-0967cebd":function(){return t.e(34).then(t.bind(null,506))},"v-6903b558":function(){return t.e(35).then(t.bind(null,507))},"v-a0ce0a92":function(){return t.e(36).then(t.bind(null,508))},"v-4174c5c8":function(){return t.e(37).then(t.bind(null,509))},"v-193cd5cd":function(){return t.e(38).then(t.bind(null,510))},"v-03fefd3b":function(){return t.e(39).then(t.bind(null,511))},"v-61294425":function(){return t.e(40).then(t.bind(null,512))},"v-05930a17":function(){return t.e(41).then(t.bind(null,513))},"v-01780501":function(){return t.e(42).then(t.bind(null,514))},"v-67ad6d8f":function(){return t.e(43).then(t.bind(null,515))},"v-2f299662":function(){return t.e(44).then(t.bind(null,516))},"v-4de5e5e9":function(){return t.e(45).then(t.bind(null,517))},"v-24bd736f":function(){return t.e(46).then(t.bind(null,518))},"v-a1f6d0d6":function(){return t.e(47).then(t.bind(null,519))},"v-3259f422":function(){return t.e(48).then(t.bind(null,520))},"v-2f26580a":function(){return t.e(49).then(t.bind(null,521))},"v-1f6f6185":function(){return t.e(50).then(t.bind(null,522))},"v-55f08350":function(){return t.e(51).then(t.bind(null,523))},"v-5889e6e6":function(){return t.e(52).then(t.bind(null,524))},"v-2c7c7647":function(){return t.e(53).then(t.bind(null,525))},"v-7b54e78f":function(){return t.e(54).then(t.bind(null,526))},"v-0f82412e":function(){return t.e(55).then(t.bind(null,527))},"v-7c876527":function(){return t.e(56).then(t.bind(null,528))},"v-b54b2dd0":function(){return t.e(57).then(t.bind(null,529))},"v-e40802de":function(){return t.e(58).then(t.bind(null,530))}};function Ra(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var Ca=/-(\w)/g,za=Ra((function(n){return n.replace(Ca,(function(n,e){return e?e.toUpperCase():""}))})),Oa=/\B([A-Z])/g,Ba=Ra((function(n){return n.replace(Oa,"-$1").toLowerCase()})),Pa=Ra((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function Da(n,e){if(e)return n(e)?n(e):e.includes("-")?n(Pa(za(e))):n(Pa(e))||n(Ba(e))}var qa=Object.assign({},Ia,ja),La=function(n){return qa[n]},Ua=function(n){return ja[n]},Ma=function(n){return Ia[n]},$a=function(n){return Bo.component(n)};function Na(n){return Da(Ua,n)}function Fa(n){return Da(Ma,n)}function Ja(n){return Da(La,n)}function Ha(n){return Da($a,n)}function Wa(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(Ha(e)||!Ja(e)){n.next=5;break}return n.next=3,Ja(e)();case 3:t=n.sent,Bo.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function Ga(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var Va=t(133),Qa=(t(266),t(144),t(99),t(212)),Ka=t.n(Qa),Ya=t(213),Xa=t.n(Ya),Za={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(Va.a)(n,1)[0]})).map((function(n){var e=Object(Va.a)(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(Xa()(n[t]),'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=es(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(Aa.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=ts(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return Ka()([{name:"description",content:this.$description}],n,this.siteMeta,rs)},updateCanonicalLink:function(){ns(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",es(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){ts(null,this.currentMetaTags),ns()}};function ns(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function es(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function ts(n,e){if(e&&Object(Aa.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function rs(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var r=t[e];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}t(134);var os=t(146),is={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(os)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+r,a=0;a<t.length;a++){var s=t[a],c=t[a+1],l=0===a&&0===r||r>=s.parentElement.offsetTop+10&&(!c||r<c.parentElement.offsetTop-10),u=decodeURIComponent(this.$route.hash);if(l&&u!==decodeURIComponent(s.hash)){var p=s;if(i===o)for(var d=a+1;d<t.length;d++)if(u===decodeURIComponent(t[d].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(p.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},as=(t(105),t(98)),ss=t.n(as),cs={mounted:function(){var n=this;ss.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||Bo.component(n.name)||ss.a.start(),t()})),this.$router.afterEach((function(){ss.a.done(),n.isSidebarOpen=!1}))}};t(73),t(72),t(76),t(361);function ls(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(96);function us(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function ps(n,e,t){return e&&us(n.prototype,e),t&&us(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}t(362);var ds=function(){function n(){ls(this,n);this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}return ps(n,[{key:"show",value:function(n){var e=this,t=n.text,r=void 0===t?"":t,o=n.duration,i=void 0===o?3e3:o,a=document.createElement("div");a.className="message move-in",a.innerHTML='\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">'.concat(r,"</div>\n    "),this.containerEl.appendChild(a),i>0&&setTimeout((function(){e.close(a)}),i)}},{key:"close",value:function(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",(function(){n.remove()}))}}]),n}(),ms={mounted:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy:function(){var n=this;setTimeout((function(){(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach((function(e){document.querySelectorAll(e).forEach(n.generateCopyButton)}))}),1e3)},generateCopyButton:function(n){var e=this;if(!n.classList.contains("codecopy-enabled")){var t=document.createElement("i");t.className="code-copy",t.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',t.title="复制到剪贴板",t.addEventListener("click",(function(){e.copyToClipboard(n.innerText)})),n.appendChild(t),n.classList.add("codecopy-enabled")}},copyToClipboard:function(n){var e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);var t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy"),(new ds).show({text:"复制成功",duration:500}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}},gs=(t(216),"auto"),fs="zoom-in",hs="zoom-out",ys="grab",vs="move";function bs(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o={passive:!1};r?n.addEventListener(e,t,o):n.removeEventListener(e,t,o)}function ks(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function xs(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function ws(n,e,t){!function(n){var e=Ss,t=Es;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var o=n.transform;delete n.transform,n[t]=o}}(e);var r=n.style,o={};for(var i in e)t&&(o[i]=r[i]||""),r[i]=e[i];return o}var Ss="transition",Es="transform",_s="transform",Ts="transitionend";var As=function(){},Is={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:As,onClose:As,onGrab:As,onMove:As,onRelease:As,onBeforeOpen:As,onBeforeClose:As,onBeforeGrab:As,onBeforeRelease:As,onImageLoading:As,onImageLoaded:As},js={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Cs(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,o=this.lastScrollPosition.y-t,i=this.options.scrollThreshold;(Math.abs(o)>=i||Math.abs(r)>=i)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Rs(n)&&!Cs(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Rs(n)&&!Cs(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Rs(n){return 0===n.button}function Cs(n){return n.metaKey||n.ctrlKey}var zs={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,ws(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),bs(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){ws(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Os="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Bs=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Ps=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Ds={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=xs(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,o=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?ys:hs,transition:_s+"\n        "+r+"s\n        "+o,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=ws(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,ws(this.el,{transform:"none"})},grab:function(n,e,t){var r=qs(),o=r.x-n,i=r.y-e;ws(this.el,{cursor:vs,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=qs(),o=r.x-n,i=r.y-e;ws(this.el,{transition:_s,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){ws(this.el,this.styleClose)},restoreOpenStyle:function(){ws(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=qs(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,o=r.customSize,i=r.scaleBase;if(!o&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(o&&"object"===(void 0===o?"undefined":Os(o)))return{x:o.width/this.rect.width,y:o.height/this.rect.height};var a=this.rect.width/2,s=this.rect.height/2,c=qs(),l={x:c.x-a,y:c.y-s},u=l.x/a,p=l.y/s,d=i+Math.min(u,p);if(o&&"string"==typeof o){var m=t||this.el.naturalWidth,g=e||this.el.naturalHeight,f=parseFloat(o)*m/(100*this.rect.width),h=parseFloat(o)*g/(100*this.rect.height);if(d>f||d>h)return{x:f,y:h}}return{x:d,y:d}}};function qs(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Ls(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){bs(n,r,e[r],t)}))}var Us=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Ds),this.overlay=Object.create(zs),this.handler=Object.create(js),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Ps({},Is,e),this.overlay.init(this),this.handler.init(this)}return Bs(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=fs,bs(n,"click",this.handler.click),this.options.preloadImage&&ks(xs(n)));return this}},{key:"config",value:function(n){return n?(Ps(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var o=this.target.srcOriginal;null!=o&&(this.options.onImageLoading(r),ks(o,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),bs(document,"scroll",this.handler.scroll),bs(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&bs(window,"resize",this.handler.resizeWindow);var i=function n(){bs(r,Ts,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Ls(document,e.handler,!0),t(r)};return bs(r,Ts,i),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=gs,this.overlay.fadeOut(),this.target.zoomOut(),bs(document,"scroll",this.handler.scroll,!1),bs(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&bs(window,"resize",this.handler.resizeWindow,!1);var r=function r(){bs(t,Ts,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Ls(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return bs(t,Ts,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var o=this.target.el;this.options.onBeforeGrab(o),this.released=!1,this.target.grab(n,e,t);var i=function n(){bs(o,Ts,n,!1),r(o)};return bs(o,Ts,i),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=vs,this.target.move(n,e,t);var o=this.target.el,i=function n(){bs(o,Ts,n,!1),r(o)};return bs(o,Ts,i),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=gs,this.target.restoreOpenStyle();var r=function r(){bs(t,Ts,r,!1),n.lock=!1,n.released=!0,e(t)};return bs(t,Ts,r),this}}}]),n}(),Ms=".theme-vdoing-content img:not(.no-zoom)",$s=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),Ns=Number("500"),Fs=function(){function n(){ls(this,n),this.instance=new Us($s)}return ps(n,[{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ms;"undefined"!=typeof window&&this.instance.listen(n)}},{key:"updateDelay",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ms,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ns;setTimeout((function(){return n.update(e)}),t)}}]),n}(),Js=[Za,is,cs,ms,{watch:{"$page.path":function(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted:function(){this.$vuepress.zooming=new Fs,this.$vuepress.zooming.updateDelay()}}],Hs={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Ga("layout",n),Bo.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},Ws=t(16),Gs=Object(Ws.a)(Hs,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){var r;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(r=n[e]).push.apply(r,Object(Aa.a)(t));break;default:throw new Error("Unknown option name.")}}(Gs,"mixins",Js);var Vs=[{name:"v-25b81bb6",path:"/centos7/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-25b81bb6").then(t)}},{path:"/centos7/index.html",redirect:"/centos7/"},{path:"/00.目录页/01.centos7.html",redirect:"/centos7/"},{name:"v-00c345ae",path:"/command/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-00c345ae").then(t)}},{path:"/command/index.html",redirect:"/command/"},{path:"/00.目录页/02.常用命令.html",redirect:"/command/"},{name:"v-ab13ac78",path:"/java/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-ab13ac78").then(t)}},{path:"/java/index.html",redirect:"/java/"},{path:"/00.目录页/03.Java.html",redirect:"/java/"},{name:"v-53104ef6",path:"/archives/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-53104ef6").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-1a9d53e5",path:"/categories/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-1a9d53e5").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-150b83f6",path:"/tags/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-150b83f6").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-400d4d36",path:"/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-400d4d36").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-460154d7",path:"/pages/ef2f99/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-460154d7").then(t)}},{path:"/pages/ef2f99/index.html",redirect:"/pages/ef2f99/"},{path:"/学习资料/01.centos7/01.centos7常用配置/02.Centos7配置静态网络.html",redirect:"/pages/ef2f99/"},{name:"v-1b773c08",path:"/pages/59c52f/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-1b773c08").then(t)}},{path:"/pages/59c52f/index.html",redirect:"/pages/59c52f/"},{path:"/学习资料/01.centos7/01.centos7常用配置/04.Centos7配置定时任务.html",redirect:"/pages/59c52f/"},{name:"v-b06ecd3a",path:"/pages/a0deac/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-b06ecd3a").then(t)}},{path:"/pages/a0deac/index.html",redirect:"/pages/a0deac/"},{path:"/学习资料/01.centos7/03.centos7安装服务/01.Centos7安装Docker.html",redirect:"/pages/a0deac/"},{name:"v-b673a666",path:"/pages/64523d/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-b673a666").then(t)}},{path:"/pages/64523d/index.html",redirect:"/pages/64523d/"},{path:"/学习资料/01.centos7/05.docker安装服务/01.Docker安装Nginx.html",redirect:"/pages/64523d/"},{name:"v-e72bac0a",path:"/pages/02c95e/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-e72bac0a").then(t)}},{path:"/pages/02c95e/index.html",redirect:"/pages/02c95e/"},{path:"/学习资料/01.centos7/05.docker安装服务/02.Docker安装MySQL.html",redirect:"/pages/02c95e/"},{name:"v-732a2f39",path:"/pages/cdbdbb/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-732a2f39").then(t)}},{path:"/pages/cdbdbb/index.html",redirect:"/pages/cdbdbb/"},{path:"/学习资料/01.centos7/05.docker安装服务/03.Docker安装Tomcat.html",redirect:"/pages/cdbdbb/"},{name:"v-4a0974f9",path:"/pages/8b837f/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-4a0974f9").then(t)}},{path:"/pages/8b837f/index.html",redirect:"/pages/8b837f/"},{path:"/学习资料/01.centos7/05.docker安装服务/04.Docker安装Gitlab.html",redirect:"/pages/8b837f/"},{name:"v-035690b5",path:"/pages/02a6d1/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-035690b5").then(t)}},{path:"/pages/02a6d1/index.html",redirect:"/pages/02a6d1/"},{path:"/学习资料/01.centos7/05.docker安装服务/05.Docker安装Ftp.html",redirect:"/pages/02a6d1/"},{name:"v-9a2f34ce",path:"/pages/7b6292/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-9a2f34ce").then(t)}},{path:"/pages/7b6292/index.html",redirect:"/pages/7b6292/"},{path:"/学习资料/01.centos7/05.docker安装服务/06.Docker安装Trojan.html",redirect:"/pages/7b6292/"},{name:"v-7e99b8ce",path:"/pages/a7c015/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-7e99b8ce").then(t)}},{path:"/pages/a7c015/index.html",redirect:"/pages/a7c015/"},{path:"/学习资料/01.centos7/05.docker安装服务/07.Docker安装V2ray.html",redirect:"/pages/a7c015/"},{name:"v-f18c332a",path:"/pages/c1ed84/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-f18c332a").then(t)}},{path:"/pages/c1ed84/index.html",redirect:"/pages/c1ed84/"},{path:"/学习资料/01.centos7/05.docker安装服务/08.Docker安装Frp.html",redirect:"/pages/c1ed84/"},{name:"v-e80e330a",path:"/pages/0000a6/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-e80e330a").then(t)}},{path:"/pages/0000a6/index.html",redirect:"/pages/0000a6/"},{path:"/学习资料/01.centos7/05.docker安装服务/09.Docker安装Redis.html",redirect:"/pages/0000a6/"},{name:"v-4fb836dd",path:"/pages/a45d98/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-4fb836dd").then(t)}},{path:"/pages/a45d98/index.html",redirect:"/pages/a45d98/"},{path:"/学习资料/01.centos7/05.docker安装服务/10.Docker安装Nacos.html",redirect:"/pages/a45d98/"},{name:"v-4c310cce",path:"/pages/c54468/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-4c310cce").then(t)}},{path:"/pages/c54468/index.html",redirect:"/pages/c54468/"},{path:"/学习资料/01.centos7/05.docker安装服务/11.Docker安装Rabbitmq.html",redirect:"/pages/c54468/"},{name:"v-7b4d7bc7",path:"/pages/1e85fd/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-7b4d7bc7").then(t)}},{path:"/pages/1e85fd/index.html",redirect:"/pages/1e85fd/"},{path:"/学习资料/01.centos7/05.docker安装服务/12.Docker安装Elasticsearch.html",redirect:"/pages/1e85fd/"},{name:"v-525c82f9",path:"/pages/8a8651/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-525c82f9").then(t)}},{path:"/pages/8a8651/index.html",redirect:"/pages/8a8651/"},{path:"/学习资料/01.centos7/05.docker安装服务/13.Docker安装Logstash.html",redirect:"/pages/8a8651/"},{name:"v-0f635eb9",path:"/pages/25aa1b/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-0f635eb9").then(t)}},{path:"/pages/25aa1b/index.html",redirect:"/pages/25aa1b/"},{path:"/学习资料/01.centos7/05.docker安装服务/14.Docker安装Kibana.html",redirect:"/pages/25aa1b/"},{name:"v-51306d75",path:"/pages/ab63d6/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-51306d75").then(t)}},{path:"/pages/ab63d6/index.html",redirect:"/pages/ab63d6/"},{path:"/学习资料/02.常用命令/01.Docker常用命令.html",redirect:"/pages/ab63d6/"},{name:"v-333d5a73",path:"/pages/115b69/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-333d5a73").then(t)}},{path:"/pages/115b69/index.html",redirect:"/pages/115b69/"},{path:"/学习资料/02.常用命令/02.Git常用命令.html",redirect:"/pages/115b69/"},{name:"v-33820a93",path:"/pages/33ee6d/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-33820a93").then(t)}},{path:"/pages/33ee6d/index.html",redirect:"/pages/33ee6d/"},{path:"/学习资料/02.常用命令/03.Linux常用命令.html",redirect:"/pages/33ee6d/"},{name:"v-680b3833",path:"/pages/3c4d4a/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-680b3833").then(t)}},{path:"/pages/3c4d4a/index.html",redirect:"/pages/3c4d4a/"},{path:"/学习资料/02.常用命令/04.MySQL常用命令.html",redirect:"/pages/3c4d4a/"},{name:"v-097f0cda",path:"/pages/a1ed3d/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-097f0cda").then(t)}},{path:"/pages/a1ed3d/index.html",redirect:"/pages/a1ed3d/"},{path:"/学习资料/02.常用命令/05.Nginx常用命令.html",redirect:"/pages/a1ed3d/"},{name:"v-0967cebd",path:"/pages/07cc6a/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-0967cebd").then(t)}},{path:"/pages/07cc6a/index.html",redirect:"/pages/07cc6a/"},{path:"/学习资料/03.Java/01.Java基础/01.基础知识.html",redirect:"/pages/07cc6a/"},{name:"v-6903b558",path:"/pages/118174/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-6903b558").then(t)}},{path:"/pages/118174/index.html",redirect:"/pages/118174/"},{path:"/学习资料/03.Java/01.Java基础/03.数据类型.html",redirect:"/pages/118174/"},{name:"v-a0ce0a92",path:"/pages/15942a/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-a0ce0a92").then(t)}},{path:"/pages/15942a/index.html",redirect:"/pages/15942a/"},{path:"/学习资料/03.Java/01.Java基础/05.面向对象.html",redirect:"/pages/15942a/"},{name:"v-4174c5c8",path:"/pages/b5379c/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-4174c5c8").then(t)}},{path:"/pages/b5379c/index.html",redirect:"/pages/b5379c/"},{path:"/学习资料/03.Java/01.Java基础/07.异常处理.html",redirect:"/pages/b5379c/"},{name:"v-193cd5cd",path:"/pages/4cb86a/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-193cd5cd").then(t)}},{path:"/pages/4cb86a/index.html",redirect:"/pages/4cb86a/"},{path:"/学习资料/03.Java/03.集合/01.Java集合.html",redirect:"/pages/4cb86a/"},{name:"v-03fefd3b",path:"/pages/c3df4e/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-03fefd3b").then(t)}},{path:"/pages/c3df4e/index.html",redirect:"/pages/c3df4e/"},{path:"/学习资料/03.Java/05.JVM/01.JVM相关知识体系.html",redirect:"/pages/c3df4e/"},{name:"v-61294425",path:"/pages/27f6bd/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-61294425").then(t)}},{path:"/pages/27f6bd/index.html",redirect:"/pages/27f6bd/"},{path:"/学习资料/03.Java/07.IO/01.Java IO知识体系图.html",redirect:"/pages/27f6bd/"},{name:"v-05930a17",path:"/pages/5f1d51/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-05930a17").then(t)}},{path:"/pages/5f1d51/index.html",redirect:"/pages/5f1d51/"},{path:"/学习资料/03.Java/09.并发/01.Java并发知识体系.html",redirect:"/pages/5f1d51/"},{name:"v-01780501",path:"/pages/20b9df/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-01780501").then(t)}},{path:"/pages/20b9df/index.html",redirect:"/pages/20b9df/"},{path:"/学习资料/03.Java/09.并发/03.Java线程基础.html",redirect:"/pages/20b9df/"},{name:"v-67ad6d8f",path:"/pages/5f83bc/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-67ad6d8f").then(t)}},{path:"/pages/5f83bc/index.html",redirect:"/pages/5f83bc/"},{path:"/学习资料/03.Java/18.SpringBoot实战/01.SpringBoot整合MybatisPlus.html",redirect:"/pages/5f83bc/"},{name:"v-2f299662",path:"/pages/5d1537/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-2f299662").then(t)}},{path:"/pages/5d1537/index.html",redirect:"/pages/5d1537/"},{path:"/学习资料/03.Java/18.SpringBoot实战/02.SpringBoot整合SwaggerUI.html",redirect:"/pages/5d1537/"},{name:"v-4de5e5e9",path:"/pages/d0754d/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-4de5e5e9").then(t)}},{path:"/pages/d0754d/index.html",redirect:"/pages/d0754d/"},{path:"/学习资料/03.Java/18.SpringBoot实战/03.SpringBoot整合SpringTask.html",redirect:"/pages/d0754d/"},{name:"v-24bd736f",path:"/pages/a36330/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-24bd736f").then(t)}},{path:"/pages/a36330/index.html",redirect:"/pages/a36330/"},{path:"/学习资料/03.Java/18.SpringBoot实战/04.SpringBoot整合Redis.html",redirect:"/pages/a36330/"},{name:"v-a1f6d0d6",path:"/pages/73b1ea/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-a1f6d0d6").then(t)}},{path:"/pages/73b1ea/index.html",redirect:"/pages/73b1ea/"},{path:"/学习资料/03.Java/18.SpringBoot实战/05.SpringBoot整合RabbitMQ.html",redirect:"/pages/73b1ea/"},{name:"v-3259f422",path:"/pages/b7c905/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-3259f422").then(t)}},{path:"/pages/b7c905/index.html",redirect:"/pages/b7c905/"},{path:"/学习资料/03.Java/18.SpringBoot实战/06.SpringBoot整合ElasticSearch.html",redirect:"/pages/b7c905/"},{name:"v-2f26580a",path:"/pages/464d7a/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-2f26580a").then(t)}},{path:"/pages/464d7a/index.html",redirect:"/pages/464d7a/"},{path:"/学习资料/03.Java/18.SpringBoot实战/07.SpringBoot整合SpringSecurity.html",redirect:"/pages/464d7a/"},{name:"v-1f6f6185",path:"/pages/44301a/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-1f6f6185").then(t)}},{path:"/pages/44301a/index.html",redirect:"/pages/44301a/"},{path:"/学习资料/03.Java/20.设计模式/01.Java设计模式.html",redirect:"/pages/44301a/"},{name:"v-55f08350",path:"/pages/723081/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-55f08350").then(t)}},{path:"/pages/723081/index.html",redirect:"/pages/723081/"},{path:"/学习资料/03.Java/25.SpringCloud实战/01.SpringCloud开始搭建.html",redirect:"/pages/723081/"},{name:"v-5889e6e6",path:"/pages/73ae92/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-5889e6e6").then(t)}},{path:"/pages/73ae92/index.html",redirect:"/pages/73ae92/"},{path:"/学习资料/03.Java/25.SpringCloud实战/02.SpringCloud配置中心Config.html",redirect:"/pages/73ae92/"},{name:"v-2c7c7647",path:"/pages/90be9f/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-2c7c7647").then(t)}},{path:"/pages/90be9f/index.html",redirect:"/pages/90be9f/"},{path:"/学习资料/03.Java/25.SpringCloud实战/03.SpringCloud服务注册Discovery.html",redirect:"/pages/90be9f/"},{name:"v-7b54e78f",path:"/pages/b48b5b/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-7b54e78f").then(t)}},{path:"/pages/b48b5b/index.html",redirect:"/pages/b48b5b/"},{path:"/学习资料/03.Java/25.SpringCloud实战/04.SpringCloud网关Gateway.html",redirect:"/pages/b48b5b/"},{name:"v-0f82412e",path:"/pages/ffc151/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-0f82412e").then(t)}},{path:"/pages/ffc151/index.html",redirect:"/pages/ffc151/"},{path:"/学习资料/03.Java/25.SpringCloud实战/05.SpringCloud授权OAuth2.html",redirect:"/pages/ffc151/"},{name:"v-7c876527",path:"/pages/9d5dbe/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-7c876527").then(t)}},{path:"/pages/9d5dbe/index.html",redirect:"/pages/9d5dbe/"},{path:"/学习资料/03.Java/25.SpringCloud实战/06.SpringCloud哨兵Sentinel.html",redirect:"/pages/9d5dbe/"},{name:"v-b54b2dd0",path:"/pages/fde21f/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-b54b2dd0").then(t)}},{path:"/pages/fde21f/index.html",redirect:"/pages/fde21f/"},{path:"/学习资料/03.Java/25.SpringCloud实战/07.SpringCloud监控Admin.html",redirect:"/pages/fde21f/"},{name:"v-e40802de",path:"/pages/a1549e/",component:Gs,beforeEnter:function(n,e,t){Wa("Layout","v-e40802de").then(t)}},{path:"/pages/a1549e/index.html",redirect:"/pages/a1549e/"},{path:"/学习资料/21.笔记/01.Tomcat最佳实践.html",redirect:"/pages/a1549e/"},{path:"*",component:Gs}],Qs={title:"冲！冲！冲！",description:"GO! GO! GO!",base:"/",headTags:[["link",{rel:"icon",href:"/images/head-logo.jpg"}]],pages:[{title:"centos7",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"学习资料/01.centos7",imgUrl:"/images/docker.jpg",description:"路灯经过一夜的努力，才无愧地领受第一缕晨光的抚慰。"}},title:"centos7",date:"2022-01-18T11:51:53.000Z",permalink:"/centos7/",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/01.centos7.html",relativePath:"00.目录页/01.centos7.md",key:"v-25b81bb6",path:"/centos7/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"常用命令",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"学习资料/02.常用命令",imgUrl:"/images/命令.jpg",description:"不为失败找理由，要为成功找方法。"}},title:"常用命令",date:"2022-01-19T09:35:11.000Z",permalink:"/command/",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/02.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"00.目录页/02.常用命令.md",key:"v-00c345ae",path:"/command/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Java",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"学习资料/03.Java",imgUrl:"/images/java.jpg",description:"世上所有的牛逼背后，都是一帮玩命的人。"}},title:"Java",date:"2022-01-19T09:37:09.000Z",permalink:"/java/",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/03.Java.html",relativePath:"00.目录页/03.Java.md",key:"v-ab13ac78",path:"/java/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-53104ef6",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-1a9d53e5",path:"/categories/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-150b83f6",path:"/tags/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Home",frontmatter:{home:!0,heroImage:"/images/home.jpg",heroText:"好好学习，天天向上",tagline:"没有捷径，需要日积月累的积累，以及对技术持久的热情",bannerBg:"none",features:[{title:"centos7",details:"环境配置好，开发事才少。",imgUrl:"/images/home-1.jpg",link:"/centos7"},{title:"常用命令",details:"勿忘！勿忘！勿忘！重要的事情说三遍。",imgUrl:"/images/home-2.jpg",link:"/command"},{title:"Java",details:"入门到入土，只要学不死，就往死里学。",imgUrl:"/images/home-3.jpg",link:"/java"}],footer:"MIT Licensed | Copyright © 2018-present Evan You"},regularPath:"/",relativePath:"README.md",key:"v-400d4d36",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Centos7配置静态网络",frontmatter:{title:"Centos7配置静态网络",date:"2022-02-12T15:16:07.000Z",permalink:"/pages/ef2f99/",categories:["学习资料","centos7","centos7常用配置"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/01.centos7%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/02.Centos7%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E7%BD%91%E7%BB%9C.html",relativePath:"学习资料/01.centos7/01.centos7常用配置/02.Centos7配置静态网络.md",key:"v-460154d7",path:"/pages/ef2f99/",headers:[{level:2,title:"centos7配置网络",slug:"centos7配置网络",normalizedTitle:"centos7配置网络",charIndex:2},{level:3,title:"1.查看服务器网络",slug:"_1-查看服务器网络",normalizedTitle:"1.查看服务器网络",charIndex:18},{level:3,title:"2.修改相对应网口的配置文件",slug:"_2-修改相对应网口的配置文件",normalizedTitle:"2.修改相对应网口的配置文件",charIndex:57},{level:3,title:"3.重启网卡服务",slug:"_3-重启网卡服务",normalizedTitle:"3.重启网卡服务",charIndex:613}],headersStr:"centos7配置网络 1.查看服务器网络 2.修改相对应网口的配置文件 3.重启网卡服务",content:"# centos7配置网络\n\n\n# 1.查看服务器网络\n\nip addr     #查看服务器网络情况\n\n\n\n# 2.修改相对应网口的配置文件\n\nvi /etc/sysconfig/network-scripts/ifcfg-eno1     #打开eno1的配置文件,修改保存   \n\n\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static            #static静态、dhcp动态\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=yes\nIPADDR=192.168.3.123        #IP地址\nNETMASK=255.255.255.0       #掩码\nGATEWAY=192.168.3.1         #网关\nDNS1=192.168.3.1            #DNS\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=eno1\nUUID=212602a9-5702-4561-a402-37588f875fe8\nDEVICE=eno1\nONBOOT=yes                  #自动启动\n\n\n\n# 3.重启网卡服务\n\nsystemctl restart network           #重启网卡服务\nip addr                             #再次查看IP\n",normalizedContent:"# centos7配置网络\n\n\n# 1.查看服务器网络\n\nip addr     #查看服务器网络情况\n\n\n\n# 2.修改相对应网口的配置文件\n\nvi /etc/sysconfig/network-scripts/ifcfg-eno1     #打开eno1的配置文件,修改保存   \n\n\ntype=ethernet\nproxy_method=none\nbrowser_only=no\nbootproto=static            #static静态、dhcp动态\ndefroute=yes\nipv4_failure_fatal=yes\nipaddr=192.168.3.123        #ip地址\nnetmask=255.255.255.0       #掩码\ngateway=192.168.3.1         #网关\ndns1=192.168.3.1            #dns\nipv6init=yes\nipv6_autoconf=yes\nipv6_defroute=yes\nipv6_failure_fatal=no\nipv6_addr_gen_mode=stable-privacy\nname=eno1\nuuid=212602a9-5702-4561-a402-37588f875fe8\ndevice=eno1\nonboot=yes                  #自动启动\n\n\n\n# 3.重启网卡服务\n\nsystemctl restart network           #重启网卡服务\nip addr                             #再次查看ip\n",charsets:{cjk:!0}},{title:"Centos7配置定时任务",frontmatter:{title:"Centos7配置定时任务",date:"2022-04-14T16:26:48.000Z",permalink:"/pages/59c52f/",categories:["学习资料","centos7","centos7常用配置"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/01.centos7%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/04.Centos7%E9%85%8D%E7%BD%AE%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html",relativePath:"学习资料/01.centos7/01.centos7常用配置/04.Centos7配置定时任务.md",key:"v-1b773c08",path:"/pages/59c52f/",headers:[{level:2,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:2},{level:2,title:"编辑的三种方式",slug:"编辑的三种方式",normalizedTitle:"编辑的三种方式",charIndex:215},{level:2,title:"表达式说明",slug:"表达式说明",normalizedTitle:"表达式说明",charIndex:328},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:258}],headersStr:"常用命令 编辑的三种方式 表达式说明 使用",content:"# 常用命令\n\nsystemctl start   crond         // 启动服务\nsystemctl stop    crond         // 停止服务\nsystemctl restart crond         // 重启服务\nsystemctl reload  crond         // 重载配置文件\nsystemctl status  crond         // 查看状态\n\n\n\n# 编辑的三种方式\n\n * 直接编辑配置文件\n\nvi /etc/crontab\n\n\n * 使用crontab -e 命令编辑\n\ncrontab -e\n\n\n * 直接编辑目标文件\n\nvi /var/spool/cron/\n\n\n\n# 表达式说明\n\nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\nMAILTO=root\n\n# For details see man 4 crontabs\n\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name  command to be executed\n0 21 * * * root /usr/zksc/elk_delete.sh start\n0 21 * * * root /usr/zksc/mysql_backup.sh start\n\n\n说明\n\n用户的定时任务分6段,分别是：分，时，日，月，周，命令  \n第1列表示分钟1～59 每分钟用*或者 */1表示  \n第2列表示小时1～23（0表示0点）  \n第3列表示日期1～31  \n第4列表示月份1～12  \n第5列标识号星期0～6（0表示星期天）  \n第6列要运行的命令    \n  \n*：表示任意时间都，实际上就是“每”的意思。可以代表00-23小时或者00-12每月或者00-59分  \n-：表示区间，是一个范围，00 17-19 * * * cmd，就是每天17,18,19点的整点执行命令  \n,：是分割时段，30 3,19,21 * * * cmd，就是每天凌晨3和晚上19,21点的半点时刻执行命令  \n/：表示分割，可以看成除法，*/5 * * * * cmd，每隔五分钟执行一次  \n\n\n\n# 使用\n\n 1. 编辑表达式 vi /etc/crontab\n 2. 保存并退出 :wq\n 3. 重启定时任务 systemctl restart crond",normalizedContent:"# 常用命令\n\nsystemctl start   crond         // 启动服务\nsystemctl stop    crond         // 停止服务\nsystemctl restart crond         // 重启服务\nsystemctl reload  crond         // 重载配置文件\nsystemctl status  crond         // 查看状态\n\n\n\n# 编辑的三种方式\n\n * 直接编辑配置文件\n\nvi /etc/crontab\n\n\n * 使用crontab -e 命令编辑\n\ncrontab -e\n\n\n * 直接编辑目标文件\n\nvi /var/spool/cron/\n\n\n\n# 表达式说明\n\nshell=/bin/bash\npath=/sbin:/bin:/usr/sbin:/usr/bin\nmailto=root\n\n# for details see man 4 crontabs\n\n# example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) or jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (sunday=0 or 7) or sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name  command to be executed\n0 21 * * * root /usr/zksc/elk_delete.sh start\n0 21 * * * root /usr/zksc/mysql_backup.sh start\n\n\n说明\n\n用户的定时任务分6段,分别是：分，时，日，月，周，命令  \n第1列表示分钟1～59 每分钟用*或者 */1表示  \n第2列表示小时1～23（0表示0点）  \n第3列表示日期1～31  \n第4列表示月份1～12  \n第5列标识号星期0～6（0表示星期天）  \n第6列要运行的命令    \n  \n*：表示任意时间都，实际上就是“每”的意思。可以代表00-23小时或者00-12每月或者00-59分  \n-：表示区间，是一个范围，00 17-19 * * * cmd，就是每天17,18,19点的整点执行命令  \n,：是分割时段，30 3,19,21 * * * cmd，就是每天凌晨3和晚上19,21点的半点时刻执行命令  \n/：表示分割，可以看成除法，*/5 * * * * cmd，每隔五分钟执行一次  \n\n\n\n# 使用\n\n 1. 编辑表达式 vi /etc/crontab\n 2. 保存并退出 :wq\n 3. 重启定时任务 systemctl restart crond",charsets:{cjk:!0}},{title:"Centos7安装Docker",frontmatter:{title:"Centos7安装Docker",date:"2022-02-12T15:01:36.000Z",permalink:"/pages/a0deac/",categories:["学习资料","centos7","centos7安装服务"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/03.centos7%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/01.Centos7%E5%AE%89%E8%A3%85Docker.html",relativePath:"学习资料/01.centos7/03.centos7安装服务/01.Centos7安装Docker.md",key:"v-b06ecd3a",path:"/pages/a0deac/",headers:[{level:2,title:"centos7二进制安装docker",slug:"centos7二进制安装docker",normalizedTitle:"centos7二进制安装docker",charIndex:2},{level:3,title:"下载离线安装包",slug:"下载离线安装包",normalizedTitle:"下载离线安装包",charIndex:25},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:12},{level:2,title:"安装docker-compose",slug:"安装docker-compose",normalizedTitle:"安装docker-compose",charIndex:1821},{level:3,title:"下载",slug:"下载",normalizedTitle:"下载",charIndex:25},{level:3,title:"安装",slug:"安装-2",normalizedTitle:"安装",charIndex:12},{level:2,title:"一键安装docker和docker compose",slug:"一键安装docker和docker-compose",normalizedTitle:"一键安装docker和docker compose",charIndex:2098},{level:3,title:"下载",slug:"下载-2",normalizedTitle:"下载",charIndex:25},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:2221}],headersStr:"centos7二进制安装docker 下载离线安装包 安装 安装docker-compose 下载 安装 一键安装docker和docker compose 下载 使用",content:"# centos7二进制安装docker\n\n\n# 下载离线安装包\n\n官网下载\n\n\n# 安装\n\n 1. 把准备好的文件放进home目录\n 2. 解压放到/usr/bin/目录下\n\ntar -zxvf docker-20.10.1.tgz        # 解压安装包\nmv docker/* /usr/bin/               # 移动目录\nrm docker-20.10.1.tgz               # 删除安装包\n\n\n 3. 在/etc/systemd/system/目录下新建文件docker.service\n\nvi /etc/systemd/system/\n\n\ndocker.service\n\n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network-online.target firewalld.service\nWants=network-online.target\n[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\nExecReload=/bin/kill -s HUP $MAINPID\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\n# Uncomment TasksMax if your systemd version supports it.\n# Only systemd 226 and above support this version.\n#TasksMax=infinity\nTimeoutStartSec=0\n# set delegate yes so that systemd does not reset the cgroups of docker containers\nDelegate=yes\n# kill only the docker process, not all processes in the cgroup\nKillMode=process\n# restart the docker process if it exits prematurely\nRestart=on-failure\nStartLimitBurst=3\nStartLimitInterval=60s\n[Install]\nWantedBy=multi-user.target \n\n\n 4. 重启\n\nchmod +x /etc/systemd/system/docker.service       #添加文件权限 \nsystemctl daemon-reload                           #重新加载配置文件 \nsystemctl start docker                            #启动Docker \ndocker -v                                         #查看Docker版本\nsystemctl enable docker.service                   #设置开机自启 \n\n\n\n# 安装docker-compose\n\n\n# 下载\n\n官网下载\n\n\n# 安装\n\nmv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose       #把文件移动到/usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\t\t\t\t\t\t\t   #添加文件权限 \ndocker-compose -v                                                  #查看版本\n\n\n\n# 一键安装docker和docker compose\n\n\n# 下载\n\ndockerInstall.sh\n安装包\n\n> 把dockerInstall.sh和zksc-install-docker.tar文件上传到centos7服务器同一目录\n\n\n# 使用\n\n> 进入dockerInstall.sh文件所在目录\n\nchmod 777 dockerInstall.sh      #给dockerInstall.sh文件权限命令\n./dockerInstall.sh              #执行dockerInstall.sh文件\n或者\nsh dockerInstall.sh             #执行dockerInstall.sh文件\n",normalizedContent:"# centos7二进制安装docker\n\n\n# 下载离线安装包\n\n官网下载\n\n\n# 安装\n\n 1. 把准备好的文件放进home目录\n 2. 解压放到/usr/bin/目录下\n\ntar -zxvf docker-20.10.1.tgz        # 解压安装包\nmv docker/* /usr/bin/               # 移动目录\nrm docker-20.10.1.tgz               # 删除安装包\n\n\n 3. 在/etc/systemd/system/目录下新建文件docker.service\n\nvi /etc/systemd/system/\n\n\ndocker.service\n\n[unit]\ndescription=docker application container engine\ndocumentation=https://docs.docker.com\nafter=network-online.target firewalld.service\nwants=network-online.target\n[service]\ntype=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nexecstart=/usr/bin/dockerd  -h tcp://0.0.0.0:2375 -h unix://var/run/docker.sock\nexecreload=/bin/kill -s hup $mainpid\n# having non-zero limit*s causes performance problems due to accounting overhead\n# in the kernel. we recommend using cgroups to do container-local accounting.\nlimitnofile=infinity\nlimitnproc=infinity\nlimitcore=infinity\n# uncomment tasksmax if your systemd version supports it.\n# only systemd 226 and above support this version.\n#tasksmax=infinity\ntimeoutstartsec=0\n# set delegate yes so that systemd does not reset the cgroups of docker containers\ndelegate=yes\n# kill only the docker process, not all processes in the cgroup\nkillmode=process\n# restart the docker process if it exits prematurely\nrestart=on-failure\nstartlimitburst=3\nstartlimitinterval=60s\n[install]\nwantedby=multi-user.target \n\n\n 4. 重启\n\nchmod +x /etc/systemd/system/docker.service       #添加文件权限 \nsystemctl daemon-reload                           #重新加载配置文件 \nsystemctl start docker                            #启动docker \ndocker -v                                         #查看docker版本\nsystemctl enable docker.service                   #设置开机自启 \n\n\n\n# 安装docker-compose\n\n\n# 下载\n\n官网下载\n\n\n# 安装\n\nmv docker-compose-linux-x86_64 /usr/local/bin/docker-compose       #把文件移动到/usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\t\t\t\t\t\t\t   #添加文件权限 \ndocker-compose -v                                                  #查看版本\n\n\n\n# 一键安装docker和docker compose\n\n\n# 下载\n\ndockerinstall.sh\n安装包\n\n> 把dockerinstall.sh和zksc-install-docker.tar文件上传到centos7服务器同一目录\n\n\n# 使用\n\n> 进入dockerinstall.sh文件所在目录\n\nchmod 777 dockerinstall.sh      #给dockerinstall.sh文件权限命令\n./dockerinstall.sh              #执行dockerinstall.sh文件\n或者\nsh dockerinstall.sh             #执行dockerinstall.sh文件\n",charsets:{cjk:!0}},{title:"Docker安装Nginx",frontmatter:{title:"Docker安装Nginx",date:"2022-02-07T11:17:03.000Z",permalink:"/pages/64523d/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","nginx"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/01.Docker%E5%AE%89%E8%A3%85Nginx.html",relativePath:"学习资料/01.centos7/05.docker安装服务/01.Docker安装Nginx.md",key:"v-b673a666",path:"/pages/64523d/",headers:[{level:2,title:"docker安装nginx",slug:"docker安装nginx",normalizedTitle:"docker安装nginx",charIndex:14},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:32},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:67},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:98},{level:2,title:"docker compose安装nginx",slug:"docker-compose安装nginx",normalizedTitle:"docker compose安装nginx",charIndex:3139},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:3165},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:3697}],headersStr:"docker安装nginx 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装nginx 1.创建yml文件 2.运行",content:'Nginx中文文档\n\n\n# docker安装nginx\n\n\n# 1.获取镜像列表\n\ndocker search nginx\n\n\n\n# 2.拉取镜像\n\ndocker pull nginx\n\n\n\n# 3.运行\n\ndocker run -d --name nginx -p 80:80 --privileged -v /home/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /home/docker/nginx/html:/usr/share/nginx/html -v /home/docker/nginx/logs:/var/log/nginx nginx:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n> --privileged：容器分配root权限\n\nnginx.conf\n\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n    #                  \'$status $body_bytes_sent "$http_referer" \'\n    #                  \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache\'s document root\n        # concurs with nginx\'s one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n\n\n----------------------------------------\n\n\n# docker compose安装nginx\n\n\n# 1.创建yml文件\n\ndocker-compose-nginx.yml\n\nversion: \'3.3\'\nservices:\n  nginx:\n    image: nginx\n    container_name: nginx\n    environment:\n      TZ=Asia/Shanghai\n    ports:\n      - "7273:7273"\n      - "8188:8188"\n      - "9200:9200"\n      - "9999:9999"\n      - "10000:10000"\n      - "8088:8088"\n      - "7272:7272"\n      - "8089:8089"\n    privileged: true\n    volumes:\n      - /home/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n      - /home/docker/nginx/html:/usr/share/nginx/html\n      - /home/docker/nginx/logs:/var/log/nginx\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-nginx.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',normalizedContent:'nginx中文文档\n\n\n# docker安装nginx\n\n\n# 1.获取镜像列表\n\ndocker search nginx\n\n\n\n# 2.拉取镜像\n\ndocker pull nginx\n\n\n\n# 3.运行\n\ndocker run -d --name nginx -p 80:80 --privileged -v /home/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /home/docker/nginx/html:/usr/share/nginx/html -v /home/docker/nginx/logs:/var/log/nginx nginx:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n> --privileged：容器分配root权限\n\nnginx.conf\n\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n    #                  \'$status $body_bytes_sent "$http_referer" \'\n    #                  \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the php scripts to apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the php scripts to fastcgi server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  script_filename  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if apache\'s document root\n        # concurs with nginx\'s one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of ip-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # https server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:ssl:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  high:!anull:!md5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n\n\n----------------------------------------\n\n\n# docker compose安装nginx\n\n\n# 1.创建yml文件\n\ndocker-compose-nginx.yml\n\nversion: \'3.3\'\nservices:\n  nginx:\n    image: nginx\n    container_name: nginx\n    environment:\n      tz=asia/shanghai\n    ports:\n      - "7273:7273"\n      - "8188:8188"\n      - "9200:9200"\n      - "9999:9999"\n      - "10000:10000"\n      - "8088:8088"\n      - "7272:7272"\n      - "8089:8089"\n    privileged: true\n    volumes:\n      - /home/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n      - /home/docker/nginx/html:/usr/share/nginx/html\n      - /home/docker/nginx/logs:/var/log/nginx\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-nginx.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',charsets:{cjk:!0}},{title:"Docker安装MySQL",frontmatter:{title:"Docker安装MySQL",date:"2022-02-07T15:20:19.000Z",permalink:"/pages/02c95e/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","mysql"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/02.Docker%E5%AE%89%E8%A3%85MySQL.html",relativePath:"学习资料/01.centos7/05.docker安装服务/02.Docker安装MySQL.md",key:"v-e72bac0a",path:"/pages/02c95e/",headers:[{level:2,title:"docker安装mysql",slug:"docker安装mysql",normalizedTitle:"docker安装mysql",charIndex:12},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:30},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:65},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:103},{level:2,title:"docker compose安装nginx",slug:"docker-compose安装nginx",normalizedTitle:"docker compose安装nginx",charIndex:415},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:441},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:1223}],headersStr:"docker安装mysql 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装nginx 1.创建yml文件 2.运行",content:'MySQL官网\n\n\n# docker安装mysql\n\n\n# 1.获取镜像列表\n\ndocker search mysql\n\n\n\n# 2.拉取镜像\n\ndocker pull mysql:5.7.32\n\n\n\n# 3.运行\n\ndocker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /home/docker/mysql/db:/var/lib/mysql -v /home/docker/mysql/init:/docker-entrypoint-initdb.d/ mysql:5.7.32\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\n----------------------------------------\n\n\n# docker compose安装nginx\n\n\n# 1.创建yml文件\n\ndocker-compose-mysql.yml\n\nversion: \'3.3\'\nservices: \n  mysql:\n    ## network_mode: host\n    image: "mysql:5.7.32"\n    container_name: mysql\n    ports:\n      - "3306:3306"\n    environment:\n      TZ: Asia/Shanghai\n      MYSQL_ROOT_PASSWORD: 123456\n    command:\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n      --max_allowed_packet=128M\n      --sql-mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO"\n      --default-authentication_plugin=MYSQL_NATIVE_PASSWORD\n    volumes:\n      - /home/docker/mysql/db:/var/lib/mysql\n      - /home/docker/mysql/init:/docker-entrypoint-initdb.d/\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-mysql.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',normalizedContent:'mysql官网\n\n\n# docker安装mysql\n\n\n# 1.获取镜像列表\n\ndocker search mysql\n\n\n\n# 2.拉取镜像\n\ndocker pull mysql:5.7.32\n\n\n\n# 3.运行\n\ndocker run -d --name mysql -p 3306:3306 -e mysql_root_password=123456 -v /home/docker/mysql/db:/var/lib/mysql -v /home/docker/mysql/init:/docker-entrypoint-initdb.d/ mysql:5.7.32\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\n----------------------------------------\n\n\n# docker compose安装nginx\n\n\n# 1.创建yml文件\n\ndocker-compose-mysql.yml\n\nversion: \'3.3\'\nservices: \n  mysql:\n    ## network_mode: host\n    image: "mysql:5.7.32"\n    container_name: mysql\n    ports:\n      - "3306:3306"\n    environment:\n      tz: asia/shanghai\n      mysql_root_password: 123456\n    command:\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n      --max_allowed_packet=128m\n      --sql-mode="strict_trans_tables,no_auto_create_user,no_engine_substitution,no_zero_date,no_zero_in_date,error_for_division_by_zero"\n      --default-authentication_plugin=mysql_native_password\n    volumes:\n      - /home/docker/mysql/db:/var/lib/mysql\n      - /home/docker/mysql/init:/docker-entrypoint-initdb.d/\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-mysql.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',charsets:{cjk:!0}},{title:"Docker安装Tomcat",frontmatter:{title:"Docker安装Tomcat",date:"2022-02-07T15:32:25.000Z",permalink:"/pages/cdbdbb/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","tomcat"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/03.Docker%E5%AE%89%E8%A3%85Tomcat.html",relativePath:"学习资料/01.centos7/05.docker安装服务/03.Docker安装Tomcat.md",key:"v-732a2f39",path:"/pages/cdbdbb/",headers:[{level:2,title:"docker安装tomcat",slug:"docker安装tomcat",normalizedTitle:"docker安装tomcat",charIndex:18},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:37},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:73},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:105},{level:2,title:"docker compose安装tomcat",slug:"docker-compose安装tomcat",normalizedTitle:"docker compose安装tomcat",charIndex:7422},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:7449},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:7876}],headersStr:"docker安装tomcat 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装tomcat 1.创建yml文件 2.运行",content:'Apache Tomcat\n\n\n# docker安装tomcat\n\n\n# 1.获取镜像列表\n\ndocker search tomcat\n\n\n\n# 2.拉取镜像\n\ndocker pull tomcat\n\n\n\n# 3.运行\n\ndocker run -d --name tomcat -p 8080:8080 -v /home/docker/tomcat/webapps:/usr/local/tomcat/webapps/ -v /home/docker/tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml -v /home/docker/tomcat/logs:/usr/local/tomcat/logs/ tomcat:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nserver.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n\x3c!--\n  Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.  See the NOTICE file distributed with\n  this work for additional information regarding copyright ownership.\n  The ASF licenses this file to You under the Apache License, Version 2.0\n  (the "License"); you may not use this file except in compliance with\n  the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an "AS IS" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n--\x3e\n\x3c!-- Note:  A "Server" is not itself a "Container", so you may not\n     define subcomponents such as "Valves" at this level.\n     Documentation at /docs/config/server.html\n --\x3e\n<Server port="8005" shutdown="SHUTDOWN">\n    <Listener className="org.apache.catalina.startup.VersionLoggerListener"/>\n    \x3c!-- Security listener. Documentation at /docs/config/listeners.html\n    <Listener className="org.apache.catalina.security.SecurityListener" />\n    --\x3e\n    \x3c!--APR library loader. Documentation at /docs/apr.html --\x3e\n    <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on"/>\n    \x3c!-- Prevent memory leaks due to use of particular java/javax APIs--\x3e\n    <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener"/>\n    <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"/>\n    <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener"/>\n\n    \x3c!-- Global JNDI resources\n         Documentation at /docs/jndi-resources-howto.html\n    --\x3e\n    <GlobalNamingResources>\n        \x3c!-- Editable user database that can also be used by\n             UserDatabaseRealm to authenticate users\n        --\x3e\n        <Resource name="UserDatabase" auth="Container"\n                  type="org.apache.catalina.UserDatabase"\n                  description="User database that can be updated and saved"\n                  factory="org.apache.catalina.users.MemoryUserDatabaseFactory"\n                  pathname="conf/tomcat-users.xml"/>\n    </GlobalNamingResources>\n\n    \x3c!-- A "Service" is a collection of one or more "Connectors" that share\n         a single "Container" Note:  A "Service" is not itself a "Container",\n         so you may not define subcomponents such as "Valves" at this level.\n         Documentation at /docs/config/service.html\n     --\x3e\n    <Service name="Catalina">\n\n        \x3c!--The connectors can use a shared executor, you can define one or more named thread pools--\x3e\n        \x3c!--\n        <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"\n            maxThreads="150" minSpareThreads="4"/>\n        --\x3e\n\n\n        \x3c!-- A "Connector" represents an endpoint by which requests are received\n             and responses are returned. Documentation at :\n             Java HTTP Connector: /docs/config/http.html (blocking & non-blocking)\n             Java AJP  Connector: /docs/config/ajp.html\n             APR (HTTP/AJP) Connector: /docs/apr.html\n             Define a non-SSL/TLS HTTP/1.1 Connector on port 8080\n        --\x3e\n        <Connector port="8080" protocol="HTTP/1.1"\n                   connectionTimeout="20000"\n                   redirectPort="8443" URIEncoding="GBK"/>\n        \x3c!-- A "Connector" using the shared thread pool--\x3e\n        \x3c!--\n        <Connector executor="tomcatThreadPool"\n                   port="8080" protocol="HTTP/1.1"\n                   connectionTimeout="20000"\n                   redirectPort="8443" />\n        --\x3e\n        \x3c!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443\n             This connector uses the NIO implementation that requires the JSSE\n             style configuration. When using the APR/native implementation, the\n             OpenSSL style configuration is required as described in the APR/native\n             documentation --\x3e\n        \x3c!--\n        <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"\n                   maxThreads="150" SSLEnabled="true" scheme="https" secure="true"\n                   clientAuth="false" sslProtocol="TLS" />\n        --\x3e\n\n        \x3c!-- Define an AJP 1.3 Connector on port 8009 --\x3e\n        <Connector port="8009" protocol="AJP/1.3" redirectPort="8443"/>\n\n\n        \x3c!-- An Engine represents the entry point (within Catalina) that processes\n             every request.  The Engine implementation for Tomcat stand alone\n             analyzes the HTTP headers included with the request, and passes them\n             on to the appropriate Host (virtual host).\n             Documentation at /docs/config/engine.html --\x3e\n\n        \x3c!-- You should set jvmRoute to support load-balancing via AJP ie :\n        <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">\n        --\x3e\n        <Engine name="Catalina" defaultHost="localhost">\n\n            \x3c!--For clustering, please take a look at documentation at:\n                /docs/cluster-howto.html  (simple how to)\n                /docs/config/cluster.html (reference documentation) --\x3e\n            \x3c!--\n            <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>\n            --\x3e\n\n            \x3c!-- Use the LockOutRealm to prevent attempts to guess user passwords\n                 via a brute-force attack --\x3e\n            <Realm className="org.apache.catalina.realm.LockOutRealm">\n                \x3c!-- This Realm uses the UserDatabase configured in the global JNDI\n                     resources under the key "UserDatabase".  Any edits\n                     that are performed against this UserDatabase are immediately\n                     available for use by the Realm.  --\x3e\n                <Realm className="org.apache.catalina.realm.UserDatabaseRealm"\n                       resourceName="UserDatabase"/>\n            </Realm>\n\n            <Host name="localhost" appBase="webapps"\n                  unpackWARs="true" autoDeploy="true">\n\n                \x3c!-- SingleSignOn valve, share authentication between web applications\n                     Documentation at: /docs/config/valve.html --\x3e\n                \x3c!--\n                <Valve className="org.apache.catalina.authenticator.SingleSignOn" />\n                --\x3e\n\n                \x3c!-- Access log processes all example.\n                     Documentation at: /docs/config/valve.html\n                     Note: The pattern used is equivalent to using pattern="common" --\x3e\n                <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"\n                       prefix="localhost_access_log" suffix=".txt"\n                       pattern="%h %l %u %t &quot;%r&quot; %s %b"/>\n\n            </Host>\n        </Engine>\n    </Service>\n</Server>\n\n\n----------------------------------------\n\n\n# docker compose安装tomcat\n\n\n# 1.创建yml文件\n\ndocker-compose-tomcat.yml\n\nversion: \'3.3\'\nservices:\n  tomcat:\n    image: tomcat\n    container_name: tomcat\n    ports:\n      - "8080:8080"\n    environment:\n      TZ: Asia/Shanghai\n    privileged: true\n    volumes:\n      - /home/docker/tomcat/webapps:/usr/local/tomcat/webapps/\n      - /home/docker/tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml\n      - /home/docker/tomcat/logs:/usr/local/tomcat/logs/\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-tomcat.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',normalizedContent:'apache tomcat\n\n\n# docker安装tomcat\n\n\n# 1.获取镜像列表\n\ndocker search tomcat\n\n\n\n# 2.拉取镜像\n\ndocker pull tomcat\n\n\n\n# 3.运行\n\ndocker run -d --name tomcat -p 8080:8080 -v /home/docker/tomcat/webapps:/usr/local/tomcat/webapps/ -v /home/docker/tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml -v /home/docker/tomcat/logs:/usr/local/tomcat/logs/ tomcat:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nserver.xml\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?>\n\x3c!--\n  licensed to the apache software foundation (asf) under one or more\n  contributor license agreements.  see the notice file distributed with\n  this work for additional information regarding copyright ownership.\n  the asf licenses this file to you under the apache license, version 2.0\n  (the "license"); you may not use this file except in compliance with\n  the license.  you may obtain a copy of the license at\n\n      http://www.apache.org/licenses/license-2.0\n\n  unless required by applicable law or agreed to in writing, software\n  distributed under the license is distributed on an "as is" basis,\n  without warranties or conditions of any kind, either express or implied.\n  see the license for the specific language governing permissions and\n  limitations under the license.\n--\x3e\n\x3c!-- note:  a "server" is not itself a "container", so you may not\n     define subcomponents such as "valves" at this level.\n     documentation at /docs/config/server.html\n --\x3e\n<server port="8005" shutdown="shutdown">\n    <listener classname="org.apache.catalina.startup.versionloggerlistener"/>\n    \x3c!-- security listener. documentation at /docs/config/listeners.html\n    <listener classname="org.apache.catalina.security.securitylistener" />\n    --\x3e\n    \x3c!--apr library loader. documentation at /docs/apr.html --\x3e\n    <listener classname="org.apache.catalina.core.aprlifecyclelistener" sslengine="on"/>\n    \x3c!-- prevent memory leaks due to use of particular java/javax apis--\x3e\n    <listener classname="org.apache.catalina.core.jrememoryleakpreventionlistener"/>\n    <listener classname="org.apache.catalina.mbeans.globalresourceslifecyclelistener"/>\n    <listener classname="org.apache.catalina.core.threadlocalleakpreventionlistener"/>\n\n    \x3c!-- global jndi resources\n         documentation at /docs/jndi-resources-howto.html\n    --\x3e\n    <globalnamingresources>\n        \x3c!-- editable user database that can also be used by\n             userdatabaserealm to authenticate users\n        --\x3e\n        <resource name="userdatabase" auth="container"\n                  type="org.apache.catalina.userdatabase"\n                  description="user database that can be updated and saved"\n                  factory="org.apache.catalina.users.memoryuserdatabasefactory"\n                  pathname="conf/tomcat-users.xml"/>\n    </globalnamingresources>\n\n    \x3c!-- a "service" is a collection of one or more "connectors" that share\n         a single "container" note:  a "service" is not itself a "container",\n         so you may not define subcomponents such as "valves" at this level.\n         documentation at /docs/config/service.html\n     --\x3e\n    <service name="catalina">\n\n        \x3c!--the connectors can use a shared executor, you can define one or more named thread pools--\x3e\n        \x3c!--\n        <executor name="tomcatthreadpool" nameprefix="catalina-exec-"\n            maxthreads="150" minsparethreads="4"/>\n        --\x3e\n\n\n        \x3c!-- a "connector" represents an endpoint by which requests are received\n             and responses are returned. documentation at :\n             java http connector: /docs/config/http.html (blocking & non-blocking)\n             java ajp  connector: /docs/config/ajp.html\n             apr (http/ajp) connector: /docs/apr.html\n             define a non-ssl/tls http/1.1 connector on port 8080\n        --\x3e\n        <connector port="8080" protocol="http/1.1"\n                   connectiontimeout="20000"\n                   redirectport="8443" uriencoding="gbk"/>\n        \x3c!-- a "connector" using the shared thread pool--\x3e\n        \x3c!--\n        <connector executor="tomcatthreadpool"\n                   port="8080" protocol="http/1.1"\n                   connectiontimeout="20000"\n                   redirectport="8443" />\n        --\x3e\n        \x3c!-- define a ssl/tls http/1.1 connector on port 8443\n             this connector uses the nio implementation that requires the jsse\n             style configuration. when using the apr/native implementation, the\n             openssl style configuration is required as described in the apr/native\n             documentation --\x3e\n        \x3c!--\n        <connector port="8443" protocol="org.apache.coyote.http11.http11nioprotocol"\n                   maxthreads="150" sslenabled="true" scheme="https" secure="true"\n                   clientauth="false" sslprotocol="tls" />\n        --\x3e\n\n        \x3c!-- define an ajp 1.3 connector on port 8009 --\x3e\n        <connector port="8009" protocol="ajp/1.3" redirectport="8443"/>\n\n\n        \x3c!-- an engine represents the entry point (within catalina) that processes\n             every request.  the engine implementation for tomcat stand alone\n             analyzes the http headers included with the request, and passes them\n             on to the appropriate host (virtual host).\n             documentation at /docs/config/engine.html --\x3e\n\n        \x3c!-- you should set jvmroute to support load-balancing via ajp ie :\n        <engine name="catalina" defaulthost="localhost" jvmroute="jvm1">\n        --\x3e\n        <engine name="catalina" defaulthost="localhost">\n\n            \x3c!--for clustering, please take a look at documentation at:\n                /docs/cluster-howto.html  (simple how to)\n                /docs/config/cluster.html (reference documentation) --\x3e\n            \x3c!--\n            <cluster classname="org.apache.catalina.ha.tcp.simpletcpcluster"/>\n            --\x3e\n\n            \x3c!-- use the lockoutrealm to prevent attempts to guess user passwords\n                 via a brute-force attack --\x3e\n            <realm classname="org.apache.catalina.realm.lockoutrealm">\n                \x3c!-- this realm uses the userdatabase configured in the global jndi\n                     resources under the key "userdatabase".  any edits\n                     that are performed against this userdatabase are immediately\n                     available for use by the realm.  --\x3e\n                <realm classname="org.apache.catalina.realm.userdatabaserealm"\n                       resourcename="userdatabase"/>\n            </realm>\n\n            <host name="localhost" appbase="webapps"\n                  unpackwars="true" autodeploy="true">\n\n                \x3c!-- singlesignon valve, share authentication between web applications\n                     documentation at: /docs/config/valve.html --\x3e\n                \x3c!--\n                <valve classname="org.apache.catalina.authenticator.singlesignon" />\n                --\x3e\n\n                \x3c!-- access log processes all example.\n                     documentation at: /docs/config/valve.html\n                     note: the pattern used is equivalent to using pattern="common" --\x3e\n                <valve classname="org.apache.catalina.valves.accesslogvalve" directory="logs"\n                       prefix="localhost_access_log" suffix=".txt"\n                       pattern="%h %l %u %t &quot;%r&quot; %s %b"/>\n\n            </host>\n        </engine>\n    </service>\n</server>\n\n\n----------------------------------------\n\n\n# docker compose安装tomcat\n\n\n# 1.创建yml文件\n\ndocker-compose-tomcat.yml\n\nversion: \'3.3\'\nservices:\n  tomcat:\n    image: tomcat\n    container_name: tomcat\n    ports:\n      - "8080:8080"\n    environment:\n      tz: asia/shanghai\n    privileged: true\n    volumes:\n      - /home/docker/tomcat/webapps:/usr/local/tomcat/webapps/\n      - /home/docker/tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml\n      - /home/docker/tomcat/logs:/usr/local/tomcat/logs/\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-tomcat.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',charsets:{cjk:!0}},{title:"Docker安装Gitlab",frontmatter:{title:"Docker安装Gitlab",date:"2022-02-07T15:38:16.000Z",permalink:"/pages/8b837f/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","gitlab"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/04.Docker%E5%AE%89%E8%A3%85Gitlab.html",relativePath:"学习资料/01.centos7/05.docker安装服务/04.Docker安装Gitlab.md",key:"v-4a0974f9",path:"/pages/8b837f/",headers:[{level:2,title:"docker安装gitlab",slug:"docker安装gitlab",normalizedTitle:"docker安装gitlab",charIndex:13},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:32},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:68},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:110},{level:2,title:"docker compose安装gitlab",slug:"docker-compose安装gitlab",normalizedTitle:"docker compose安装gitlab",charIndex:902},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:929},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:1392}],headersStr:"docker安装gitlab 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装gitlab 1.创建yml文件 2.运行",content:"Gitlab官网\n\n\n# docker安装gitlab\n\n\n# 1.获取镜像列表\n\ndocker search gitlab\n\n\n\n# 2.拉取镜像\n\ndocker pull gitlab/gitlab-ce\n\n\n\n# 3.运行\n\ndocker run -d  -p 443:443 -p 9980:80 -p 9922:22 --name gitlab --restart always -v /home/dokcer/gitlab/config:/etc/gitlab -v /home/docker/gitlab/logs:/var/log/gitlab -v /home/docker/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n> --restart always：自动重启\n\ngitlab.rb\n\nexternal_url 'http://192.168.3.119:9980'\n\ngitlab_rails['gitlab_ssh_host'] = '192.168.3.119'\n\ngitlab_rails['gitlab_shell_ssh_port'] = 9922\n\ngitlab_rails['time_zone'] = 'Asia/Shanghai'\n\ngitlab_rails['gravatar_plain_url'] = 'http://www.gravatar.com/avatar/%{hash}?s=%{size}&d=identicon'\n\n# gitlab_rails['gravatar_ssl_url'] = 'https://secure.gravatar.com/avatar/%{hash}?s=%{size}&d=identicon'\n\n\n----------------------------------------\n\n\n# docker compose安装gitlab\n\n\n# 1.创建yml文件\n\ndocker-compose-gitlab.yml\n\nversion: '3.3'\nservices:\n  gitlab:\n    image: gitlab/gitlab-ce\n    container_name: gitlab\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      - \"222:22\"\n    volumes:\n      - /home/docker/gitlab/config/gitlab.rb:/etc/gitlab/gitlab.rb\n      #- /home/docker/gitlab/config/gitlab-secrets.json:/etc/gitlab/gitlab-secrets.json\n      - /home/docker/gitlab/data/:/var/opt/gitlab\n      - /home/docker/gitlab/logs/:/var/log/gitlab\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-gitlab.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",normalizedContent:"gitlab官网\n\n\n# docker安装gitlab\n\n\n# 1.获取镜像列表\n\ndocker search gitlab\n\n\n\n# 2.拉取镜像\n\ndocker pull gitlab/gitlab-ce\n\n\n\n# 3.运行\n\ndocker run -d  -p 443:443 -p 9980:80 -p 9922:22 --name gitlab --restart always -v /home/dokcer/gitlab/config:/etc/gitlab -v /home/docker/gitlab/logs:/var/log/gitlab -v /home/docker/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n> --restart always：自动重启\n\ngitlab.rb\n\nexternal_url 'http://192.168.3.119:9980'\n\ngitlab_rails['gitlab_ssh_host'] = '192.168.3.119'\n\ngitlab_rails['gitlab_shell_ssh_port'] = 9922\n\ngitlab_rails['time_zone'] = 'asia/shanghai'\n\ngitlab_rails['gravatar_plain_url'] = 'http://www.gravatar.com/avatar/%{hash}?s=%{size}&d=identicon'\n\n# gitlab_rails['gravatar_ssl_url'] = 'https://secure.gravatar.com/avatar/%{hash}?s=%{size}&d=identicon'\n\n\n----------------------------------------\n\n\n# docker compose安装gitlab\n\n\n# 1.创建yml文件\n\ndocker-compose-gitlab.yml\n\nversion: '3.3'\nservices:\n  gitlab:\n    image: gitlab/gitlab-ce\n    container_name: gitlab\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      - \"222:22\"\n    volumes:\n      - /home/docker/gitlab/config/gitlab.rb:/etc/gitlab/gitlab.rb\n      #- /home/docker/gitlab/config/gitlab-secrets.json:/etc/gitlab/gitlab-secrets.json\n      - /home/docker/gitlab/data/:/var/opt/gitlab\n      - /home/docker/gitlab/logs/:/var/log/gitlab\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-gitlab.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",charsets:{cjk:!0}},{title:"Docker安装Ftp",frontmatter:{title:"Docker安装Ftp",date:"2022-02-07T16:44:30.000Z",permalink:"/pages/02a6d1/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","ftp"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/05.Docker%E5%AE%89%E8%A3%85Ftp.html",relativePath:"学习资料/01.centos7/05.docker安装服务/05.Docker安装Ftp.md",key:"v-035690b5",path:"/pages/02a6d1/",headers:[{level:2,title:"docker安装ftp",slug:"docker安装ftp",normalizedTitle:"docker安装ftp",charIndex:2},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:18},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:54},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:93},{level:2,title:"docker compose安装ftp",slug:"docker-compose安装ftp",normalizedTitle:"docker compose安装ftp",charIndex:462},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:486},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:888}],headersStr:"docker安装ftp 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装ftp 1.创建yml文件 2.运行",content:'# docker安装ftp\n\n\n# 1.获取镜像列表\n\ndocker search vsftpd\n\n\n\n# 2.拉取镜像\n\ndocker pull fauria/vsftpd\n\n\n\n# 3.运行\n\ndocker run -d  -p 20:20 -p 21:21 -p 21100-21110:21100-21110 --name ftp -e FTP_USER=ftp -e FTP_PASS=ftp -e PASV_ADDRESS=192.168.3.131 -e PASV_MIN_POST=21100 -e PASV_MAX_POST=21110 -v /home/docker/nginx/:/home/vsftpd fauria/vsftpd:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\n----------------------------------------\n\n\n# docker compose安装ftp\n\n\n# 1.创建yml文件\n\ndocker-compose-ftp.yml\n\nversion: \'3.3\'\nservices:\n  ftp:\n    image: fauria/vsftpd\n    container_name: ftp\n    ports:\n      - "20:20"\n      - "21:21"\n      - "21100-21110:21100-21110"\n    volumes:\n      - /home/docker/nginx/:/home/vsftpd\n    environment:\n      - FTP_USER=ftp\n      - FTP_PASS=ftp\n      - PASV_ADDRESS=192.168.3.131\n      - PASV_MIN_POST=21100\n      - PASV_MAX_POST=21110\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-ftp.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',normalizedContent:'# docker安装ftp\n\n\n# 1.获取镜像列表\n\ndocker search vsftpd\n\n\n\n# 2.拉取镜像\n\ndocker pull fauria/vsftpd\n\n\n\n# 3.运行\n\ndocker run -d  -p 20:20 -p 21:21 -p 21100-21110:21100-21110 --name ftp -e ftp_user=ftp -e ftp_pass=ftp -e pasv_address=192.168.3.131 -e pasv_min_post=21100 -e pasv_max_post=21110 -v /home/docker/nginx/:/home/vsftpd fauria/vsftpd:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\n----------------------------------------\n\n\n# docker compose安装ftp\n\n\n# 1.创建yml文件\n\ndocker-compose-ftp.yml\n\nversion: \'3.3\'\nservices:\n  ftp:\n    image: fauria/vsftpd\n    container_name: ftp\n    ports:\n      - "20:20"\n      - "21:21"\n      - "21100-21110:21100-21110"\n    volumes:\n      - /home/docker/nginx/:/home/vsftpd\n    environment:\n      - ftp_user=ftp\n      - ftp_pass=ftp\n      - pasv_address=192.168.3.131\n      - pasv_min_post=21100\n      - pasv_max_post=21110\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-ftp.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',charsets:{cjk:!0}},{title:"Docker安装Trojan",frontmatter:{title:"Docker安装Trojan",date:"2022-02-08T10:32:32.000Z",permalink:"/pages/7b6292/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","trojan"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/06.Docker%E5%AE%89%E8%A3%85Trojan.html",relativePath:"学习资料/01.centos7/05.docker安装服务/06.Docker安装Trojan.md",key:"v-9a2f34ce",path:"/pages/7b6292/",headers:[{level:2,title:"docker安装trojan",slug:"docker安装trojan",normalizedTitle:"docker安装trojan",charIndex:2},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:21},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:57},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:99},{level:2,title:"docker compose安装trojan",slug:"docker-compose安装trojan",normalizedTitle:"docker compose安装trojan",charIndex:1155},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:1182},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:1463}],headersStr:"docker安装trojan 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装trojan 1.创建yml文件 2.运行",content:'# docker安装trojan\n\n\n# 1.获取镜像列表\n\ndocker search trojan\n\n\n\n# 2.拉取镜像\n\ndocker pull trojangfw/trojan\n\n\n\n# 3.运行\n\ndocker run -d  -p 1080:1080 --name trojan -v /home/docker/trojan/cert:/usr/local/etc/trojan/cert/ -v /home/docker/trojan/config:/config trojangfw/trojan:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nconfig.json\n\n{\n    "run_type": "client",\n    "local_addr": "trojan",\n    "local_port": 1080,\n    "remote_addr": "www.blackbodytest.com",\n    "remote_port": 443,\n    "password": [\n        "6842eb80"\n    ],\n    "log_level": 1,\n    "ssl": {\n        "verify": true,\n        "verify_hostname": true,\n        "cert": "/usr/local/etc/trojan/cert/fullchain.cer",\n        "cipher_tls13":"TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384",\n"sni": "",\n        "alpn": [\n            "h2",\n            "http/1.1"\n        ],\n        "reuse_session": true,\n        "session_ticket": false,\n        "curves": ""\n    },\n    "tcp": {\n        "no_delay": true,\n        "keep_alive": true,\n        "fast_open": false,\n        "fast_open_qlen": 20\n    }\n}\n\n\n----------------------------------------\n\n\n# docker compose安装trojan\n\n\n# 1.创建yml文件\n\ndocker-compose-trojan.yml\n\nversion: \'3.3\'\nservices:\n  trojan:\n    image: trojangfw/trojan\n    container_name: trojan\n    ports:\n      - "1080:1080"\n    volumes:\n      - /home/docker/trojan/cert:/usr/local/etc/trojan/cert/\n      - /home/docker/trojan/config:/config\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-trojan.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',normalizedContent:'# docker安装trojan\n\n\n# 1.获取镜像列表\n\ndocker search trojan\n\n\n\n# 2.拉取镜像\n\ndocker pull trojangfw/trojan\n\n\n\n# 3.运行\n\ndocker run -d  -p 1080:1080 --name trojan -v /home/docker/trojan/cert:/usr/local/etc/trojan/cert/ -v /home/docker/trojan/config:/config trojangfw/trojan:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nconfig.json\n\n{\n    "run_type": "client",\n    "local_addr": "trojan",\n    "local_port": 1080,\n    "remote_addr": "www.blackbodytest.com",\n    "remote_port": 443,\n    "password": [\n        "6842eb80"\n    ],\n    "log_level": 1,\n    "ssl": {\n        "verify": true,\n        "verify_hostname": true,\n        "cert": "/usr/local/etc/trojan/cert/fullchain.cer",\n        "cipher_tls13":"tls_aes_128_gcm_sha256:tls_chacha20_poly1305_sha256:tls_aes_256_gcm_sha384",\n"sni": "",\n        "alpn": [\n            "h2",\n            "http/1.1"\n        ],\n        "reuse_session": true,\n        "session_ticket": false,\n        "curves": ""\n    },\n    "tcp": {\n        "no_delay": true,\n        "keep_alive": true,\n        "fast_open": false,\n        "fast_open_qlen": 20\n    }\n}\n\n\n----------------------------------------\n\n\n# docker compose安装trojan\n\n\n# 1.创建yml文件\n\ndocker-compose-trojan.yml\n\nversion: \'3.3\'\nservices:\n  trojan:\n    image: trojangfw/trojan\n    container_name: trojan\n    ports:\n      - "1080:1080"\n    volumes:\n      - /home/docker/trojan/cert:/usr/local/etc/trojan/cert/\n      - /home/docker/trojan/config:/config\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-trojan.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',charsets:{cjk:!0}},{title:"Docker安装V2ray",frontmatter:{title:"Docker安装V2ray",date:"2022-02-08T10:35:59.000Z",permalink:"/pages/a7c015/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","v2ray"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/07.Docker%E5%AE%89%E8%A3%85V2ray.html",relativePath:"学习资料/01.centos7/05.docker安装服务/07.Docker安装V2ray.md",key:"v-7e99b8ce",path:"/pages/a7c015/",headers:[{level:2,title:"docker安装v2ray",slug:"docker安装v2ray",normalizedTitle:"docker安装v2ray",charIndex:2},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:20},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:55},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:95},{level:2,title:"docker compose安装v2ray",slug:"docker-compose安装v2ray",normalizedTitle:"docker compose安装v2ray",charIndex:2912},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:2938},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:3172}],headersStr:"docker安装v2ray 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装v2ray 1.创建yml文件 2.运行",content:'# docker安装v2ray\n\n\n# 1.获取镜像列表\n\ndocker search v2ray\n\n\n\n# 2.拉取镜像\n\ndocker pull v2ray/official\n\n\n\n# 3.运行\n\ndocker run -d  -p 1081:1081 --name v2ray -v /home/docker/v2ray/config.json:/etc/v2ray/config.json v2ray/official:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nconfig.json\n\n{\n  "policy": {\n    "system": {\n      "statsInboundUplink": true,\n      "statsInboundDownlink": true\n    }\n  },\n  "log": {\n    "access": "",\n    "error": "",\n    "loglevel": "warning"\n  },\n  "inbounds": [\n    {\n      "tag": "proxy",\n      "port": "1081",\n      "listen": "0.0.0.0",\n      "protocol": "socks",\n      "sniffing": {\n        "enabled": true,\n        "destOverride": [\n          "http",\n          "tls"\n        ]\n      },\n      "settings": {\n        "auth": "noauth",\n        "udp": true,\n        "ip": null,\n        "address": null,\n        "clients": null\n      },\n      "streamSettings": null\n    },\n    {\n      "tag": "api",\n      "port": 53407,\n      "listen": "127.0.0.1",\n      "protocol": "dokodemo-door",\n      "sniffing": null,\n      "settings": {\n        "auth": null,\n        "udp": false,\n        "ip": null,\n        "address": "127.0.0.1",\n        "clients": null\n      },\n      "streamSettings": null\n    }\n  ],\n  "outbounds": [\n    {\n      "tag": "proxy",\n      "protocol": "socks",\n      "settings": {\n        "vnext": null,\n        "servers": [\n          {\n            "email": null,\n            "address": "trojan",\n            "method": null,\n            "ota": false,\n            "password": null,\n            "port": 1080,\n            "level": 1,\n            "users": null\n          }\n        ],\n        "response": null\n      },\n      "streamSettings": {\n        "network": "tcp",\n        "security": null,\n        "tlsSettings": null,\n        "tcpSettings": null,\n        "kcpSettings": null,\n        "wsSettings": null,\n        "httpSettings": null,\n        "quicSettings": null\n      },\n      "mux": {\n        "enabled": false,\n        "concurrency": -1\n      }\n    },\n    {\n      "tag": "direct",\n      "protocol": "freedom",\n      "settings": {\n        "vnext": null,\n        "servers": null,\n        "response": null\n      },\n      "streamSettings": null,\n      "mux": null\n    },\n    {\n      "tag": "block",\n      "protocol": "blackhole",\n      "settings": {\n        "vnext": null,\n        "servers": null,\n        "response": {\n          "type": "http"\n        }\n      },\n      "streamSettings": null,\n      "mux": null\n    }\n  ],\n  "stats": {},\n  "api": {\n    "tag": "api",\n    "services": [\n      "StatsService"\n    ]\n  },\n  "dns": null,\n  "routing": {\n    "domainStrategy": "IPIfNonMatch",\n    "rules": [\n      {\n        "type": "field",\n        "port": null,\n        "inboundTag": [\n          "api"\n        ],\n        "outboundTag": "api",\n        "ip": null,\n        "domain": null\n      }\n    ]\n  }\n}\n\n\n----------------------------------------\n\n\n# docker compose安装v2ray\n\n\n# 1.创建yml文件\n\ndocker-compose-v2ray.yml\n\nversion: \'3.3\'\nservices:\n  v2ray:\n    image: v2ray/official\n    container_name: v2ray\n    ports:\n      - "1081:1081"\n    volumes:\n      - /home/docker/v2ray/config.json:/etc/v2ray/config.json\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-v2ray.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',normalizedContent:'# docker安装v2ray\n\n\n# 1.获取镜像列表\n\ndocker search v2ray\n\n\n\n# 2.拉取镜像\n\ndocker pull v2ray/official\n\n\n\n# 3.运行\n\ndocker run -d  -p 1081:1081 --name v2ray -v /home/docker/v2ray/config.json:/etc/v2ray/config.json v2ray/official:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nconfig.json\n\n{\n  "policy": {\n    "system": {\n      "statsinbounduplink": true,\n      "statsinbounddownlink": true\n    }\n  },\n  "log": {\n    "access": "",\n    "error": "",\n    "loglevel": "warning"\n  },\n  "inbounds": [\n    {\n      "tag": "proxy",\n      "port": "1081",\n      "listen": "0.0.0.0",\n      "protocol": "socks",\n      "sniffing": {\n        "enabled": true,\n        "destoverride": [\n          "http",\n          "tls"\n        ]\n      },\n      "settings": {\n        "auth": "noauth",\n        "udp": true,\n        "ip": null,\n        "address": null,\n        "clients": null\n      },\n      "streamsettings": null\n    },\n    {\n      "tag": "api",\n      "port": 53407,\n      "listen": "127.0.0.1",\n      "protocol": "dokodemo-door",\n      "sniffing": null,\n      "settings": {\n        "auth": null,\n        "udp": false,\n        "ip": null,\n        "address": "127.0.0.1",\n        "clients": null\n      },\n      "streamsettings": null\n    }\n  ],\n  "outbounds": [\n    {\n      "tag": "proxy",\n      "protocol": "socks",\n      "settings": {\n        "vnext": null,\n        "servers": [\n          {\n            "email": null,\n            "address": "trojan",\n            "method": null,\n            "ota": false,\n            "password": null,\n            "port": 1080,\n            "level": 1,\n            "users": null\n          }\n        ],\n        "response": null\n      },\n      "streamsettings": {\n        "network": "tcp",\n        "security": null,\n        "tlssettings": null,\n        "tcpsettings": null,\n        "kcpsettings": null,\n        "wssettings": null,\n        "httpsettings": null,\n        "quicsettings": null\n      },\n      "mux": {\n        "enabled": false,\n        "concurrency": -1\n      }\n    },\n    {\n      "tag": "direct",\n      "protocol": "freedom",\n      "settings": {\n        "vnext": null,\n        "servers": null,\n        "response": null\n      },\n      "streamsettings": null,\n      "mux": null\n    },\n    {\n      "tag": "block",\n      "protocol": "blackhole",\n      "settings": {\n        "vnext": null,\n        "servers": null,\n        "response": {\n          "type": "http"\n        }\n      },\n      "streamsettings": null,\n      "mux": null\n    }\n  ],\n  "stats": {},\n  "api": {\n    "tag": "api",\n    "services": [\n      "statsservice"\n    ]\n  },\n  "dns": null,\n  "routing": {\n    "domainstrategy": "ipifnonmatch",\n    "rules": [\n      {\n        "type": "field",\n        "port": null,\n        "inboundtag": [\n          "api"\n        ],\n        "outboundtag": "api",\n        "ip": null,\n        "domain": null\n      }\n    ]\n  }\n}\n\n\n----------------------------------------\n\n\n# docker compose安装v2ray\n\n\n# 1.创建yml文件\n\ndocker-compose-v2ray.yml\n\nversion: \'3.3\'\nservices:\n  v2ray:\n    image: v2ray/official\n    container_name: v2ray\n    ports:\n      - "1081:1081"\n    volumes:\n      - /home/docker/v2ray/config.json:/etc/v2ray/config.json\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-v2ray.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',charsets:{cjk:!0}},{title:"Docker安装Frp",frontmatter:{title:"Docker安装Frp",date:"2022-02-08T10:38:13.000Z",permalink:"/pages/c1ed84/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","frp"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/08.Docker%E5%AE%89%E8%A3%85Frp.html",relativePath:"学习资料/01.centos7/05.docker安装服务/08.Docker安装Frp.md",key:"v-f18c332a",path:"/pages/c1ed84/",headers:[{level:2,title:"docker安装frp",slug:"docker安装frp",normalizedTitle:"docker安装frp",charIndex:10},{level:3,title:"服务端",slug:"服务端",normalizedTitle:"服务端",charIndex:26},{level:3,title:"客户端",slug:"客户端",normalizedTitle:"客户端",charIndex:458},{level:2,title:"docker compose安装frp",slug:"docker-compose安装frp",normalizedTitle:"docker compose安装frp",charIndex:962},{level:3,title:"服务端",slug:"服务端-2",normalizedTitle:"服务端",charIndex:26},{level:3,title:"客户端",slug:"客户端-2",normalizedTitle:"客户端",charIndex:458}],headersStr:"docker安装frp 服务端 客户端 docker compose安装frp 服务端 客户端",content:"Frp官网\n\n\n# docker安装frp\n\n\n# 服务端\n\n# 1.获取镜像列表\n\ndocker search frp\n\n\n# 2.拉取镜像\n\ndocker pull snowdreamtech/frps\n\n\n# 3.运行\n\ndocker run -d  -p 7000:7000 --name frps -v /home/docker/frp/frps.ini:/etc/frp/frps.ini snowdreamtech/frps:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nfrps.ini\n\n[common]\nbind_port = 7000\nvhost_http_port = 6001 \ntoken = token\ndashboard_port = 7272\ndashboard_user = admin\ndashboard_pwd = password\n\n\n\n# 客户端\n\n# 1.获取镜像列表\n\ndocker search frp\n\n\n# 2.拉取镜像\n\ndocker pull snowdreamtech/frpc\n\n\n# 3.运行\n\ndocker run -d  -p 6000:6000 --name frpc -v /home/docker/frp/frpc.ini:/etc/frp/frpc.ini snowdreamtech/frpc:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nfrpc.ini\n\n[common]\nserver_addr = 192.168.3.119 \nserver_port = 7000\ntoken = token\n\n[gitlab_admin]\ntype = http\nlocal_ip = gitlab\nlocal_port = 9980\ncustom_domains = xxx.xxx.com\n\n\n----------------------------------------\n\n\n# docker compose安装frp\n\n\n# 服务端\n\n# 1.创建yml文件\n\ndocker-compose-frps.yml\n\nversion: '3.3'\nservices:\n  frp:\n    image: snowdreamtech/frps\n    container_name: frps\n    ports:\n      - \"7000:7000\"\n    volumes:\n      - /home/docker/frp/frps.ini:/etc/frp/frps.ini\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-frps.yml up -d\n\n\n\n# 客户端\n\n# 1.创建yml文件\n\ndocker-compose-frpc.yml\n\nversion: '3.3'\nservices:\n  frp:\n    image: snowdreamtech/frpc\n    container_name: frpc\n    ports:\n      - \"6000:6000\"\n    volumes:\n      - /home/docker/frp/frpc.ini:/etc/frp/frpc.ini\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-frpc.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",normalizedContent:"frp官网\n\n\n# docker安装frp\n\n\n# 服务端\n\n# 1.获取镜像列表\n\ndocker search frp\n\n\n# 2.拉取镜像\n\ndocker pull snowdreamtech/frps\n\n\n# 3.运行\n\ndocker run -d  -p 7000:7000 --name frps -v /home/docker/frp/frps.ini:/etc/frp/frps.ini snowdreamtech/frps:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nfrps.ini\n\n[common]\nbind_port = 7000\nvhost_http_port = 6001 \ntoken = token\ndashboard_port = 7272\ndashboard_user = admin\ndashboard_pwd = password\n\n\n\n# 客户端\n\n# 1.获取镜像列表\n\ndocker search frp\n\n\n# 2.拉取镜像\n\ndocker pull snowdreamtech/frpc\n\n\n# 3.运行\n\ndocker run -d  -p 6000:6000 --name frpc -v /home/docker/frp/frpc.ini:/etc/frp/frpc.ini snowdreamtech/frpc:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nfrpc.ini\n\n[common]\nserver_addr = 192.168.3.119 \nserver_port = 7000\ntoken = token\n\n[gitlab_admin]\ntype = http\nlocal_ip = gitlab\nlocal_port = 9980\ncustom_domains = xxx.xxx.com\n\n\n----------------------------------------\n\n\n# docker compose安装frp\n\n\n# 服务端\n\n# 1.创建yml文件\n\ndocker-compose-frps.yml\n\nversion: '3.3'\nservices:\n  frp:\n    image: snowdreamtech/frps\n    container_name: frps\n    ports:\n      - \"7000:7000\"\n    volumes:\n      - /home/docker/frp/frps.ini:/etc/frp/frps.ini\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-frps.yml up -d\n\n\n\n# 客户端\n\n# 1.创建yml文件\n\ndocker-compose-frpc.yml\n\nversion: '3.3'\nservices:\n  frp:\n    image: snowdreamtech/frpc\n    container_name: frpc\n    ports:\n      - \"6000:6000\"\n    volumes:\n      - /home/docker/frp/frpc.ini:/etc/frp/frpc.ini\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-frpc.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",charsets:{cjk:!0}},{title:"Docker安装Redis",frontmatter:{title:"Docker安装Redis",date:"2022-02-08T11:14:34.000Z",permalink:"/pages/0000a6/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","redis"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/09.Docker%E5%AE%89%E8%A3%85Redis.html",relativePath:"学习资料/01.centos7/05.docker安装服务/09.Docker安装Redis.md",key:"v-e80e330a",path:"/pages/0000a6/",headers:[{level:2,title:"docker安装redis",slug:"docker安装redis",normalizedTitle:"docker安装redis",charIndex:12},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:30},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:65},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:96},{level:2,title:"docker compose安装redis",slug:"docker-compose安装redis",normalizedTitle:"docker compose安装redis",charIndex:353},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:379},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:682}],headersStr:"docker安装redis 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装redis 1.创建yml文件 2.运行",content:"Redis官网\n\n\n# docker安装redis\n\n\n# 1.获取镜像列表\n\ndocker search redis\n\n\n\n# 2.拉取镜像\n\ndocker pull redis\n\n\n\n# 3.运行\n\ndocker run -d  -p 6379:6379 --name redis -v /home/docker/redis/data:/data -v /home/docker/redis/conf:/etc/conf redis:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\n----------------------------------------\n\n\n# docker compose安装redis\n\n\n# 1.创建yml文件\n\ndocker-compose-redis.yml\n\nversion: '3.3'\nservices:\n  redis:\n    image: redis\n    container_name: redis\n    ports:\n      - 6379:6379\n    command: /usr/local/bin/redis-server /etc/conf/redis.conf\n    volumes:\n      - /home/docker/redis/data:/data\n      - /home/docker/redis/conf:/etc/conf\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-redis.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",normalizedContent:"redis官网\n\n\n# docker安装redis\n\n\n# 1.获取镜像列表\n\ndocker search redis\n\n\n\n# 2.拉取镜像\n\ndocker pull redis\n\n\n\n# 3.运行\n\ndocker run -d  -p 6379:6379 --name redis -v /home/docker/redis/data:/data -v /home/docker/redis/conf:/etc/conf redis:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\n----------------------------------------\n\n\n# docker compose安装redis\n\n\n# 1.创建yml文件\n\ndocker-compose-redis.yml\n\nversion: '3.3'\nservices:\n  redis:\n    image: redis\n    container_name: redis\n    ports:\n      - 6379:6379\n    command: /usr/local/bin/redis-server /etc/conf/redis.conf\n    volumes:\n      - /home/docker/redis/data:/data\n      - /home/docker/redis/conf:/etc/conf\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-redis.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",charsets:{cjk:!0}},{title:"Docker安装Nacos",frontmatter:{title:"Docker安装Nacos",date:"2022-02-08T11:17:54.000Z",permalink:"/pages/a45d98/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","nacos"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/10.Docker%E5%AE%89%E8%A3%85Nacos.html",relativePath:"学习资料/01.centos7/05.docker安装服务/10.Docker安装Nacos.md",key:"v-4fb836dd",path:"/pages/a45d98/",headers:[{level:2,title:"docker安装nacos",slug:"docker安装nacos",normalizedTitle:"docker安装nacos",charIndex:12},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:30},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:65},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:109},{level:2,title:"docker compose安装nacos",slug:"docker-compose安装nacos",normalizedTitle:"docker compose安装nacos",charIndex:409},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:435},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:1391}],headersStr:"docker安装nacos 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装nacos 1.创建yml文件 2.运行",content:"Nacos官网\n\n\n# docker安装nacos\n\n\n# 1.获取镜像列表\n\ndocker search nacos\n\n\n\n# 2.拉取镜像\n\ndocker pull nacos/nacos-server\n\n\n\n# 3.运行\n\ndocker run -d  -p 8848:8848 --name nacos -v /home/docker/nacos/data/logs:/home/nacos/logs -v /home/docker/nacos/plugins/:/home/nacos/plugins nacos/nacos-server:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\n----------------------------------------\n\n\n# docker compose安装nacos\n\n\n# 1.创建yml文件\n\ndocker-compose-nacos.yml\n\nversion: '3.3'\nservices:\n  nacos:\n    image: nacos/nacos-server                                    # 镜像`nacos/nacos-server:latest`\n    restart: always                                              # 指定容器退出后的重启策略为始终重启\n    container_name: nacos                                        # 容器名为'nacos'\n    volumes:                                                     # 数据卷挂载路径设置,将本机目录映射到容器目录\n      - /home/docker/nacos/data/logs:/home/nacos/logs\n      - /home/docker/nacos/plugins/:/home/nacos/plugins\n    # - /home/docker/nacos/conf/:/home/nacos/conf/\n    environment:                        # 设置环境变量,相当于docker run命令中的-e\n      TZ: Asia/Shanghai\n      LANG: en_US.UTF-8\n      JVM_XMX: 1g     # 设定程序运行期间最大可占用的内存大小\n      JVM_XMS: 1g     # 设定程序启动时占用内存大小\n      JVM_XMN: 512m    # 新生代大小\n      #      PREFER_HOST_MODE: hostname\n      MODE: standalone # 单机模式启动\n    ports:                              # 映射端口\n      - \"8848:8848\"\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-nacos.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",normalizedContent:"nacos官网\n\n\n# docker安装nacos\n\n\n# 1.获取镜像列表\n\ndocker search nacos\n\n\n\n# 2.拉取镜像\n\ndocker pull nacos/nacos-server\n\n\n\n# 3.运行\n\ndocker run -d  -p 8848:8848 --name nacos -v /home/docker/nacos/data/logs:/home/nacos/logs -v /home/docker/nacos/plugins/:/home/nacos/plugins nacos/nacos-server:latest\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\n----------------------------------------\n\n\n# docker compose安装nacos\n\n\n# 1.创建yml文件\n\ndocker-compose-nacos.yml\n\nversion: '3.3'\nservices:\n  nacos:\n    image: nacos/nacos-server                                    # 镜像`nacos/nacos-server:latest`\n    restart: always                                              # 指定容器退出后的重启策略为始终重启\n    container_name: nacos                                        # 容器名为'nacos'\n    volumes:                                                     # 数据卷挂载路径设置,将本机目录映射到容器目录\n      - /home/docker/nacos/data/logs:/home/nacos/logs\n      - /home/docker/nacos/plugins/:/home/nacos/plugins\n    # - /home/docker/nacos/conf/:/home/nacos/conf/\n    environment:                        # 设置环境变量,相当于docker run命令中的-e\n      tz: asia/shanghai\n      lang: en_us.utf-8\n      jvm_xmx: 1g     # 设定程序运行期间最大可占用的内存大小\n      jvm_xms: 1g     # 设定程序启动时占用内存大小\n      jvm_xmn: 512m    # 新生代大小\n      #      prefer_host_mode: hostname\n      mode: standalone # 单机模式启动\n    ports:                              # 映射端口\n      - \"8848:8848\"\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-nacos.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",charsets:{cjk:!0}},{title:"Docker安装Rabbitmq",frontmatter:{title:"Docker安装Rabbitmq",date:"2022-02-08T13:53:07.000Z",permalink:"/pages/c54468/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","rabbitmq"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/11.Docker%E5%AE%89%E8%A3%85Rabbitmq.html",relativePath:"学习资料/01.centos7/05.docker安装服务/11.Docker安装Rabbitmq.md",key:"v-4c310cce",path:"/pages/c54468/",headers:[{level:2,title:"docker安装rabbitmq",slug:"docker安装rabbitmq",normalizedTitle:"docker安装rabbitmq",charIndex:15},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:36},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:74},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:119},{level:2,title:"docker compose安装rabbitmq",slug:"docker-compose安装rabbitmq",normalizedTitle:"docker compose安装rabbitmq",charIndex:379},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:408},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:669}],headersStr:"docker安装rabbitmq 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装rabbitmq 1.创建yml文件 2.运行",content:'Rabbitmq官网\n\n\n# docker安装rabbitmq\n\n\n# 1.获取镜像列表\n\ndocker search rabbitmq\n\n\n\n# 2.拉取镜像\n\ndocker pull rabbitmq:management\n\n\n\n# 3.运行\n\ndocker run -d  -p 5672:5672 -p 15672:15672 --name rabbitmq -v /home/docker/rabbitmq/data:/var/lib/rabbitmq rabbitmq:management\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\n----------------------------------------\n\n\n# docker compose安装rabbitmq\n\n\n# 1.创建yml文件\n\ndocker-compose-rabbitmq.yml\n\nversion: \'3.3\'\nservices:\n  rabbitmq:\n    image: rabbitmq:management\n    container_name: rabbitmq\n    ports:\n      - "15672:15672"\n      - "5672:5672"\n    volumes:\n      - /home/docker/rabbitmq/data:/var/lib/rabbitmq\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-rabbitmq.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',normalizedContent:'rabbitmq官网\n\n\n# docker安装rabbitmq\n\n\n# 1.获取镜像列表\n\ndocker search rabbitmq\n\n\n\n# 2.拉取镜像\n\ndocker pull rabbitmq:management\n\n\n\n# 3.运行\n\ndocker run -d  -p 5672:5672 -p 15672:15672 --name rabbitmq -v /home/docker/rabbitmq/data:/var/lib/rabbitmq rabbitmq:management\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\n----------------------------------------\n\n\n# docker compose安装rabbitmq\n\n\n# 1.创建yml文件\n\ndocker-compose-rabbitmq.yml\n\nversion: \'3.3\'\nservices:\n  rabbitmq:\n    image: rabbitmq:management\n    container_name: rabbitmq\n    ports:\n      - "15672:15672"\n      - "5672:5672"\n    volumes:\n      - /home/docker/rabbitmq/data:/var/lib/rabbitmq\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-rabbitmq.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',charsets:{cjk:!0}},{title:"Docker安装Elasticsearch",frontmatter:{title:"Docker安装Elasticsearch",date:"2022-02-08T14:01:40.000Z",permalink:"/pages/1e85fd/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","elasticsearch"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/12.Docker%E5%AE%89%E8%A3%85Elasticsearch.html",relativePath:"学习资料/01.centos7/05.docker安装服务/12.Docker安装Elasticsearch.md",key:"v-7b4d7bc7",path:"/pages/1e85fd/",headers:[{level:2,title:"docker安装elasticsearch",slug:"docker安装elasticsearch",normalizedTitle:"docker安装elasticsearch",charIndex:20},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:46},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:89},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:134},{level:2,title:"docker compose安装elasticsearch",slug:"docker-compose安装elasticsearch",normalizedTitle:"docker compose安装elasticsearch",charIndex:677},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:711},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:1637}],headersStr:"docker安装elasticsearch 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装elasticsearch 1.创建yml文件 2.运行",content:"Elasticsearch官网\n\n\n# docker安装elasticsearch\n\n\n# 1.获取镜像列表\n\ndocker search elasticsearch\n\n\n\n# 2.拉取镜像\n\ndocker pull elasticsearch:6.4.3\n\n\n\n# 3.运行\n\ndocker run -d  -p 9200:9200 -p 9300:9300 --name elasticsearch -v /home/docker/elasticsearch/data:/usr/share/elasticsearch/data -v /home/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins -v /home/docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml elasticsearch:6.4.3\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nelasticsearch.yml\n\ncluster.name: elasticsearch\nnetwork.host: 0.0.0.0\nhttp.port: 9200\n\n\n----------------------------------------\n\n\n# docker compose安装elasticsearch\n\n\n# 1.创建yml文件\n\ndocker-compose-elasticsearch.yml\n\nversion: '3.3'\nservices:\n  elasticsearch:\n    image: elasticsearch:6.4.3\n    container_name: elasticsearch\n    privileged: true\n    environment:\n      - http.cors.enabled=true\n      - http.cors.allow-origin=*\n      - bootstrap.memory_lock=true\n      - transport.host=0.0.0.0\n      - transport.tcp.port=9300\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - network.host=0.0.0.0\n      - node.name=elasticsearch\n      - discovery.type=single-node\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n    volumes:\n      - /home/docker/elasticsearch/data:/usr/share/elasticsearch/data\n      - /home/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins\n      - /home/docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml\n    ports:\n      - 9200:9200\n      - 9300:9300\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-elasticsearch.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",normalizedContent:"elasticsearch官网\n\n\n# docker安装elasticsearch\n\n\n# 1.获取镜像列表\n\ndocker search elasticsearch\n\n\n\n# 2.拉取镜像\n\ndocker pull elasticsearch:6.4.3\n\n\n\n# 3.运行\n\ndocker run -d  -p 9200:9200 -p 9300:9300 --name elasticsearch -v /home/docker/elasticsearch/data:/usr/share/elasticsearch/data -v /home/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins -v /home/docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml elasticsearch:6.4.3\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nelasticsearch.yml\n\ncluster.name: elasticsearch\nnetwork.host: 0.0.0.0\nhttp.port: 9200\n\n\n----------------------------------------\n\n\n# docker compose安装elasticsearch\n\n\n# 1.创建yml文件\n\ndocker-compose-elasticsearch.yml\n\nversion: '3.3'\nservices:\n  elasticsearch:\n    image: elasticsearch:6.4.3\n    container_name: elasticsearch\n    privileged: true\n    environment:\n      - http.cors.enabled=true\n      - http.cors.allow-origin=*\n      - bootstrap.memory_lock=true\n      - transport.host=0.0.0.0\n      - transport.tcp.port=9300\n      - \"es_java_opts=-xms512m -xmx512m\"\n      - network.host=0.0.0.0\n      - node.name=elasticsearch\n      - discovery.type=single-node\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 65536\n        hard: 65536\n    volumes:\n      - /home/docker/elasticsearch/data:/usr/share/elasticsearch/data\n      - /home/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins\n      - /home/docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml\n    ports:\n      - 9200:9200\n      - 9300:9300\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-elasticsearch.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",charsets:{cjk:!0}},{title:"Docker安装Logstash",frontmatter:{title:"Docker安装Logstash",date:"2022-02-08T14:05:51.000Z",permalink:"/pages/8a8651/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","logstash"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/13.Docker%E5%AE%89%E8%A3%85Logstash.html",relativePath:"学习资料/01.centos7/05.docker安装服务/13.Docker安装Logstash.md",key:"v-525c82f9",path:"/pages/8a8651/",headers:[{level:2,title:"docker安装logstash",slug:"docker安装logstash",normalizedTitle:"docker安装logstash",charIndex:15},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:36},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:74},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:114},{level:2,title:"docker compose安装logstash",slug:"docker-compose安装logstash",normalizedTitle:"docker compose安装logstash",charIndex:862},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:891},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:1226}],headersStr:"docker安装logstash 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装logstash 1.创建yml文件 2.运行",content:'Logstash官网\n\n\n# docker安装logstash\n\n\n# 1.获取镜像列表\n\ndocker search logstash\n\n\n\n# 2.拉取镜像\n\ndocker pull logstash:6.4.3\n\n\n\n# 3.运行\n\ndocker run -d  -p 5044:5044 --name logstash -v /home/docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml -v /home/docker/logstash/conf.d/:/usr/share/logstash/conf.d logstash:6.4.3\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nlogstash.yml\n\n#http.host: "0.0.0.0"\n#xpack.monitoring.elasticsearch.url: http://elasticsearch:9200\npath.config: /usr/share/logstash/conf.d/*.conf\npath.logs: /usr/share/logstash/logs\n\n\nsyslog.conf\n\ninput {\n    tcp {\n        port => 5044\n        codec => "json_lines"\n    }\n}\n\noutput {\n  elasticsearch { \n    action => "index"\n    hosts => "elasticsearch:9200"\n    index => "zksc-core-logs-%{+YYYY.MM.dd}"\n }\n}\n\n\n----------------------------------------\n\n\n# docker compose安装logstash\n\n\n# 1.创建yml文件\n\ndocker-compose-logstash.yml\n\nversion: \'3.3\'\nservices:\n  logstash:\n    images: logstash:6.4.3\n    container_name: logstash\n    ports:\n      - 5044:5044\n    volumes:\n      - /home/docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml\n      - /home/docker/logstash/conf.d/:/usr/share/logstash/conf.d\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-logstash.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',normalizedContent:'logstash官网\n\n\n# docker安装logstash\n\n\n# 1.获取镜像列表\n\ndocker search logstash\n\n\n\n# 2.拉取镜像\n\ndocker pull logstash:6.4.3\n\n\n\n# 3.运行\n\ndocker run -d  -p 5044:5044 --name logstash -v /home/docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml -v /home/docker/logstash/conf.d/:/usr/share/logstash/conf.d logstash:6.4.3\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nlogstash.yml\n\n#http.host: "0.0.0.0"\n#xpack.monitoring.elasticsearch.url: http://elasticsearch:9200\npath.config: /usr/share/logstash/conf.d/*.conf\npath.logs: /usr/share/logstash/logs\n\n\nsyslog.conf\n\ninput {\n    tcp {\n        port => 5044\n        codec => "json_lines"\n    }\n}\n\noutput {\n  elasticsearch { \n    action => "index"\n    hosts => "elasticsearch:9200"\n    index => "zksc-core-logs-%{+yyyy.mm.dd}"\n }\n}\n\n\n----------------------------------------\n\n\n# docker compose安装logstash\n\n\n# 1.创建yml文件\n\ndocker-compose-logstash.yml\n\nversion: \'3.3\'\nservices:\n  logstash:\n    images: logstash:6.4.3\n    container_name: logstash\n    ports:\n      - 5044:5044\n    volumes:\n      - /home/docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml\n      - /home/docker/logstash/conf.d/:/usr/share/logstash/conf.d\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-logstash.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件',charsets:{cjk:!0}},{title:"Docker安装Kibana",frontmatter:{title:"Docker安装Kibana",date:"2022-02-08T14:08:29.000Z",permalink:"/pages/25aa1b/",categories:["学习资料","centos7","docker安装服务"],tags:["docker","kibana"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/01.centos7/05.docker%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/14.Docker%E5%AE%89%E8%A3%85Kibana.html",relativePath:"学习资料/01.centos7/05.docker安装服务/14.Docker安装Kibana.md",key:"v-0f635eb9",path:"/pages/25aa1b/",headers:[{level:2,title:"docker安装kibana",slug:"docker安装kibana",normalizedTitle:"docker安装kibana",charIndex:13},{level:3,title:"1.获取镜像列表",slug:"_1-获取镜像列表",normalizedTitle:"1.获取镜像列表",charIndex:32},{level:3,title:"2.拉取镜像",slug:"_2-拉取镜像",normalizedTitle:"2.拉取镜像",charIndex:68},{level:3,title:"3.运行",slug:"_3-运行",normalizedTitle:"3.运行",charIndex:106},{level:2,title:"docker compose安装kinaba",slug:"docker-compose安装kinaba",normalizedTitle:"docker compose安装kinaba",charIndex:531},{level:3,title:"1.创建yml文件",slug:"_1-创建yml文件",normalizedTitle:"1.创建yml文件",charIndex:558},{level:3,title:"2.运行",slug:"_2-运行",normalizedTitle:"2.运行",charIndex:814}],headersStr:"docker安装kibana 1.获取镜像列表 2.拉取镜像 3.运行 docker compose安装kinaba 1.创建yml文件 2.运行",content:"Kibana官网\n\n\n# docker安装kibana\n\n\n# 1.获取镜像列表\n\ndocker search kinaba\n\n\n\n# 2.拉取镜像\n\ndocker pull kinaba:6.4.3\n\n\n\n# 3.运行\n\ndocker run -d  -p 5601:5601 --name kibana -v /home/docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml kibana:6.4.3\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nkinaba.yml\n\nserver.name: kibana\nserver.host: \"0.0.0.0\"\nelasticsearch.url: http://elasticsearch:9200\nxpack.monitoring.ui.container.elasticsearch.enabled: true\n\n\n----------------------------------------\n\n\n# docker compose安装kinaba\n\n\n# 1.创建yml文件\n\ndocker-compose-kinaba.yml\n\nversion: '3.3'\nservices:\n  kibana:\n    image: kibana:6.4.3\n    container_name: kibana\n    ports:\n      - 5601:5601\n    volumes:\n      - /home/docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:rw\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-kinaba.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",normalizedContent:"kibana官网\n\n\n# docker安装kibana\n\n\n# 1.获取镜像列表\n\ndocker search kinaba\n\n\n\n# 2.拉取镜像\n\ndocker pull kinaba:6.4.3\n\n\n\n# 3.运行\n\ndocker run -d  -p 5601:5601 --name kibana -v /home/docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml kibana:6.4.3\n\n\n> -d：后台运行\n> -p：将容器内部端口向外映射\n> --name：命名容器名称\n> -v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录\n\nkinaba.yml\n\nserver.name: kibana\nserver.host: \"0.0.0.0\"\nelasticsearch.url: http://elasticsearch:9200\nxpack.monitoring.ui.container.elasticsearch.enabled: true\n\n\n----------------------------------------\n\n\n# docker compose安装kinaba\n\n\n# 1.创建yml文件\n\ndocker-compose-kinaba.yml\n\nversion: '3.3'\nservices:\n  kibana:\n    image: kibana:6.4.3\n    container_name: kibana\n    ports:\n      - 5601:5601\n    volumes:\n      - /home/docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:rw\n\n\n\n# 2.运行\n\ndocker-compose -f ./docker-compose-kinaba.yml up -d\n\n\n> -d：后台运行\n> -f：指定yml文件",charsets:{cjk:!0}},{title:"Docker常用命令",frontmatter:{title:"Docker常用命令",date:"2022-01-17T16:35:43.000Z",permalink:"/pages/ab63d6/",categories:["学习资料","常用命令"],tags:["docker"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/02.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/01.Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"学习资料/02.常用命令/01.Docker常用命令.md",key:"v-51306d75",path:"/pages/ab63d6/",headers:[{level:2,title:"docker常用命令",slug:"docker常用命令",normalizedTitle:"docker常用命令",charIndex:2},{level:3,title:"docker基础命令",slug:"docker基础命令",normalizedTitle:"docker基础命令",charIndex:102},{level:3,title:"docker高级命令",slug:"docker高级命令",normalizedTitle:"docker高级命令",charIndex:1155},{level:3,title:"docker教程",slug:"docker教程",normalizedTitle:"docker教程",charIndex:2661}],headersStr:"docker常用命令 docker基础命令 docker高级命令 docker教程",content:'# docker常用命令\n\n日常用的最多的是命令是\n\ndocker exec -it ${CONTAINER NAME/ID} /bin/bash                 #进入容器内\n\n\n\n# docker基础命令\n\ndocker pull ${CONTAINER NAME}                    #拉取镜像\ndocker images                                    #查看本地所有镜像\ndocker ps                                        #查看所有正在运行的容器，加-q返回id\ndocker ps -a                                     #查看所有容器，加-q返回id\ndocker rmi ${IMAGE NAME/ID}                      #删除镜像\ndocker rm ${CONTAINER NAME/ID}                   #删除容器\ndocker save ${IMAGE NAME} > ${FILE NAME}.tar     #将镜像保存成文件\ndocker load < ${FILE NAME}.tar                   #从文件加载镜像\ndocker start ${CONTAINER NAME/ID}                #运行一个以前运行过的容器\ndocker stop ${CONTAINER NAME/ID}                 #停止一个正在运行的容器\ndocker logs ${CONTAINER NAME/ID}                 #显示运行容器的日志\ndocker run...                                    #运行一个容器\n    --name ${container name}                          #设置容器名称\n    -p ${host port}:${container port}                 #映射主机和容器内的端口\n    -e ${env name}=${env value}                       #添加环境变量\n    -d                                                #后台运行\n    -v ${host folder path}:${container folder path}   #将主机目录挂在到容器内\n\n\n\n# docker高级命令\n\n# Advance use \ndocker ps -f "status=exited"                                   #显示所有退出的容器\ndocker ps -a -q                                                #显示所有容器id\ndocker ps -f "status=exited" -q                                #显示所有退出容器的id\ndocker restart $(docker ps -q)                                 #重启所有正在运行的容器\ndocker stop $(docker ps -a -q)                                 #停止所有容器\ndocker rm $(docker ps -a -q)                                   #删除所有容器\ndocker rm $(docker ps -f "status=exited" -q)                   #删除所有退出的容器\ndocker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器\ndocker start $(docker ps -a -q)                                #启动所有容器\ndocker rmi $(docker images -a -q)                              #删除所有镜像\ndocker exec -it ${CONTAINER NAME/ID} /bin/bash                 #进入容器内\ndocker exec -it ${CONTAINER NAME/ID} ping ${CONTAINER NAME/ID} #一个容器ping另外一个容器\ndocker top ${CONTAINER NAME/ID}                                #显示一个容器的top信息\ndocker stats                                                   #显示容器统计信息(正在运行)\n    docker stats -a                                            #显示所有容器的统计信息(包括没有运行的)\n    docker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次\n    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序\ndocker system \n      docker system df           #显示硬盘占用\n      docker system events       #显示容器的实时事件\n      docker system info         #显示系统信息\n      docker system prune        #清理文件\n\n\n\n# docker教程\n\n菜鸟docker教程\n\ndocker官方文档\n\n但是，许多人并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？本文就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发。\n\n\n\n# 一、环境配置的难题\n\n软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？\n\n用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。\n\n如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说："它在我的机器可以跑了"（It works on my machine），言下之意就是，其他机器很可能跑不了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。\n\n# 二、虚拟机\n\n虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。\n\n虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。\n\n（1）资源占用多\n\n虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。\n\n（2）冗余步骤多\n\n虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。\n\n（3）启动慢\n\n启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。\n\n# 三、Linux 容器\n\n由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。\n\n**Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。**或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。\n\n由于容器是进程级别的，相比虚拟机有很多优势。\n\n（1）启动快\n\n容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。\n\n（2）资源占用少\n\n容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。\n\n（3）体积小\n\n容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。\n\n总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。\n\n# 四、Docker 是什么？\n\n**Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。**它是目前最流行的 Linux 容器解决方案。\n\nDocker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。\n\n总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n# 五、Docker 的用途\n\nDocker 的主要用途，目前有三大类。\n\n**（1）提供一次性的环境。**比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。\n\n**（2）提供弹性的云服务。**因为 Docker 容器可以随开随关，很适合动态扩容和缩容。\n\n**（3）组建微服务架构。**通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。\n\n# 六、Docker 的安装\n\nDocker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。\n\nDocker CE 的安装请参考官方文档。\n\n>  * Mac\n>  * Windows\n>  * Ubuntu\n>  * Debian\n>  * CentOS\n>  * Fedora\n>  * 其他 Linux 发行版\n\n安装完成后，运行下面的命令，验证是否安装成功。\n\n> $ docker version\n> # 或者\n> $ docker info\n\nDocker 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 Docker 用户组（官方文档）。\n\n> $ sudo usermod -aG docker $USER\n\nDocker 是服务器----客户端架构。命令行运行docker命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动（官方文档）。\n\n> # service 命令的用法\n> $ sudo service docker start\n> \n> # systemctl 命令的用法\n> $ sudo systemctl start docker\n\n# 六、image 文件\n\n**Docker 把应用程序及其依赖，打包在 image 文件里面。**只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。\n\nimage 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。\n\n> # 列出本机的所有 image 文件。\n> $ docker image ls\n> \n> # 删除 image 文件\n> $ docker image rm [imageName]\n\nimage 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。\n\n为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。\n\n# 七、实例：hello world\n\n下面，我们通过最简单的 image 文件"hello world"，感受一下 Docker。\n\n需要说明的是，国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站。\n\n首先，运行下面的命令，将 image 文件从仓库抓取到本地。\n\n> $ docker image pull library/hello-world\n\n上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。\n\n由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。\n\n> $ docker image pull hello-world\n\n抓取成功以后，就可以在本机看到这个 image 文件了。\n\n> $ docker image ls\n\n现在，运行这个 image 文件。\n\n> $ docker container run hello-world\n\ndocker container run命令会从 image 文件，生成一个正在运行的容器实例。\n\n注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。\n\n如果运行成功，你会在屏幕上读到下面的输出。\n\n> $ docker container run hello-world\n> \n> Hello from Docker!\n> This message shows that your installation appears to be working correctly.\n> \n> ... ...\n\n输出这段提示以后，hello world就会停止运行，容器自动终止。\n\n有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。\n\n> $ docker container run -it ubuntu bash\n\n对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。\n\n> $ docker container kill [containID]\n\n# 八、容器文件\n\n**image 文件生成的容器实例，本身也是一个文件，称为容器文件。**也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。\n\n> # 列出本机正在运行的容器\n> $ docker container ls\n> \n> # 列出本机所有容器，包括终止运行的容器\n> $ docker container ls --all\n\n上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的docker container kill命令。\n\n终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。\n\n> $ docker container rm [containerID]\n\n运行上面的命令之后，再使用docker container ls --all命令，就会发现被删除的容器文件已经消失了。\n\n# 九、其他有用的命令\n\ndocker 的主要用法就是上面这些，此外还有几个命令，也非常有用。\n\n（1）docker container start\n\n前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。\n\n> $ docker container start [containerID]\n\n（2）docker container stop\n\n前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。\n\n> $ docker container stop [containerID]\n\n这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。\n\n（3）docker container logs\n\ndocker container logs命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。\n\n> $ docker container logs [containerID]\n\n（4）docker container exec\n\ndocker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。\n\n> $ docker container exec -it [containerID] /bin/bash\n\n（5）docker container cp\n\ndocker container cp命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。\n\n> $ docker container cp [containID]:[/path/to/file] .',normalizedContent:'# docker常用命令\n\n日常用的最多的是命令是\n\ndocker exec -it ${container name/id} /bin/bash                 #进入容器内\n\n\n\n# docker基础命令\n\ndocker pull ${container name}                    #拉取镜像\ndocker images                                    #查看本地所有镜像\ndocker ps                                        #查看所有正在运行的容器，加-q返回id\ndocker ps -a                                     #查看所有容器，加-q返回id\ndocker rmi ${image name/id}                      #删除镜像\ndocker rm ${container name/id}                   #删除容器\ndocker save ${image name} > ${file name}.tar     #将镜像保存成文件\ndocker load < ${file name}.tar                   #从文件加载镜像\ndocker start ${container name/id}                #运行一个以前运行过的容器\ndocker stop ${container name/id}                 #停止一个正在运行的容器\ndocker logs ${container name/id}                 #显示运行容器的日志\ndocker run...                                    #运行一个容器\n    --name ${container name}                          #设置容器名称\n    -p ${host port}:${container port}                 #映射主机和容器内的端口\n    -e ${env name}=${env value}                       #添加环境变量\n    -d                                                #后台运行\n    -v ${host folder path}:${container folder path}   #将主机目录挂在到容器内\n\n\n\n# docker高级命令\n\n# advance use \ndocker ps -f "status=exited"                                   #显示所有退出的容器\ndocker ps -a -q                                                #显示所有容器id\ndocker ps -f "status=exited" -q                                #显示所有退出容器的id\ndocker restart $(docker ps -q)                                 #重启所有正在运行的容器\ndocker stop $(docker ps -a -q)                                 #停止所有容器\ndocker rm $(docker ps -a -q)                                   #删除所有容器\ndocker rm $(docker ps -f "status=exited" -q)                   #删除所有退出的容器\ndocker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器\ndocker start $(docker ps -a -q)                                #启动所有容器\ndocker rmi $(docker images -a -q)                              #删除所有镜像\ndocker exec -it ${container name/id} /bin/bash                 #进入容器内\ndocker exec -it ${container name/id} ping ${container name/id} #一个容器ping另外一个容器\ndocker top ${container name/id}                                #显示一个容器的top信息\ndocker stats                                                   #显示容器统计信息(正在运行)\n    docker stats -a                                            #显示所有容器的统计信息(包括没有运行的)\n    docker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次\n    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序\ndocker system \n      docker system df           #显示硬盘占用\n      docker system events       #显示容器的实时事件\n      docker system info         #显示系统信息\n      docker system prune        #清理文件\n\n\n\n# docker教程\n\n菜鸟docker教程\n\ndocker官方文档\n\n但是，许多人并不清楚 docker 到底是什么，要解决什么问题，好处又在哪里？本文就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发。\n\n\n\n# 一、环境配置的难题\n\n软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？\n\n用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 python 应用，计算机必须有 python 引擎，还必须有各种依赖，可能还要配置环境变量。\n\n如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说："它在我的机器可以跑了"（it works on my machine），言下之意就是，其他机器很可能跑不了。\n\n环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。\n\n# 二、虚拟机\n\n虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 windows 系统里面运行 linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。\n\n虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。\n\n（1）资源占用多\n\n虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1mb，虚拟机依然需要几百 mb 的内存才能运行。\n\n（2）冗余步骤多\n\n虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。\n\n（3）启动慢\n\n启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。\n\n# 三、linux 容器\n\n由于虚拟机存在这些缺点，linux 发展出了另一种虚拟化技术：linux 容器（linux containers，缩写为 lxc）。\n\n**linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。**或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。\n\n由于容器是进程级别的，相比虚拟机有很多优势。\n\n（1）启动快\n\n容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。\n\n（2）资源占用少\n\n容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。\n\n（3）体积小\n\n容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。\n\n总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。\n\n# 四、docker 是什么？\n\n**docker 属于 linux 容器的一种封装，提供简单易用的容器使用接口。**它是目前最流行的 linux 容器解决方案。\n\ndocker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 docker，就不用担心环境问题。\n\n总体来说，docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n# 五、docker 的用途\n\ndocker 的主要用途，目前有三大类。\n\n**（1）提供一次性的环境。**比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。\n\n**（2）提供弹性的云服务。**因为 docker 容器可以随开随关，很适合动态扩容和缩容。\n\n**（3）组建微服务架构。**通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。\n\n# 六、docker 的安装\n\ndocker 是一个开源的商业产品，有两个版本：社区版（community edition，缩写为 ce）和企业版（enterprise edition，缩写为 ee）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。\n\ndocker ce 的安装请参考官方文档。\n\n>  * mac\n>  * windows\n>  * ubuntu\n>  * debian\n>  * centos\n>  * fedora\n>  * 其他 linux 发行版\n\n安装完成后，运行下面的命令，验证是否安装成功。\n\n> $ docker version\n> # 或者\n> $ docker info\n\ndocker 需要用户具有 sudo 权限，为了避免每次命令都输入sudo，可以把用户加入 docker 用户组（官方文档）。\n\n> $ sudo usermod -ag docker $user\n\ndocker 是服务器----客户端架构。命令行运行docker命令的时候，需要本机有 docker 服务。如果这项服务没有启动，可以用下面的命令启动（官方文档）。\n\n> # service 命令的用法\n> $ sudo service docker start\n> \n> # systemctl 命令的用法\n> $ sudo systemctl start docker\n\n# 六、image 文件\n\n**docker 把应用程序及其依赖，打包在 image 文件里面。**只有通过这个文件，才能生成 docker 容器。image 文件可以看作是容器的模板。docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。\n\nimage 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 ubuntu 的 image 基础上，往里面加入 apache 服务器，形成你的 image。\n\n> # 列出本机的所有 image 文件。\n> $ docker image ls\n> \n> # 删除 image 文件\n> $ docker image rm [imagename]\n\nimage 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。\n\n为了方便共享，image 文件制作完成后，可以上传到网上的仓库。docker 的官方仓库 docker hub 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。\n\n# 七、实例：hello world\n\n下面，我们通过最简单的 image 文件"hello world"，感受一下 docker。\n\n需要说明的是，国内连接 docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站。\n\n首先，运行下面的命令，将 image 文件从仓库抓取到本地。\n\n> $ docker image pull library/hello-world\n\n上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。\n\n由于 docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。\n\n> $ docker image pull hello-world\n\n抓取成功以后，就可以在本机看到这个 image 文件了。\n\n> $ docker image ls\n\n现在，运行这个 image 文件。\n\n> $ docker container run hello-world\n\ndocker container run命令会从 image 文件，生成一个正在运行的容器实例。\n\n注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。\n\n如果运行成功，你会在屏幕上读到下面的输出。\n\n> $ docker container run hello-world\n> \n> hello from docker!\n> this message shows that your installation appears to be working correctly.\n> \n> ... ...\n\n输出这段提示以后，hello world就会停止运行，容器自动终止。\n\n有些容器不会自动终止，因为提供的是服务。比如，安装运行 ubuntu 的 image，就可以在命令行体验 ubuntu 系统。\n\n> $ docker container run -it ubuntu bash\n\n对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。\n\n> $ docker container kill [containid]\n\n# 八、容器文件\n\n**image 文件生成的容器实例，本身也是一个文件，称为容器文件。**也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。\n\n> # 列出本机正在运行的容器\n> $ docker container ls\n> \n> # 列出本机所有容器，包括终止运行的容器\n> $ docker container ls --all\n\n上面命令的输出结果之中，包括容器的 id。很多地方都需要提供这个 id，比如上一节终止容器运行的docker container kill命令。\n\n终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。\n\n> $ docker container rm [containerid]\n\n运行上面的命令之后，再使用docker container ls --all命令，就会发现被删除的容器文件已经消失了。\n\n# 九、其他有用的命令\n\ndocker 的主要用法就是上面这些，此外还有几个命令，也非常有用。\n\n（1）docker container start\n\n前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件。\n\n> $ docker container start [containerid]\n\n（2）docker container stop\n\n前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 sigkill 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 sigterm 信号，然后过一段时间再发出 sigkill 信号。\n\n> $ docker container stop [containerid]\n\n这两个信号的差别是，应用程序收到 sigterm 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 sigkill 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。\n\n（3）docker container logs\n\ndocker container logs命令用来查看 docker 容器的输出，即容器里面 shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。\n\n> $ docker container logs [containerid]\n\n（4）docker container exec\n\ndocker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 shell 执行命令了。\n\n> $ docker container exec -it [containerid] /bin/bash\n\n（5）docker container cp\n\ndocker container cp命令用于从正在运行的 docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。\n\n> $ docker container cp [containid]:[/path/to/file] .',charsets:{cjk:!0}},{title:"Git常用命令",frontmatter:{title:"Git常用命令",date:"2022-01-17T16:35:43.000Z",permalink:"/pages/115b69/",categories:["学习资料","常用命令"],tags:["git"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/02.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/02.Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"学习资料/02.常用命令/02.Git常用命令.md",key:"v-333d5a73",path:"/pages/115b69/",headers:[{level:3,title:"1. 新建代码库",slug:"_1-新建代码库",normalizedTitle:"1. 新建代码库",charIndex:124},{level:3,title:"2. 配置",slug:"_2-配置",normalizedTitle:"2. 配置",charIndex:254},{level:3,title:"3. 增加/删除文件",slug:"_3-增加-删除文件",normalizedTitle:"3. 增加/删除文件",charIndex:450},{level:3,title:"4. 代码提交",slug:"_4-代码提交",normalizedTitle:"4. 代码提交",charIndex:795},{level:3,title:"5. 分支",slug:"_5-分支",normalizedTitle:"5. 分支",charIndex:1150},{level:3,title:"6.标签",slug:"_6-标签",normalizedTitle:"6.标签",charIndex:1825},{level:3,title:"7.查看信息",slug:"_7-查看信息",normalizedTitle:"7.查看信息",charIndex:2171},{level:3,title:"8.远程同步",slug:"_8-远程同步",normalizedTitle:"8.远程同步",charIndex:3107},{level:3,title:"9.撤销",slug:"_9-撤销",normalizedTitle:"9.撤销",charIndex:3467},{level:3,title:"10.其他",slug:"_10-其他",normalizedTitle:"10.其他",charIndex:4033}],headersStr:"1. 新建代码库 2. 配置 3. 增加/删除文件 4. 代码提交 5. 分支 6.标签 7.查看信息 8.远程同步 9.撤销 10.其他",content:' * Workspace：工作区\n * Index / Stage：暂存区\n * Repository：仓库区（或本地仓库）\n * Remote：远程仓库\n\n----------------------------------------\n\n\n# 1. 新建代码库\n\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n\n\n# 2. 配置\n\n#显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n\n\n\n# 3. 增加/删除文件\n\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n\n\n# 4. 代码提交\n\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n\n\n# 5. 分支\n\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n\n\n# 6.标签\n\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n\n\n# 7.查看信息\n\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n\n\n# 8.远程同步\n\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n\n\n# 9.撤销\n\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n\n\n# 10.其他\n\n# 生成一个可供发布的压缩包\n$ git archive\n',normalizedContent:' * workspace：工作区\n * index / stage：暂存区\n * repository：仓库区（或本地仓库）\n * remote：远程仓库\n\n----------------------------------------\n\n\n# 1. 新建代码库\n\n# 在当前目录新建一个git代码库\n$ git init\n\n# 新建一个目录，将其初始化为git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n\n\n# 2. 配置\n\n#显示当前的git配置\n$ git config --list\n\n# 编辑git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n\n\n\n# 3. 增加/删除文件\n\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n\n\n# 4. 代码提交\n\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n\n\n# 5. 分支\n\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n\n\n# 6.标签\n\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagname]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n\n\n# 7.查看信息\n\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -s [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] head --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] head --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff head\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n\n\n# 8.远程同步\n\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n\n\n# 9.撤销\n\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的head为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前head为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n\n\n# 10.其他\n\n# 生成一个可供发布的压缩包\n$ git archive\n',charsets:{cjk:!0}},{title:"Linux常用命令",frontmatter:{title:"Linux常用命令",date:"2022-01-17T16:35:43.000Z",permalink:"/pages/33ee6d/",categories:["学习资料","常用命令"],tags:["linux"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/02.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/03.Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"学习资料/02.常用命令/03.Linux常用命令.md",key:"v-33820a93",path:"/pages/33ee6d/",headers:[{level:2,title:"Linux 常用命令",slug:"linux-常用命令",normalizedTitle:"linux 常用命令",charIndex:2},{level:3,title:"启动jar包命令",slug:"启动jar包命令",normalizedTitle:"启动jar包命令",charIndex:17},{level:3,title:"一、目录文件相关",slug:"一、目录文件相关",normalizedTitle:"一、目录文件相关",charIndex:485},{level:3,title:"二、文件内容相关",slug:"二、文件内容相关",normalizedTitle:"二、文件内容相关",charIndex:3893},{level:3,title:"三、文件查找相关",slug:"三、文件查找相关",normalizedTitle:"三、文件查找相关",charIndex:7667},{level:3,title:"四、进程系统相关",slug:"四、进程系统相关",normalizedTitle:"四、进程系统相关",charIndex:11656},{level:3,title:"五、权限相关",slug:"五、权限相关",normalizedTitle:"五、权限相关",charIndex:15072},{level:3,title:"六、磁盘空间",slug:"六、磁盘空间",normalizedTitle:"六、磁盘空间",charIndex:16275},{level:3,title:"七、时间日期相关",slug:"七、时间日期相关",normalizedTitle:"七、时间日期相关",charIndex:16982}],headersStr:"Linux 常用命令 启动jar包命令 一、目录文件相关 二、文件内容相关 三、文件查找相关 四、进程系统相关 五、权限相关 六、磁盘空间 七、时间日期相关",content:"# Linux 常用命令\n\n\n# 启动jar包命令\n\nnohup java -jar XX.jar -Xms128M -Xmx1024M -server.port=9002 XX.jar > XX.out 2>&1 &\n\n#简化版\nnohup java -jar /home/test1.jar  >/home/log/test1.txt &\n\n\nnohup：忽略SIGHUP信号,关闭shell后，进程还是存在的。\njava：启动程序\n-jar：启动类型\n-Xms128M -Xmx1024M：指定内存，Xms一般为最大内存的1/64,Xmx一般为最大内存的1/4\n-server.port=9002：指定端口\nXX.jar：jar包路径\n\n>：日志重定向，用>时清空日志文件后前面会产生空白，可以用>>\nXX.out：输出日志路径，不要日志可以输出到/dev/null\n2>&1：标准输出与错误输出\n&：后台运行，即使你用ctrl C,照样运行，但是要注意，如果你直接关掉shell后，进程同样消失。可见，&的后台并不硬（因为对SIGHUP信号不免疫）。\n\n\n\n# 一、目录文件相关\n\n# 1、ls命令\n\n就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)和查看目录信息等等。\n\n常用参数搭配：\n\nls -a 列出目录所有文件，包含以.开始的隐藏文件\nls -A 列出除.及..的其它文件\nls -r 反序排列\nls -t 以文件修改时间排序\nls -S 以文件大小排序\nls -h 以易读大小显示\nls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来\n\n\n# 2、cd 命令\n\ncd(changeDirectory) 命令语法：\n\ncd [目录名]\n\n\n实例：\n\n#进入要目录\ncd /\n\n#进入 \"home\" 目录\ncd ~\n\n#进入上一次工作路径\ncd -\n\n\n# 3、pwd 命令\n\npwd 命令用于查看当前工作目录路径。\n\n实例：\n\n#查看当前路径\npwd\n\n#查看软链接的实际路径\npwd -P\n\n\n# 4、mkdir 命令\n\nmkdir 命令用于创建文件夹。\n\n可用选项：\n\n * -m: 对新建目录设置存取权限，也可以用 chmod 命令设置;\n * -p: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。\n\n实例：\n\n#当前工作目录下创建名为 t的文件夹\nmkdir t\n\n#在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建\nmkdir -p /tmp/test/t1/t\n\n\n# 5、rm 命令\n\n删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。\n\nrm [选项] 文件\n\n\n实例：\n\n#删除任何 .log 文件，删除前逐一询问确认\nrm -i *.log\n\n#删除 test 子目录及子目录中所有档案删除，并且不用一一确认\nrm -rf test\n\n#删除以 -f 开头的文件\nrm -- -f*\n\n\n# 6、rmdir 命令\n\n从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。\n\n注意：不能删除非空目录\n\n实例：\n\n#当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除\nrmdir -p parent/child/child11\n\n\n# 7、mv 命令\n\n移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。\n\n当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。\n\n实例：\n\n#将文件 test.log 重命名为 test1.txt\nmv test.log test1.txt\n\n#将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中\nmv llog1.txt log2.txt log3.txt /test3\n\n#文件 log1.txt 改名为 log2.txt，如果 log2.txt 已经存在，则询问是否覆盖\nmv -i log1.txt log2.txt\n\n#移动当前文件夹下的所有文件到上一级目录\nmv * ../\n\n\n# 8、cp 命令\n\n将源文件复制至目标文件，或将多个源文件复制至目标目录。\n\n注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！\n\n-i 提示\n-r 复制目录及目录内所有项目\n-a 复制的文件与原文件时间一样\n\n\n实例：\n\n#复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。\ncp -ai a.txt test\n\n#为 a.txt 建立一个链接（快捷方式）\ncp -s a.txt link_a.txt\n\n\n# 9、ln 命令\n\n功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。\n\n链接分类：软件链接及硬链接\n\n软链接：\n\n * 1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式\n * 2.软链接可以 跨文件系统 ，硬链接不可以\n * 3.软链接可以对一个不存在的文件名进行链接\n * 4.软链接可以对目录进行链接\n\n硬链接:\n\n * 1.硬链接，以文件副本的形式存在。但不占用实际空间。\n * 2.不允许给目录创建硬链接\n * 3.硬链接只有在同一个文件系统中才能创建\n\n需要注意：\n\n * 第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；\n * 第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。\n * 第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。\n\n常用参数：\n\n-b 删除，覆盖以前建立的链接\n-s 软链接（符号链接）\n-v 显示详细处理过程\n\n\n实例：\n\n#给文件创建软链接，并显示操作信息\nln -sv source.log link.log\n\n#给文件创建硬链接，并显示操作信息\nln -v source.log link1.log\n\n#给目录创建软链接\nln -sv /opt/soft/test/test3 /opt/soft/test/test5\n\n\n# 10、tar 命令\n\n用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。\n\n弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件\n\n常用参数：\n\n-c 建立新的压缩文件\n-f 指定压缩文件\n-r 添加文件到已经压缩文件包中\n-u 添加改了和现有的文件到压缩包中\n-x 从压缩包中抽取文件\n-t 显示压缩文件中的内容\n-z 支持gzip压缩\n-j 支持bzip2压缩\n-Z 支持compress解压文件\n-v 显示操作过程\n\n\n有关 gzip 及 bzip2 压缩:\n\ngzip 实例：压缩 gzip fileName .tar.gz 和.tgz  解压：gunzip filename.gz 或 gzip -d filename.gz\n          对应：tar zcvf filename.tar.gz     tar zxvf filename.tar.gz\n\nbz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2\n       对应：tar jcvf filename.tar.gz         解压：tar jxvf filename.tar.bz2\n\n\n实例：\n\n（1）将文件全部打包成 tar 包\n\ntar -cvf log.tar 1.log,2.log 或tar -cvf log.*\n\n\n（2）将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩\n\ntar -zcvf /tmp/etc.tar.gz /etc\n\n\n（3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）\n\ntar -ztvf /tmp/etc.tar.gz\n\n\n（4）要压缩打包 /home, /etc ，但不要 /home/dmtsai\n\ntar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc\n\n\n\n# 二、文件内容相关\n\n# 1、cat 命令\n\ncat 主要有三大功能：\n\n1.一次显示整个文件:\n\ncat filename\n\n\n2.创建一个文件:\n\ncat > filename\n\n\n只能创建新文件，不能编辑已有文件。\n\n3.将几个文件合并为一个文件:\n\ncat file1 file2 > file\n\n\n * -b 对非空输出行号\n * -n 输出所有行号\n\n实例：\n\n（1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里\n\ncat -n log2012.log log2013.log\n\n\n（2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里\n\ncat -b log2012.log log2013.log log.log\n\n\n（3）使用 here doc 生成新文件\n\ncat >log.txt <<EOF\n>Hello\n>World\n>PWD=$(pwd)\n>EOF\nls -l log.txt\ncat log.txt\nHello\nWorld\nPWD=/opt/soft/test\n\n\n（4）反向列示\n\ntac log.txt\nPWD=/opt/soft/test\nWorld\nHello\n\n\n# 2、head 命令\n\nhead 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。\n\n常用参数：\n\n-n<行数> 显示的行数（行数为复数表示从最后向前数）\n\n\n实例：\n\n（1）显示 1.log 文件中前 20 行\n\nhead 1.log -n 20\n\n\n（2）显示 1.log 文件前 20 字节\n\nhead -c 20 log2014.log\n\n\n（3）显示 t.log最后 10 行\n\nhead -n -10 t.log\n\n\n# 3、tail 命令\n\n用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。\n\n常用参数：\n\n-f 循环读取（常用于查看递增的日志文件）\n-n<行数> 显示行数（从后向前）\n\n\n（1）循环读取逐渐增加的文件内容\n\nping 127.0.0.1 > ping.log &\n\n\n后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。\n\ntail -f ping.log\n\n\n（查看日志）\n\n# 4、more 命令\n\n功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。\n\n命令参数：\n\n+n      从笫 n 行开始显示\n-n       定义屏幕大小为n行\n+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 \n-c       从顶部清屏，然后显示\n-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能\n-l        忽略Ctrl+l（换页）字符\n-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似\n-s       把连续的多个空行显示为一行\n-u       把文件内容中的下画线去掉\n\n\n常用操作命令：\n\nEnter    向下 n 行，需要定义。默认为 1 行\nCtrl+F   向下滚动一屏\n空格键  向下滚动一屏\nCtrl+B  返回上一屏\n=       输出当前行的行号\n:f     输出文件名和当前行的行号\nV      调用vi编辑器\n!命令   调用Shell，并执行命令\nq       退出more\n\n\n实例：\n\n（1）显示文件中从第3行起的内容\n\nmore +3 text.txt\n\n\n（2）在所列出文件目录详细信息，借助管道使每次显示 5 行\n\nls -l | more -5\n\n\n按空格显示下 5 行。\n\n# 5、less 命令\n\nless 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。\n\n常用命令参数：\n\n-i  忽略搜索时的大小写\n-N  显示每行的行号\n-o  <文件名> 将less 输出的内容在指定文件中保存起来\n-s  显示连续空行为一行\n/字符串：向下搜索“字符串”的功能\n?字符串：向上搜索“字符串”的功能\nn：重复前一个搜索（与 / 或 ? 有关）\nN：反向重复前一个搜索（与 / 或 ? 有关）\n-x <数字> 将“tab”键显示为规定的数字空格\nb  向后翻一页\nd  向后翻半页\nh  显示帮助界面\nQ  退出less 命令\nu  向前滚动半页\ny  向前滚动一行\n空格键 滚动一行\n回车键 滚动一页\n[pagedown]： 向下翻动一页\n[pageup]：   向上翻动一页\n\n\n实例：\n\n（1）ps 查看进程信息并通过 less 分页显示\n\nps -aux | less -N\n\n\n（2）查看多个文件\n\nless 1.log 2.log\n\n\n可以使用 n 查看下一个，使用 p 查看前一个。\n\n# 6、wc 命令\n\nwc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出\n\n命令格式：\n\nwc [option] file..\n\n\n命令参数：\n\n-c 统计字节数\n-l 统计行数\n-m 统计字符数\n-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串\n\n\n实例：\n\n#查找文件的 行数 单词数 字节数 文件名\nwc text.txt\n\n#统计输出结果的行数\ncat test.txt | wc -l\n\n\n# 7、grep 命令\n\n强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。\n\ngrep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。\n\n命令格式：\n\ngrep [option] pattern file|dir\n\n\n常用参数：\n\n-A n --after-context显示匹配字符后n行\n-B n --before-context显示匹配字符前n行\n-C n --context 显示匹配字符前后n行\n-c --count 计算符合样式的列数\n-i 忽略大小写\n-l 只列出文件内容符合指定的样式的文件名称\n-f 从文件中读取关键词\n-n 显示匹配内容的所在文件中行数\n-R 递归查找文件夹\n\n\ngrep 的规则表达式:\n\n^  #锚定行的开始 如：'^grep'匹配所有以grep开头的行。 \n$  #锚定行的结束 如：'grep$'匹配所有以grep结尾的行。 \n.  #匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。  \n*  #匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。\n.*   #一起用代表任意字符。  \n[]   #匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。 \n[^]  #匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。  \n\\(..\\)  #标记匹配字符，如'\\(love\\)'，love被标记为1。   \n\\<      #锚定单词的开始，如:'\\<grep'匹配包含以grep开头的单词的行。\n\\>      #锚定单词的结束，如'grep\\>'匹配包含以grep结尾的单词的行。\nx\\{m\\}  #重复字符x，m次，如：'0\\{5\\}'匹配包含5个o的行。 \nx\\{m,\\}  #重复字符x,至少m次，如：'o\\{5,\\}'匹配至少有5个o的行。  \nx\\{m,n\\}  #重复字符x，至少m次，不多于n次，如：'o\\{5,10\\}'匹配5--10个o的行。  \n\\w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。  \n\\W    #\\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  \n\\b    #单词锁定符，如: '\\bgrep\\b'只匹配grep。\n\n\n实例：\n\n#查找指定进程\nps -ef | grep svn\n\n#查找指定进程个数\nps -ef | grep svn -c\n\n#从文件中读取关键词\ncat test1.txt | grep -f key.log\n\n#从文件夹中递归查找以grep开头的行，并只列出文件\ngrep -lR '^grep' /tmp\n\n#查找非x开关的行内容\ngrep '^[^x]' test.txt\n\n#显示包含 ed 或者 at 字符的内容行\ngrep -E 'ed|at' test.txt\n\n\n\n# 三、文件查找相关\n\n# 1、which 命令\n\n在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：\n\nwhich     查看可执行文件的位置。\nwhereis 查看文件的位置。\nlocate  配合数据库查看文件位置。\nfind        实际搜寻硬盘查询文件名称。\n\n\nwhich 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。\n\n常用参数：\n\n-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。\n\n\n实例：\n\n（1）查看 ls 命令是否存在，执行哪个\n\nwhich ls\n\n\n（2）查看 which\n\nwhich which\n\n\n（3）查看 cd\n\nwhich cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）\n\n\n查看当前 PATH 配置：\n\necho $PATH\n\n\n或使用 env 查看所有环境变量及对应值\n\n# 2、whereis 命令\n\nwhereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。\n\n常用参数：\n\n-b   定位可执行文件。\n-m   定位帮助文件。\n-s   定位源代码文件。\n-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。\n\n\n实例：\n\n（1）查找 locate 程序相关文件\n\nwhereis locate\n\n\n（2）查找 locate 的源码文件\n\nwhereis -s locate\n\n\n（3）查找 lcoate 的帮助文件\n\nwhereis -m locate\n\n\n# 3、locate 命令\n\nlocate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。\n\nlocate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找\n\n常用参数：\n\n-l num（要显示的行数）\n-f   将特定的档案系统排除在外，如将proc排除在外\n-r   使用正则运算式做为寻找条件\n\n\n实例：\n\n（1）查找和 pwd 相关的所有文件(文件名中包含 pwd）\n\nlocate pwd\n\n\n（2）搜索 etc 目录下所有以 sh 开头的文件\n\nlocate /etc/sh\n\n\n（3）查找 /var 目录下，以 reason 结尾的文件\n\nlocate -r '^/var.*reason$'（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）\n\n\n# 4、find 命令\n\n用于在文件树中查找文件，并作出相应的处理。\n\n命令格式：\n\nfind pathname -options [-print -exec -ok ...]\n\n\n命令参数：\n\npathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。\n-print： find命令将匹配的文件输出到标准输出。\n-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为'command' {  } \\;，注意{   }和\\；之间的空格。\n-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。\n\n\n命令选项：\n\n-name 按照文件名查找文件\n-perm 按文件权限查找文件\n-user 按文件属主查找文件\n-group  按照文件所属的组来查找文件。\n-type  查找某一类型的文件，诸如：\n   b - 块设备文件\n   d - 目录\n   c - 字符设备文件\n   l - 符号链接文件\n   p - 管道文件\n   f - 普通文件\n\n-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小\n-amin n   查找系统中最后N分钟访问的文件\n-atime n  查找系统中最后n*24小时访问的文件\n-cmin n   查找系统中最后N分钟被改变文件状态的文件\n-ctime n  查找系统中最后n*24小时被改变文件状态的文件\n-mmin n   查找系统中最后N分钟被改变文件数据的文件\n-mtime n  查找系统中最后n*24小时被改变文件数据的文件\n(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )\n-maxdepth n 最大查找目录深度\n-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略\n-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项\n\n\n实例：\n\n（1）查找 48 小时内修改过的文件\n\nfind -atime -2\n\n\n（2）在当前目录查找 以 .log 结尾的文件。 . 代表当前目录\n\nfind ./ -name '*.log'\n\n\n（3）查找 /opt 目录下 权限为 777 的文件\n\nfind /opt -perm 777\n\n\n（4）查找大于 1K 的文件\n\nfind -size +1000c\n\n\n查找等于 1000 字符的文件\n\nfind -size 1000c \n\n\n-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。\n\n实例：\n\n（5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）\n\nfind . -type f -mtime +10 -exec rm -f {} \\;\n\n\n（6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除\n\nfind . -name '*.log' mtime +5 -ok -exec rm {} \\;\n\n\n（7）当前目录下查找文件名以 passwd 开头，内容包含 \"pkg\" 字符的文件\n\nfind . -f -name 'passwd*' -exec grep \"pkg\" {} \\;\n\n\n（8）用 exec 选项执行 cp 命令\n\nfind . -name '*.log' -exec cp {} test3 \\;\n\n\n-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。\n\n实例：\n\n（9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型\n\nfind . -type f -print | xargs file\n\n\n（10）查找当前目录下所有以 js 结尾的并且其中包含 'editor' 字符的普通文件\n\nfind . -type f -name \"*.js\" -exec grep -lF 'ueditor' {} \\;\nfind -type f -name '*.js' | xargs grep -lF 'editor'\n\n\n（11）利用 xargs 执行 mv 命令\n\nfind . -name \"*.log\" | xargs -i mv {} test4\n\n\n（12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：\n\nfind . -name \\*(转义） -type f -print | xargs grep -n 'hostnames'\n\n\n（13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：\n\nfind . -name '[a-z]*[4-9].log' -print\n\n\n（14）在 test 目录查找不在 test4 子目录查找\n\nfind test -path 'test/test4' -prune -o -print\n\n\n（15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件\n\nfind -newer log2012.log ! -newer log2017.log\n\n\n使用 depth 选项：\n\ndepth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。\n\n实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找\n\nfind / -name \"CON.FILE\" -depth -print\n\n\n\n# 四、进程系统相关\n\n# 1、ps 命令\n\nps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top\n\nlinux上进程有5种状态:\n\n1-运行(正在运行或在运行队列中等待)\n\n2-中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)\n\n3-不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)\n\n4-僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)\n\n5-停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)\n\nps 工具标识进程的5种状态码:\n\nD 不可中断 uninterruptible sleep (usually IO)\nR 运行 runnable (on run queue)\nS 中断 sleeping\nT 停止 traced or stopped\nZ 僵死 a defunct (”zombie”) process\n\n\n命令参数：\n\n-A 显示所有进程\na 显示所有进程\n-a 显示同一终端下所有进程\nc 显示进程真实名称\ne 显示环境变量\nf 显示进程间的关系\nr 显示当前终端运行的进程\n-aux 显示所有包含其它使用的进程\n\n\n实例：\n\n#显示当前所有进程环境变量及进程间关系\nps -ef\n\n#显示当前所有进程\nps -A\n\n#与grep联用查找某进程\nps -aux | grep apache\n\n#找出与 cron 与 syslog 这两个服务有关的 PID 号码\nps aux | grep '(cron|syslog)'\n\n\n# 2、top 命令\n\n显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等\n\n常用参数：\n\n-c 显示完整的进程命令\n-s 保密模式\n-p <进程号> 指定进程显示\n-n <次数>循环显示次数\n\n\n实例：\n\ntop - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35\nTasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombie\nCpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st\nMem:  32949016k total, 14411180k used, 18537836k free,   169884k buffers\nSwap: 32764556k total,        0k used, 32764556k free,  3612636k cached\n\nPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND  \n28894 root      22   0 1501m 405m  10m S 52.2  1.3   2534:16 java  \n\n\n前五行是当前系统情况整体的统计信息区。\n\n第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：\n\n14:06:23 — 当前系统时间\n\nup 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）\n\n2 users — 当前有2个用户登录系统\n\nload average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。\n\nload average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。\n\n第二行，Tasks — 任务（进程），具体信息说明如下：\n\n系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。\n\n第三行，cpu状态信息，具体属性说明如下：\n\n5.9%us — 用户空间占用CPU的百分比。\n3.4% sy — 内核空间占用CPU的百分比。\n0.0% ni — 改变过优先级的进程占用CPU的百分比\n90.4% id — 空闲CPU百分比\n0.0% wa — IO等待占用CPU的百分比\n0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比\n0.2% si — 软中断（Software Interrupts）占用CPU的百分比\n\n\n**备注：**在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！\n\n第四行，内存状态，具体信息如下：\n\n32949016k total — 物理内存总量（32GB）\n14411180k used — 使用中的内存总量（14GB）\n18537836k free — 空闲内存总量（18GB）\n169884k buffers — 缓存的内存量 （169M）\n\n\n第五行，swap交换分区信息，具体信息说明如下：\n\n32764556k total — 交换区总量（32GB）\n0k used — 使用的交换区总量（0K）\n32764556k free — 空闲交换区总量（32GB）\n3612636k cached — 缓冲的交换区总量（3.6GB）\n\n\n第六行，空行。\n\n第七行以下：各进程（任务）的状态监控，项目列信息说明如下：\n\nPID — 进程id\nUSER — 进程所有者\nPR — 进程优先级\nNI — nice值。负值表示高优先级，正值表示低优先级\nVIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES\nRES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA\nSHR — 共享内存大小，单位kb\nS — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程\n%CPU — 上次更新到现在的CPU时间占用百分比\n%MEM — 进程使用的物理内存百分比\nTIME+ — 进程使用的CPU时间总计，单位1/100秒\nCOMMAND — 进程名称（命令名/命令行）\n\n\ntop 交互命令\n\nh 显示top交互命令帮助信息\nc 切换显示命令名称和完整命令行\nm 以内存使用率排序\nP 根据CPU使用百分比大小进行排序\nT 根据时间/累计时间进行排序\nW 将当前设置写入~/.toprc文件中\no或者O 改变显示项目的顺序\n\n\n# 3、kill 命令\n\n发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用\"-KILL\" 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。\n\n常用参数：\n\n-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称\n-a  当处理当前进程时，不限制命令名和进程号的对应关系\n-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号\n-s  指定发送信号\n-u  指定用户\n\n\n实例：\n\n#先使用ps查找进程pro1，然后用kill杀掉\nkill -9 $(ps -ef | grep pro1)\n\n\n# 4、free 命令\n\n显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。\n\n命令参数：\n\n-b 以Byte显示内存使用情况\n-k 以kb为单位显示内存使用情况\n-m 以mb为单位显示内存使用情况\n-g 以gb为单位显示内存使用情况\n-s<间隔秒数> 持续显示内存\n-t 显示内存使用总合\n\n\n实例：\n\n#显示内存使用情况\nfree\nfree -k\nfree -m\n\n#以总和的形式显示内存的使用信息\nfree -t\n\n#周期性查询内存使用情况\nfree -s 10\n\n\n\n# 五、权限相关\n\n# 1、chmod 命令\n\n用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。\n\n每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。\n\n以文件 log2012.log 为例：\n\n-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log\n\n\n第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。\n\n常用参数：\n\n-c 当发生改变时，报告处理信息\n-R 处理指定目录以及其子目录下所有文件\n\n\n权限范围：\n\nu ：目录或者文件的当前的用户\ng ：目录或者文件的当前的群组\no ：除了目录或者文件的当前用户或群组之外的用户或者群组\na ：所有的用户及群组\n\n\n权限代号：\n\nr ：读权限，用数字4表示\nw ：写权限，用数字2表示\nx ：执行权限，用数字1表示\n- ：删除权限，用数字0表示\ns ：特殊权限\n\n\n实例：\n\n（1）增加文件 t.log 所有用户可执行权限\n\nchmod a+x t.log\n\n\n（2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息\n\nchmod u=r t.log -c\n\n\n（3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限\n\nchmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c)\n\n\n（4）将 test 目录及其子目录所有文件添加可读权限\n\nchmod u+r,g+r,o+r -R text/ -c\n\n\n# 2、chown 命令\n\nchown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。\n\n-c 显示更改的部分的信息\n-R 处理指定目录及子目录\n\n\n实例：\n\n#改变拥有者和群组 并显示改变信息\nchown -c mail:mail log2012.log\n\n#改变文件群组\nchown -c :mail t.log\n\n#改变文件夹及子文件目录属主及属组为 mail\nchown -cR mail: test/\n\n\n\n# 六、磁盘空间\n\n# 1、df 命令\n\n显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：\n\n-a 全部文件系统列表\n-h 以方便阅读的方式显示信息\n-i 显示inode信息\n-k 区块为1024字节\n-l 只显示本地磁盘\n-T 列出文件系统类型\n\n\n实例：\n\n（1）显示磁盘使用情况\n\n#显示磁盘使用情况\ndf -l\n\n#以易读方式列出所有文件系统及其类型\ndf -haT\n\n\n# 2、du 命令\n\ndu 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：\n\n命令格式：\n\ndu [选项] [文件]\n\n\n常用参数：\n\n-a 显示目录中所有文件大小\n-k 以KB为单位显示文件大小\n-m 以MB为单位显示文件大小\n-g 以GB为单位显示文件大小\n-h 以易读方式显示文件大小\n-s 仅显示总计\n-c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和\n\n\n实例：\n\n#以易读方式显示文件夹内及子文件夹大小\ndu -h scf/\n\n#以易读方式显示文件夹内所有文件大小\ndu -ah scf/\n\n#显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和\ndu -hc test/ scf/\n\n#输出当前目录下各个子目录所使用的空间\ndu -hc --max-depth=1 scf/\n\n\n\n# 七、时间日期相关\n\n# 1、date 命令\n\n显示或设定系统的日期与时间。\n\n命令参数：\n\n-d<字符串> 　显示字符串所指的日期与时间。字符串前后必须加上双引号。\n-s<字符串> 　根据字符串来设置日期与时间。字符串前后必须加上双引号。\n-u 　显示GMT。\n%H 小时(00-23)\n%I 小时(00-12)\n%M 分钟(以00-59来表示)\n%s 总秒数。起算时间为1970-01-01 00:00:00 UTC。\n%S 秒(以本地的惯用法来表示)\n%a 星期的缩写。\n%A 星期的完整名称。\n%d 日期(以01-31来表示)。\n%D 日期(含年月日)。\n%m 月份(以01-12来表示)。\n%y 年份(以00-99来表示)。\n%Y 年份(以四位数来表示)。\n\n\n实例：\n\ndate +%Y%m%d --date=\"+1 day\"  //显示下一天的日期\n\n#-d参数使用\ndate -d \"nov 22\"  今年的 11 月 22 日是星期三\ndate -d '2 weeks' 2周后的日期\ndate -d 'next monday' (下周一的日期)\ndate -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d\ndate -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d\ndate -d last-month +%Y%m(上个月是几月)\ndate -d next-month +%Y%m(下个月是几月)\n\n\n# 2、cal 命令\n\n可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：\n\n常用参数：\n\n-3 显示前一月，当前月，后一月三个月的日历\n-m 显示星期一为第一列\n-j 显示在当前年第几天\n-y [year]显示当前年[year]份的日历\n\n\n实例：\n\n#显示指定年月日期\ncal 9 2012\n\n#显示2013年每个月日历\ncal -y 2013\n\n#将星期一做为第一列,显示前中后三月\ncal -3m\n",normalizedContent:"# linux 常用命令\n\n\n# 启动jar包命令\n\nnohup java -jar xx.jar -xms128m -xmx1024m -server.port=9002 xx.jar > xx.out 2>&1 &\n\n#简化版\nnohup java -jar /home/test1.jar  >/home/log/test1.txt &\n\n\nnohup：忽略sighup信号,关闭shell后，进程还是存在的。\njava：启动程序\n-jar：启动类型\n-xms128m -xmx1024m：指定内存，xms一般为最大内存的1/64,xmx一般为最大内存的1/4\n-server.port=9002：指定端口\nxx.jar：jar包路径\n\n>：日志重定向，用>时清空日志文件后前面会产生空白，可以用>>\nxx.out：输出日志路径，不要日志可以输出到/dev/null\n2>&1：标准输出与错误输出\n&：后台运行，即使你用ctrl c,照样运行，但是要注意，如果你直接关掉shell后，进程同样消失。可见，&的后台并不硬（因为对sighup信号不免疫）。\n\n\n\n# 一、目录文件相关\n\n# 1、ls命令\n\n就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)和查看目录信息等等。\n\n常用参数搭配：\n\nls -a 列出目录所有文件，包含以.开始的隐藏文件\nls -a 列出除.及..的其它文件\nls -r 反序排列\nls -t 以文件修改时间排序\nls -s 以文件大小排序\nls -h 以易读大小显示\nls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来\n\n\n# 2、cd 命令\n\ncd(changedirectory) 命令语法：\n\ncd [目录名]\n\n\n实例：\n\n#进入要目录\ncd /\n\n#进入 \"home\" 目录\ncd ~\n\n#进入上一次工作路径\ncd -\n\n\n# 3、pwd 命令\n\npwd 命令用于查看当前工作目录路径。\n\n实例：\n\n#查看当前路径\npwd\n\n#查看软链接的实际路径\npwd -p\n\n\n# 4、mkdir 命令\n\nmkdir 命令用于创建文件夹。\n\n可用选项：\n\n * -m: 对新建目录设置存取权限，也可以用 chmod 命令设置;\n * -p: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。\n\n实例：\n\n#当前工作目录下创建名为 t的文件夹\nmkdir t\n\n#在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建\nmkdir -p /tmp/test/t1/t\n\n\n# 5、rm 命令\n\n删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。\n\nrm [选项] 文件\n\n\n实例：\n\n#删除任何 .log 文件，删除前逐一询问确认\nrm -i *.log\n\n#删除 test 子目录及子目录中所有档案删除，并且不用一一确认\nrm -rf test\n\n#删除以 -f 开头的文件\nrm -- -f*\n\n\n# 6、rmdir 命令\n\n从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。\n\n注意：不能删除非空目录\n\n实例：\n\n#当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除\nrmdir -p parent/child/child11\n\n\n# 7、mv 命令\n\n移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。\n\n当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。\n\n实例：\n\n#将文件 test.log 重命名为 test1.txt\nmv test.log test1.txt\n\n#将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中\nmv llog1.txt log2.txt log3.txt /test3\n\n#文件 log1.txt 改名为 log2.txt，如果 log2.txt 已经存在，则询问是否覆盖\nmv -i log1.txt log2.txt\n\n#移动当前文件夹下的所有文件到上一级目录\nmv * ../\n\n\n# 8、cp 命令\n\n将源文件复制至目标文件，或将多个源文件复制至目标目录。\n\n注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！\n\n-i 提示\n-r 复制目录及目录内所有项目\n-a 复制的文件与原文件时间一样\n\n\n实例：\n\n#复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。\ncp -ai a.txt test\n\n#为 a.txt 建立一个链接（快捷方式）\ncp -s a.txt link_a.txt\n\n\n# 9、ln 命令\n\n功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。\n\n链接分类：软件链接及硬链接\n\n软链接：\n\n * 1.软链接，以路径的形式存在。类似于windows操作系统中的快捷方式\n * 2.软链接可以 跨文件系统 ，硬链接不可以\n * 3.软链接可以对一个不存在的文件名进行链接\n * 4.软链接可以对目录进行链接\n\n硬链接:\n\n * 1.硬链接，以文件副本的形式存在。但不占用实际空间。\n * 2.不允许给目录创建硬链接\n * 3.硬链接只有在同一个文件系统中才能创建\n\n需要注意：\n\n * 第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；\n * 第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。\n * 第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。\n\n常用参数：\n\n-b 删除，覆盖以前建立的链接\n-s 软链接（符号链接）\n-v 显示详细处理过程\n\n\n实例：\n\n#给文件创建软链接，并显示操作信息\nln -sv source.log link.log\n\n#给文件创建硬链接，并显示操作信息\nln -v source.log link1.log\n\n#给目录创建软链接\nln -sv /opt/soft/test/test3 /opt/soft/test/test5\n\n\n# 10、tar 命令\n\n用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。\n\n弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件\n\n常用参数：\n\n-c 建立新的压缩文件\n-f 指定压缩文件\n-r 添加文件到已经压缩文件包中\n-u 添加改了和现有的文件到压缩包中\n-x 从压缩包中抽取文件\n-t 显示压缩文件中的内容\n-z 支持gzip压缩\n-j 支持bzip2压缩\n-z 支持compress解压文件\n-v 显示操作过程\n\n\n有关 gzip 及 bzip2 压缩:\n\ngzip 实例：压缩 gzip filename .tar.gz 和.tgz  解压：gunzip filename.gz 或 gzip -d filename.gz\n          对应：tar zcvf filename.tar.gz     tar zxvf filename.tar.gz\n\nbz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2\n       对应：tar jcvf filename.tar.gz         解压：tar jxvf filename.tar.bz2\n\n\n实例：\n\n（1）将文件全部打包成 tar 包\n\ntar -cvf log.tar 1.log,2.log 或tar -cvf log.*\n\n\n（2）将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩\n\ntar -zcvf /tmp/etc.tar.gz /etc\n\n\n（3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）\n\ntar -ztvf /tmp/etc.tar.gz\n\n\n（4）要压缩打包 /home, /etc ，但不要 /home/dmtsai\n\ntar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc\n\n\n\n# 二、文件内容相关\n\n# 1、cat 命令\n\ncat 主要有三大功能：\n\n1.一次显示整个文件:\n\ncat filename\n\n\n2.创建一个文件:\n\ncat > filename\n\n\n只能创建新文件，不能编辑已有文件。\n\n3.将几个文件合并为一个文件:\n\ncat file1 file2 > file\n\n\n * -b 对非空输出行号\n * -n 输出所有行号\n\n实例：\n\n（1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里\n\ncat -n log2012.log log2013.log\n\n\n（2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里\n\ncat -b log2012.log log2013.log log.log\n\n\n（3）使用 here doc 生成新文件\n\ncat >log.txt <<eof\n>hello\n>world\n>pwd=$(pwd)\n>eof\nls -l log.txt\ncat log.txt\nhello\nworld\npwd=/opt/soft/test\n\n\n（4）反向列示\n\ntac log.txt\npwd=/opt/soft/test\nworld\nhello\n\n\n# 2、head 命令\n\nhead 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。\n\n常用参数：\n\n-n<行数> 显示的行数（行数为复数表示从最后向前数）\n\n\n实例：\n\n（1）显示 1.log 文件中前 20 行\n\nhead 1.log -n 20\n\n\n（2）显示 1.log 文件前 20 字节\n\nhead -c 20 log2014.log\n\n\n（3）显示 t.log最后 10 行\n\nhead -n -10 t.log\n\n\n# 3、tail 命令\n\n用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。\n\n常用参数：\n\n-f 循环读取（常用于查看递增的日志文件）\n-n<行数> 显示行数（从后向前）\n\n\n（1）循环读取逐渐增加的文件内容\n\nping 127.0.0.1 > ping.log &\n\n\n后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。\n\ntail -f ping.log\n\n\n（查看日志）\n\n# 4、more 命令\n\n功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。\n\n命令参数：\n\n+n      从笫 n 行开始显示\n-n       定义屏幕大小为n行\n+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 \n-c       从顶部清屏，然后显示\n-d       提示“press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能\n-l        忽略ctrl+l（换页）字符\n-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似\n-s       把连续的多个空行显示为一行\n-u       把文件内容中的下画线去掉\n\n\n常用操作命令：\n\nenter    向下 n 行，需要定义。默认为 1 行\nctrl+f   向下滚动一屏\n空格键  向下滚动一屏\nctrl+b  返回上一屏\n=       输出当前行的行号\n:f     输出文件名和当前行的行号\nv      调用vi编辑器\n!命令   调用shell，并执行命令\nq       退出more\n\n\n实例：\n\n（1）显示文件中从第3行起的内容\n\nmore +3 text.txt\n\n\n（2）在所列出文件目录详细信息，借助管道使每次显示 5 行\n\nls -l | more -5\n\n\n按空格显示下 5 行。\n\n# 5、less 命令\n\nless 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。\n\n常用命令参数：\n\n-i  忽略搜索时的大小写\n-n  显示每行的行号\n-o  <文件名> 将less 输出的内容在指定文件中保存起来\n-s  显示连续空行为一行\n/字符串：向下搜索“字符串”的功能\n?字符串：向上搜索“字符串”的功能\nn：重复前一个搜索（与 / 或 ? 有关）\nn：反向重复前一个搜索（与 / 或 ? 有关）\n-x <数字> 将“tab”键显示为规定的数字空格\nb  向后翻一页\nd  向后翻半页\nh  显示帮助界面\nq  退出less 命令\nu  向前滚动半页\ny  向前滚动一行\n空格键 滚动一行\n回车键 滚动一页\n[pagedown]： 向下翻动一页\n[pageup]：   向上翻动一页\n\n\n实例：\n\n（1）ps 查看进程信息并通过 less 分页显示\n\nps -aux | less -n\n\n\n（2）查看多个文件\n\nless 1.log 2.log\n\n\n可以使用 n 查看下一个，使用 p 查看前一个。\n\n# 6、wc 命令\n\nwc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出\n\n命令格式：\n\nwc [option] file..\n\n\n命令参数：\n\n-c 统计字节数\n-l 统计行数\n-m 统计字符数\n-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串\n\n\n实例：\n\n#查找文件的 行数 单词数 字节数 文件名\nwc text.txt\n\n#统计输出结果的行数\ncat test.txt | wc -l\n\n\n# 7、grep 命令\n\n强大的文本搜索命令，grep(global regular expression print) 全局正则表达式搜索。\n\ngrep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。\n\n命令格式：\n\ngrep [option] pattern file|dir\n\n\n常用参数：\n\n-a n --after-context显示匹配字符后n行\n-b n --before-context显示匹配字符前n行\n-c n --context 显示匹配字符前后n行\n-c --count 计算符合样式的列数\n-i 忽略大小写\n-l 只列出文件内容符合指定的样式的文件名称\n-f 从文件中读取关键词\n-n 显示匹配内容的所在文件中行数\n-r 递归查找文件夹\n\n\ngrep 的规则表达式:\n\n^  #锚定行的开始 如：'^grep'匹配所有以grep开头的行。 \n$  #锚定行的结束 如：'grep$'匹配所有以grep结尾的行。 \n.  #匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。  \n*  #匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。\n.*   #一起用代表任意字符。  \n[]   #匹配一个指定范围内的字符，如'[gg]rep'匹配grep和grep。 \n[^]  #匹配一个不在指定范围内的字符，如：'[^a-fh-z]rep'匹配不包含a-r和t-z的一个字母开头，紧跟rep的行。  \n\\(..\\)  #标记匹配字符，如'\\(love\\)'，love被标记为1。   \n\\<      #锚定单词的开始，如:'\\<grep'匹配包含以grep开头的单词的行。\n\\>      #锚定单词的结束，如'grep\\>'匹配包含以grep结尾的单词的行。\nx\\{m\\}  #重复字符x，m次，如：'0\\{5\\}'匹配包含5个o的行。 \nx\\{m,\\}  #重复字符x,至少m次，如：'o\\{5,\\}'匹配至少有5个o的行。  \nx\\{m,n\\}  #重复字符x，至少m次，不多于n次，如：'o\\{5,10\\}'匹配5--10个o的行。  \n\\w    #匹配文字和数字字符，也就是[a-za-z0-9]，如：'g\\w*p'匹配以g后跟零个或多个文字或数字字符，然后是p。  \n\\w    #\\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  \n\\b    #单词锁定符，如: '\\bgrep\\b'只匹配grep。\n\n\n实例：\n\n#查找指定进程\nps -ef | grep svn\n\n#查找指定进程个数\nps -ef | grep svn -c\n\n#从文件中读取关键词\ncat test1.txt | grep -f key.log\n\n#从文件夹中递归查找以grep开头的行，并只列出文件\ngrep -lr '^grep' /tmp\n\n#查找非x开关的行内容\ngrep '^[^x]' test.txt\n\n#显示包含 ed 或者 at 字符的内容行\ngrep -e 'ed|at' test.txt\n\n\n\n# 三、文件查找相关\n\n# 1、which 命令\n\n在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：\n\nwhich     查看可执行文件的位置。\nwhereis 查看文件的位置。\nlocate  配合数据库查看文件位置。\nfind        实际搜寻硬盘查询文件名称。\n\n\nwhich 是在 path 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。\n\n常用参数：\n\n-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。\n\n\n实例：\n\n（1）查看 ls 命令是否存在，执行哪个\n\nwhich ls\n\n\n（2）查看 which\n\nwhich which\n\n\n（3）查看 cd\n\nwhich cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 path 中的命令）\n\n\n查看当前 path 配置：\n\necho $path\n\n\n或使用 env 查看所有环境变量及对应值\n\n# 2、whereis 命令\n\nwhereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。\n\n常用参数：\n\n-b   定位可执行文件。\n-m   定位帮助文件。\n-s   定位源代码文件。\n-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。\n\n\n实例：\n\n（1）查找 locate 程序相关文件\n\nwhereis locate\n\n\n（2）查找 locate 的源码文件\n\nwhereis -s locate\n\n\n（3）查找 lcoate 的帮助文件\n\nwhereis -m locate\n\n\n# 3、locate 命令\n\nlocate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。\n\nlocate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找\n\n常用参数：\n\n-l num（要显示的行数）\n-f   将特定的档案系统排除在外，如将proc排除在外\n-r   使用正则运算式做为寻找条件\n\n\n实例：\n\n（1）查找和 pwd 相关的所有文件(文件名中包含 pwd）\n\nlocate pwd\n\n\n（2）搜索 etc 目录下所有以 sh 开头的文件\n\nlocate /etc/sh\n\n\n（3）查找 /var 目录下，以 reason 结尾的文件\n\nlocate -r '^/var.*reason$'（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）\n\n\n# 4、find 命令\n\n用于在文件树中查找文件，并作出相应的处理。\n\n命令格式：\n\nfind pathname -options [-print -exec -ok ...]\n\n\n命令参数：\n\npathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。\n-print： find命令将匹配的文件输出到标准输出。\n-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为'command' {  } \\;，注意{   }和\\；之间的空格。\n-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。\n\n\n命令选项：\n\n-name 按照文件名查找文件\n-perm 按文件权限查找文件\n-user 按文件属主查找文件\n-group  按照文件所属的组来查找文件。\n-type  查找某一类型的文件，诸如：\n   b - 块设备文件\n   d - 目录\n   c - 字符设备文件\n   l - 符号链接文件\n   p - 管道文件\n   f - 普通文件\n\n-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小\n-amin n   查找系统中最后n分钟访问的文件\n-atime n  查找系统中最后n*24小时访问的文件\n-cmin n   查找系统中最后n分钟被改变文件状态的文件\n-ctime n  查找系统中最后n*24小时被改变文件状态的文件\n-mmin n   查找系统中最后n分钟被改变文件数据的文件\n-mtime n  查找系统中最后n*24小时被改变文件数据的文件\n(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )\n-maxdepth n 最大查找目录深度\n-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略\n-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项\n\n\n实例：\n\n（1）查找 48 小时内修改过的文件\n\nfind -atime -2\n\n\n（2）在当前目录查找 以 .log 结尾的文件。 . 代表当前目录\n\nfind ./ -name '*.log'\n\n\n（3）查找 /opt 目录下 权限为 777 的文件\n\nfind /opt -perm 777\n\n\n（4）查找大于 1k 的文件\n\nfind -size +1000c\n\n\n查找等于 1000 字符的文件\n\nfind -size 1000c \n\n\n-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。\n\n实例：\n\n（5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）\n\nfind . -type f -mtime +10 -exec rm -f {} \\;\n\n\n（6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除\n\nfind . -name '*.log' mtime +5 -ok -exec rm {} \\;\n\n\n（7）当前目录下查找文件名以 passwd 开头，内容包含 \"pkg\" 字符的文件\n\nfind . -f -name 'passwd*' -exec grep \"pkg\" {} \\;\n\n\n（8）用 exec 选项执行 cp 命令\n\nfind . -name '*.log' -exec cp {} test3 \\;\n\n\n-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。\n\n实例：\n\n（9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型\n\nfind . -type f -print | xargs file\n\n\n（10）查找当前目录下所有以 js 结尾的并且其中包含 'editor' 字符的普通文件\n\nfind . -type f -name \"*.js\" -exec grep -lf 'ueditor' {} \\;\nfind -type f -name '*.js' | xargs grep -lf 'editor'\n\n\n（11）利用 xargs 执行 mv 命令\n\nfind . -name \"*.log\" | xargs -i mv {} test4\n\n\n（12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：\n\nfind . -name \\*(转义） -type f -print | xargs grep -n 'hostnames'\n\n\n（13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：\n\nfind . -name '[a-z]*[4-9].log' -print\n\n\n（14）在 test 目录查找不在 test4 子目录查找\n\nfind test -path 'test/test4' -prune -o -print\n\n\n（15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件\n\nfind -newer log2012.log ! -newer log2017.log\n\n\n使用 depth 选项：\n\ndepth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。\n\n实例：find 命令从文件系统的根目录开始，查找一个名为 con.file 的文件。 它将首先匹配所有的文件然后再进入子目录中查找\n\nfind / -name \"con.file\" -depth -print\n\n\n\n# 四、进程系统相关\n\n# 1、ps 命令\n\nps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top\n\nlinux上进程有5种状态:\n\n1-运行(正在运行或在运行队列中等待)\n\n2-中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)\n\n3-不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)\n\n4-僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)\n\n5-停止(进程收到sigstop, sigstp, sigtin, sigtou信号后停止运行运行)\n\nps 工具标识进程的5种状态码:\n\nd 不可中断 uninterruptible sleep (usually io)\nr 运行 runnable (on run queue)\ns 中断 sleeping\nt 停止 traced or stopped\nz 僵死 a defunct (”zombie”) process\n\n\n命令参数：\n\n-a 显示所有进程\na 显示所有进程\n-a 显示同一终端下所有进程\nc 显示进程真实名称\ne 显示环境变量\nf 显示进程间的关系\nr 显示当前终端运行的进程\n-aux 显示所有包含其它使用的进程\n\n\n实例：\n\n#显示当前所有进程环境变量及进程间关系\nps -ef\n\n#显示当前所有进程\nps -a\n\n#与grep联用查找某进程\nps -aux | grep apache\n\n#找出与 cron 与 syslog 这两个服务有关的 pid 号码\nps aux | grep '(cron|syslog)'\n\n\n# 2、top 命令\n\n显示当前系统正在执行的进程的相关信息，包括进程 id、内存占用率、cpu 占用率等\n\n常用参数：\n\n-c 显示完整的进程命令\n-s 保密模式\n-p <进程号> 指定进程显示\n-n <次数>循环显示次数\n\n\n实例：\n\ntop - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35\ntasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombie\ncpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st\nmem:  32949016k total, 14411180k used, 18537836k free,   169884k buffers\nswap: 32764556k total,        0k used, 32764556k free,  3612636k cached\n\npid user      pr  ni  virt  res  shr s %cpu %mem    time+  command  \n28894 root      22   0 1501m 405m  10m s 52.2  1.3   2534:16 java  \n\n\n前五行是当前系统情况整体的统计信息区。\n\n第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：\n\n14:06:23 — 当前系统时间\n\nup 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）\n\n2 users — 当前有2个用户登录系统\n\nload average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。\n\nload average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑cpu的数量，结果高于5的时候就表明系统在超负荷运转了。\n\n第二行，tasks — 任务（进程），具体信息说明如下：\n\n系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。\n\n第三行，cpu状态信息，具体属性说明如下：\n\n5.9%us — 用户空间占用cpu的百分比。\n3.4% sy — 内核空间占用cpu的百分比。\n0.0% ni — 改变过优先级的进程占用cpu的百分比\n90.4% id — 空闲cpu百分比\n0.0% wa — io等待占用cpu的百分比\n0.0% hi — 硬中断（hardware irq）占用cpu的百分比\n0.2% si — 软中断（software interrupts）占用cpu的百分比\n\n\n**备注：**在这里cpu的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！\n\n第四行，内存状态，具体信息如下：\n\n32949016k total — 物理内存总量（32gb）\n14411180k used — 使用中的内存总量（14gb）\n18537836k free — 空闲内存总量（18gb）\n169884k buffers — 缓存的内存量 （169m）\n\n\n第五行，swap交换分区信息，具体信息说明如下：\n\n32764556k total — 交换区总量（32gb）\n0k used — 使用的交换区总量（0k）\n32764556k free — 空闲交换区总量（32gb）\n3612636k cached — 缓冲的交换区总量（3.6gb）\n\n\n第六行，空行。\n\n第七行以下：各进程（任务）的状态监控，项目列信息说明如下：\n\npid — 进程id\nuser — 进程所有者\npr — 进程优先级\nni — nice值。负值表示高优先级，正值表示低优先级\nvirt — 进程使用的虚拟内存总量，单位kb。virt=swap+res\nres — 进程使用的、未被换出的物理内存大小，单位kb。res=code+data\nshr — 共享内存大小，单位kb\ns — 进程状态。d=不可中断的睡眠状态 r=运行 s=睡眠 t=跟踪/停止 z=僵尸进程\n%cpu — 上次更新到现在的cpu时间占用百分比\n%mem — 进程使用的物理内存百分比\ntime+ — 进程使用的cpu时间总计，单位1/100秒\ncommand — 进程名称（命令名/命令行）\n\n\ntop 交互命令\n\nh 显示top交互命令帮助信息\nc 切换显示命令名称和完整命令行\nm 以内存使用率排序\np 根据cpu使用百分比大小进行排序\nt 根据时间/累计时间进行排序\nw 将当前设置写入~/.toprc文件中\no或者o 改变显示项目的顺序\n\n\n# 3、kill 命令\n\n发送指定的信号到相应进程。不指定型号将发送sigterm（15）终止指定进程。如果任无法终止该程序可用\"-kill\" 参数，其发送的信号为sigkill(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。\n\n常用参数：\n\n-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称\n-a  当处理当前进程时，不限制命令名和进程号的对应关系\n-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号\n-s  指定发送信号\n-u  指定用户\n\n\n实例：\n\n#先使用ps查找进程pro1，然后用kill杀掉\nkill -9 $(ps -ef | grep pro1)\n\n\n# 4、free 命令\n\n显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。\n\n命令参数：\n\n-b 以byte显示内存使用情况\n-k 以kb为单位显示内存使用情况\n-m 以mb为单位显示内存使用情况\n-g 以gb为单位显示内存使用情况\n-s<间隔秒数> 持续显示内存\n-t 显示内存使用总合\n\n\n实例：\n\n#显示内存使用情况\nfree\nfree -k\nfree -m\n\n#以总和的形式显示内存的使用信息\nfree -t\n\n#周期性查询内存使用情况\nfree -s 10\n\n\n\n# 五、权限相关\n\n# 1、chmod 命令\n\n用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。\n\n每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。\n\n以文件 log2012.log 为例：\n\n-rw-r--r-- 1 root root 296k 11-13 06:03 log2012.log\n\n\n第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。\n\n常用参数：\n\n-c 当发生改变时，报告处理信息\n-r 处理指定目录以及其子目录下所有文件\n\n\n权限范围：\n\nu ：目录或者文件的当前的用户\ng ：目录或者文件的当前的群组\no ：除了目录或者文件的当前用户或群组之外的用户或者群组\na ：所有的用户及群组\n\n\n权限代号：\n\nr ：读权限，用数字4表示\nw ：写权限，用数字2表示\nx ：执行权限，用数字1表示\n- ：删除权限，用数字0表示\ns ：特殊权限\n\n\n实例：\n\n（1）增加文件 t.log 所有用户可执行权限\n\nchmod a+x t.log\n\n\n（2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息\n\nchmod u=r t.log -c\n\n\n（3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限\n\nchmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c)\n\n\n（4）将 test 目录及其子目录所有文件添加可读权限\n\nchmod u+r,g+r,o+r -r text/ -c\n\n\n# 2、chown 命令\n\nchown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 id；组可以是组名或者组 id；文件是以空格分开的要改变权限的文件列表，支持通配符。\n\n-c 显示更改的部分的信息\n-r 处理指定目录及子目录\n\n\n实例：\n\n#改变拥有者和群组 并显示改变信息\nchown -c mail:mail log2012.log\n\n#改变文件群组\nchown -c :mail t.log\n\n#改变文件夹及子文件目录属主及属组为 mail\nchown -cr mail: test/\n\n\n\n# 六、磁盘空间\n\n# 1、df 命令\n\n显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1kb 为单位进行显示，除非环境变量 posixly_correct 被指定，那样将以512字节为单位进行显示：\n\n-a 全部文件系统列表\n-h 以方便阅读的方式显示信息\n-i 显示inode信息\n-k 区块为1024字节\n-l 只显示本地磁盘\n-t 列出文件系统类型\n\n\n实例：\n\n（1）显示磁盘使用情况\n\n#显示磁盘使用情况\ndf -l\n\n#以易读方式列出所有文件系统及其类型\ndf -hat\n\n\n# 2、du 命令\n\ndu 命令也是查看使用空间的，但是与 df 命令不同的是 linux du 命令是对文件和目录磁盘使用的空间的查看：\n\n命令格式：\n\ndu [选项] [文件]\n\n\n常用参数：\n\n-a 显示目录中所有文件大小\n-k 以kb为单位显示文件大小\n-m 以mb为单位显示文件大小\n-g 以gb为单位显示文件大小\n-h 以易读方式显示文件大小\n-s 仅显示总计\n-c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和\n\n\n实例：\n\n#以易读方式显示文件夹内及子文件夹大小\ndu -h scf/\n\n#以易读方式显示文件夹内所有文件大小\ndu -ah scf/\n\n#显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和\ndu -hc test/ scf/\n\n#输出当前目录下各个子目录所使用的空间\ndu -hc --max-depth=1 scf/\n\n\n\n# 七、时间日期相关\n\n# 1、date 命令\n\n显示或设定系统的日期与时间。\n\n命令参数：\n\n-d<字符串> 　显示字符串所指的日期与时间。字符串前后必须加上双引号。\n-s<字符串> 　根据字符串来设置日期与时间。字符串前后必须加上双引号。\n-u 　显示gmt。\n%h 小时(00-23)\n%i 小时(00-12)\n%m 分钟(以00-59来表示)\n%s 总秒数。起算时间为1970-01-01 00:00:00 utc。\n%s 秒(以本地的惯用法来表示)\n%a 星期的缩写。\n%a 星期的完整名称。\n%d 日期(以01-31来表示)。\n%d 日期(含年月日)。\n%m 月份(以01-12来表示)。\n%y 年份(以00-99来表示)。\n%y 年份(以四位数来表示)。\n\n\n实例：\n\ndate +%y%m%d --date=\"+1 day\"  //显示下一天的日期\n\n#-d参数使用\ndate -d \"nov 22\"  今年的 11 月 22 日是星期三\ndate -d '2 weeks' 2周后的日期\ndate -d 'next monday' (下周一的日期)\ndate -d next-day +%y%m%d（明天的日期）或者：date -d tomorrow +%y%m%d\ndate -d last-day +%y%m%d(昨天的日期) 或者：date -d yesterday +%y%m%d\ndate -d last-month +%y%m(上个月是几月)\ndate -d next-month +%y%m(下个月是几月)\n\n\n# 2、cal 命令\n\n可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：\n\n常用参数：\n\n-3 显示前一月，当前月，后一月三个月的日历\n-m 显示星期一为第一列\n-j 显示在当前年第几天\n-y [year]显示当前年[year]份的日历\n\n\n实例：\n\n#显示指定年月日期\ncal 9 2012\n\n#显示2013年每个月日历\ncal -y 2013\n\n#将星期一做为第一列,显示前中后三月\ncal -3m\n",charsets:{cjk:!0}},{title:"MySQL常用命令",frontmatter:{title:"MySQL常用命令",date:"2022-01-17T16:35:43.000Z",permalink:"/pages/3c4d4a/",categories:["学习资料","常用命令"],tags:["mysql"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/02.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/04.MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"学习资料/02.常用命令/04.MySQL常用命令.md",key:"v-680b3833",path:"/pages/3c4d4a/",headers:[{level:2,title:"MySQL常用命令",slug:"mysql常用命令",normalizedTitle:"mysql常用命令",charIndex:2},{level:3,title:"数据库管理命令",slug:"数据库管理命令",normalizedTitle:"数据库管理命令",charIndex:261},{level:3,title:"数据库操作SQL语句",slug:"数据库操作sql语句",normalizedTitle:"数据库操作sql语句",charIndex:3098}],headersStr:"MySQL常用命令 数据库管理命令 数据库操作SQL语句",content:"# MySQL常用命令\n\n将常用到的MySQL的一些命令在这里做个记录，便于查询和更新。\n\nmysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码，这时候第一次登录mysql数据库时需要修改这个生成的默认密码。\n\nsystemctl start mysqld.service 启动\nsystemctl stop mysqld.service 停止\nsystemctl restart mysqld.service 重启\n\n#mysql配置文件\netc/my.cnf \n\n\n\n# 数据库管理命令\n\n# 1、登入数据库相关\n\n登录数据库\n\n#登录数据库\nmysql -h localhost -u root -p dbName\n\n#本地\nmysql -u root -p\n>输入密码\n\n\n#查看数据库信息\nselect version();   #查看MySQL当前的版本\nshow databases;     #查看有哪些数据库\nuse testdb;         #切换数据库\nshow tables;        #查看表\nshow engines;       #查看存储引擎\n\n\n# 2、用户相关\n\nselect user,host,password from mysql.user; #查询mysql数据库用户\n\nCREATE USER 'test@%' IDENTIFIED BY \"123456\";                #创建用户\nCREATE USER 'username'@'localhost' IDENTIFIED BY 'password';#创建用户\n\n\n#某个用户从某台机器访问本台mysql服务器\nGRANT ALL ON dbname.tablename to user1@192.168.67.1;        #用户授权\n#mysql8授权：\nGRANT SELECT, INSERT ON db.* TO 'username'@'%';             #用户授权\nGRANT ALL PRIVILEGES ON db.* TO 'username'@'localhost';     #用户授权\n\nshow grants for user_name@localhost;                #查看用户权限\n\n\nALTER USER 'root'@'localhost' IDENTIFIED BY 'password';     #修改用户密码\n\n#上面新建用户，修改用户密码，给用户授权后使用\nflush privileges;                                   #刷新权限\n\n\n# 3、数据库配置相关\n\n#创建数据库\n#utf8_bin 区分大小写，utf8_general_ci 不区分大小写\nCREATE DATABASE IF NOT EXISTS test DEFAULT CHARSET utf8 COLLATE utf8_bin; \n\n#查看 MySQL 加载配置文件的顺序\n#后面的配置会覆盖前面相同的配置项\nmysqld --help --verbose | grep -A 1 'Default options'\n\n#查看MySQL的一些配置\n#比如查看MySQL的数据库文件存放在那个目录就可以用下面的命令\nshow variables where Variable_name ='datadir'; \n\n#关闭更新时的安全模式\nSET SQL_SAFE_UPDATES=0;\n\n#关闭自动提交\nSET AUTOCOMMIT=0; # 只对当前会话生效\n\n#设置自增从 10000 开始\nALTER TABLE tableName AUTO_INCREMENT=10000; \n\n#关闭外键 约束\nSELECT @@FOREIGN_KEY_CHECKS; \nSET FOREIGN_KEY_CHECKS=1; // 开启外键约束 \nSET FOREIGN_KEY_CHECKS=0; // 关闭外键约束 \n\n#查看大小写是否敏感\n#mysql中控制数据库名和表名的大小写敏感由参数lower_case_table_names控制，为0时表示区分大小写，为1时，表示将名字转化为小写后存储，不区分大小写并且以_ci（大小写不敏感）、_cs（大小写敏感）或_bin 大小写敏感\nSHOW VARIABLES LIKE '%case%'; \n\n# 查看安装的plugin\nshow plugins; \n\n\n# 4、日志相关\n\n#查看参数值\nshow variables like \"%log%\"; \n\n#查看错误日志的存放位置\nshow variables like '%log_error%';\n\n#刷新binlog\n# 在mysql中flush logs操作会生成一个新的binlog文件 \nflush logs;\n\n#查看最后一个bin日志\nshow master status; \n\n#清空所有日志\nreset master; \n\n\n# 5、数据库空间查看\n\n#查看数据库占用空间\nSELECT \n    table_schema,\n    SUM(data_length + index_length) / 1024 / 1024 AS total_mb,\n    SUM(data_length) / 1024 / 1024 AS data_mb,\n    SUM(index_length) / 1024 / 1024 AS index_mb,\n    COUNT(*) AS tables,\n    CURDATE() AS today\nFROM\n    information_schema.tables\nGROUP BY table_schema\nORDER BY 2 DESC; \n\n#查看某个数据库表中的情况\nSELECT \n    table_name,\n    (data_length / 1024 / 1024) AS data_mb,\n    (index_length / 1024 / 1024) AS index_mb,\n    ((data_length + index_length) / 1024 / 1024) AS all_mb,\n    table_rows\nFROM\n    information_schema.tables\nWHERE\n    table_schema = 'db_name'; \n\n#查看某个库的具体情况\nshow table status from db_name;\n\n#查看数据库中表碎片的情况\nSELECT TABLE_SCHEMA\n      ,TABLE_NAME \n      ,ENGINE\n      ,ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024), 2) AS SIZE_MB\n      ,ROUND(DATA_FREE/1024/1024,2) AS FREE_SIZ_MB\nFROM information_schema.TABLES \nWHERE DATA_FREE >=100*1024*1024\nORDER BY FREE_SIZ_MB DESC;\n\n\n\n# 数据库操作SQL语句\n\n# 1、表操作\n\n#查看创建表的sql语句\nshow create table t1; \n\n#表删除\ntruncate table1;        #删除一张表里所有的数据\ndrop table table1;      #删除一张表\n\n#表复制\ncreate table bs_test2 like bs_test1 # 复制表结构 \nINSERT INTO bs_test1 SELECT * FROM bs_test2; #复制表中的数据 \n\n#给表添加注释\nALTER TABLE 表名 COMMENT '注释的内容'\n#查看某个表的注释\nSELECT table_name,table_comment FROM information_schema.tables where table_name='表名' \n\n#查询出 数据库 中所有的 表信息\nselect table_name from information_schema.tables where table_schema='数据库名' and table_type='base table'; select * from information_schema.tables where table_schema='数据库名' and table_type='base table'; \n\n#查看一张表 或 一条sql语句的执行情况\n(DESC 或 EXPLAIN) DESC SELECT * FROM bs_member DESC bs_member\n\n\n#创建 json 列，创建虚拟列 user_name，address\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `info` json NOT NULL,\n  `user_name` varchar(128) GENERATED ALWAYS AS (json_extract(`info`,'$.name')) VIRTUAL,\n  `address` varchar(128) GENERATED ALWAYS AS (json_extract(`info`,'$.address')) STORED,\n  PRIMARY KEY (`id`),\n  KEY `user_name_index` (`user_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8\n\n\n# 2、表查询\n\n#排序\nSELECT * FROM `tableName` ORDER BY colName desc, colName asc \n#将字符型的 数字（ID_）转成数字来排序 +0 或 *1\nSELECT * FROM `tableName` order by ID_+0 asc; \n\n#分组\nSELECT `colName `,count(*) as total FROM `tableName` GROUP BY colName \n\n#查询 最后 10 条数据（id 自增）\nselect * from wy_user order by id desc limit 10;\n\n#按某一列的值的长度查找，UTF8 编码中文长度为 3\nSELECT * FROM `bs_member` WHERE city like '%北京%' and length(city) > 7\n\n\n#查询重复记录\nSELECT\n    id,email\nFROM\n    wy_user2\nWHERE\n    id IN (\n        SELECT\n            id\n        FROM\n            wy_user2\n        GROUP BY\n            email\n        HAVING\n            count(email) > 1\n    )\n    \n    \n#删除重复记录，并保留id最小的记录\ndelete from wy_user2 where id not in (select minid from (select min(id) as minid from wy_user2 group by email) b);\n\n\n# 3、索引相关\n\n#添加主键索引\n#它 是一种特殊的唯一索引，不允许有空值\nALTER TABLE `table_name` ADD PRIMARY KEY ( `column` ) \n\n#添加唯一索引\n#与\"普通索引\"类似，不同的就是：索引列的值必须唯一，但允许有空值。\nALTER TABLE `table_name` ADD UNIQUE ( `column` ) \n\n#添加普通索引\nALTER TABLE `table_name` ADD INDEX index_name ( `column` ) \nALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` ) \n\n#添加全文索引\n#仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时好空间 (适用于，大块数据，如文章内容)\nALTER TABLE `table_name` ADD FULLTEXT ( `column`) \n\n#查看表的索引信息\nshow index from table1\n\n#删除索引\nDROP INDEX index_name ON table_name \n\n#查询时禁止使用主键索引\nselect * from tableName ignore index(PRI)\n\n#查询时禁止使用某些索引\nselect * from tableName ignore index(PRI, indexName) \n\n#查询时强制使用主键索引\nselect * from tableName force index(PRI)\n\n#查询时强制使用某些索引\nselect * from tableName force index(PRI, indexName)\n\n\n\n# 4、数据备份与导入\n\n#数据库备份\n/usr/local/mysql/bin/mysqldump -u root -p lemon > lemon.sql /usr/local/mysql/bin/mysqldump -u root -p dbName tableName --where=\"...\" > table.sql \n\n#将 CSV 文件导入 Mysql 中\nLOAD DATA LOCAL INFILE '/home/db-friend/aff11.csv' into table user1 FIELDS TERMINATED BY ',' lines terminated by '\\n' ignore 1 lines (pwsid,email,country,sex,birthday,state,zip,ip); \n",normalizedContent:"# mysql常用命令\n\n将常用到的mysql的一些命令在这里做个记录，便于查询和更新。\n\nmysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码，这时候第一次登录mysql数据库时需要修改这个生成的默认密码。\n\nsystemctl start mysqld.service 启动\nsystemctl stop mysqld.service 停止\nsystemctl restart mysqld.service 重启\n\n#mysql配置文件\netc/my.cnf \n\n\n\n# 数据库管理命令\n\n# 1、登入数据库相关\n\n登录数据库\n\n#登录数据库\nmysql -h localhost -u root -p dbname\n\n#本地\nmysql -u root -p\n>输入密码\n\n\n#查看数据库信息\nselect version();   #查看mysql当前的版本\nshow databases;     #查看有哪些数据库\nuse testdb;         #切换数据库\nshow tables;        #查看表\nshow engines;       #查看存储引擎\n\n\n# 2、用户相关\n\nselect user,host,password from mysql.user; #查询mysql数据库用户\n\ncreate user 'test@%' identified by \"123456\";                #创建用户\ncreate user 'username'@'localhost' identified by 'password';#创建用户\n\n\n#某个用户从某台机器访问本台mysql服务器\ngrant all on dbname.tablename to user1@192.168.67.1;        #用户授权\n#mysql8授权：\ngrant select, insert on db.* to 'username'@'%';             #用户授权\ngrant all privileges on db.* to 'username'@'localhost';     #用户授权\n\nshow grants for user_name@localhost;                #查看用户权限\n\n\nalter user 'root'@'localhost' identified by 'password';     #修改用户密码\n\n#上面新建用户，修改用户密码，给用户授权后使用\nflush privileges;                                   #刷新权限\n\n\n# 3、数据库配置相关\n\n#创建数据库\n#utf8_bin 区分大小写，utf8_general_ci 不区分大小写\ncreate database if not exists test default charset utf8 collate utf8_bin; \n\n#查看 mysql 加载配置文件的顺序\n#后面的配置会覆盖前面相同的配置项\nmysqld --help --verbose | grep -a 1 'default options'\n\n#查看mysql的一些配置\n#比如查看mysql的数据库文件存放在那个目录就可以用下面的命令\nshow variables where variable_name ='datadir'; \n\n#关闭更新时的安全模式\nset sql_safe_updates=0;\n\n#关闭自动提交\nset autocommit=0; # 只对当前会话生效\n\n#设置自增从 10000 开始\nalter table tablename auto_increment=10000; \n\n#关闭外键 约束\nselect @@foreign_key_checks; \nset foreign_key_checks=1; // 开启外键约束 \nset foreign_key_checks=0; // 关闭外键约束 \n\n#查看大小写是否敏感\n#mysql中控制数据库名和表名的大小写敏感由参数lower_case_table_names控制，为0时表示区分大小写，为1时，表示将名字转化为小写后存储，不区分大小写并且以_ci（大小写不敏感）、_cs（大小写敏感）或_bin 大小写敏感\nshow variables like '%case%'; \n\n# 查看安装的plugin\nshow plugins; \n\n\n# 4、日志相关\n\n#查看参数值\nshow variables like \"%log%\"; \n\n#查看错误日志的存放位置\nshow variables like '%log_error%';\n\n#刷新binlog\n# 在mysql中flush logs操作会生成一个新的binlog文件 \nflush logs;\n\n#查看最后一个bin日志\nshow master status; \n\n#清空所有日志\nreset master; \n\n\n# 5、数据库空间查看\n\n#查看数据库占用空间\nselect \n    table_schema,\n    sum(data_length + index_length) / 1024 / 1024 as total_mb,\n    sum(data_length) / 1024 / 1024 as data_mb,\n    sum(index_length) / 1024 / 1024 as index_mb,\n    count(*) as tables,\n    curdate() as today\nfrom\n    information_schema.tables\ngroup by table_schema\norder by 2 desc; \n\n#查看某个数据库表中的情况\nselect \n    table_name,\n    (data_length / 1024 / 1024) as data_mb,\n    (index_length / 1024 / 1024) as index_mb,\n    ((data_length + index_length) / 1024 / 1024) as all_mb,\n    table_rows\nfrom\n    information_schema.tables\nwhere\n    table_schema = 'db_name'; \n\n#查看某个库的具体情况\nshow table status from db_name;\n\n#查看数据库中表碎片的情况\nselect table_schema\n      ,table_name \n      ,engine\n      ,round(((data_length + index_length) / 1024 / 1024), 2) as size_mb\n      ,round(data_free/1024/1024,2) as free_siz_mb\nfrom information_schema.tables \nwhere data_free >=100*1024*1024\norder by free_siz_mb desc;\n\n\n\n# 数据库操作sql语句\n\n# 1、表操作\n\n#查看创建表的sql语句\nshow create table t1; \n\n#表删除\ntruncate table1;        #删除一张表里所有的数据\ndrop table table1;      #删除一张表\n\n#表复制\ncreate table bs_test2 like bs_test1 # 复制表结构 \ninsert into bs_test1 select * from bs_test2; #复制表中的数据 \n\n#给表添加注释\nalter table 表名 comment '注释的内容'\n#查看某个表的注释\nselect table_name,table_comment from information_schema.tables where table_name='表名' \n\n#查询出 数据库 中所有的 表信息\nselect table_name from information_schema.tables where table_schema='数据库名' and table_type='base table'; select * from information_schema.tables where table_schema='数据库名' and table_type='base table'; \n\n#查看一张表 或 一条sql语句的执行情况\n(desc 或 explain) desc select * from bs_member desc bs_member\n\n\n#创建 json 列，创建虚拟列 user_name，address\ncreate table `test` (\n  `id` int(11) not null auto_increment,\n  `info` json not null,\n  `user_name` varchar(128) generated always as (json_extract(`info`,'$.name')) virtual,\n  `address` varchar(128) generated always as (json_extract(`info`,'$.address')) stored,\n  primary key (`id`),\n  key `user_name_index` (`user_name`)\n) engine=innodb auto_increment=4 default charset=utf8\n\n\n# 2、表查询\n\n#排序\nselect * from `tablename` order by colname desc, colname asc \n#将字符型的 数字（id_）转成数字来排序 +0 或 *1\nselect * from `tablename` order by id_+0 asc; \n\n#分组\nselect `colname `,count(*) as total from `tablename` group by colname \n\n#查询 最后 10 条数据（id 自增）\nselect * from wy_user order by id desc limit 10;\n\n#按某一列的值的长度查找，utf8 编码中文长度为 3\nselect * from `bs_member` where city like '%北京%' and length(city) > 7\n\n\n#查询重复记录\nselect\n    id,email\nfrom\n    wy_user2\nwhere\n    id in (\n        select\n            id\n        from\n            wy_user2\n        group by\n            email\n        having\n            count(email) > 1\n    )\n    \n    \n#删除重复记录，并保留id最小的记录\ndelete from wy_user2 where id not in (select minid from (select min(id) as minid from wy_user2 group by email) b);\n\n\n# 3、索引相关\n\n#添加主键索引\n#它 是一种特殊的唯一索引，不允许有空值\nalter table `table_name` add primary key ( `column` ) \n\n#添加唯一索引\n#与\"普通索引\"类似，不同的就是：索引列的值必须唯一，但允许有空值。\nalter table `table_name` add unique ( `column` ) \n\n#添加普通索引\nalter table `table_name` add index index_name ( `column` ) \nalter table `table_name` add index index_name ( `column1`, `column2`, `column3` ) \n\n#添加全文索引\n#仅可用于 myisam 表，针对较大的数据，生成全文索引很耗时好空间 (适用于，大块数据，如文章内容)\nalter table `table_name` add fulltext ( `column`) \n\n#查看表的索引信息\nshow index from table1\n\n#删除索引\ndrop index index_name on table_name \n\n#查询时禁止使用主键索引\nselect * from tablename ignore index(pri)\n\n#查询时禁止使用某些索引\nselect * from tablename ignore index(pri, indexname) \n\n#查询时强制使用主键索引\nselect * from tablename force index(pri)\n\n#查询时强制使用某些索引\nselect * from tablename force index(pri, indexname)\n\n\n\n# 4、数据备份与导入\n\n#数据库备份\n/usr/local/mysql/bin/mysqldump -u root -p lemon > lemon.sql /usr/local/mysql/bin/mysqldump -u root -p dbname tablename --where=\"...\" > table.sql \n\n#将 csv 文件导入 mysql 中\nload data local infile '/home/db-friend/aff11.csv' into table user1 fields terminated by ',' lines terminated by '\\n' ignore 1 lines (pwsid,email,country,sex,birthday,state,zip,ip); \n",charsets:{cjk:!0}},{title:"Nginx常用命令",frontmatter:{title:"Nginx常用命令",date:"2022-01-17T16:35:43.000Z",permalink:"/pages/a1ed3d/",categories:["学习资料","常用命令"],tags:["nginx"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/02.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/05.Nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"学习资料/02.常用命令/05.Nginx常用命令.md",key:"v-097f0cda",path:"/pages/a1ed3d/",headers:[{level:2,title:"nginx常用命令",slug:"nginx常用命令",normalizedTitle:"nginx常用命令",charIndex:2},{level:3,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:7},{level:3,title:"安装配置教程",slug:"安装配置教程",normalizedTitle:"安装配置教程",charIndex:403},{level:3,title:"nginx可视化配置项目",slug:"nginx可视化配置项目",normalizedTitle:"nginx可视化配置项目",charIndex:496}],headersStr:"nginx常用命令 常用命令 安装配置教程 nginx可视化配置项目",content:"# nginx常用命令\n\n\n# 常用命令\n\n查看 Nginx 启动状态\n\nps -ef | grep nginx\n\n\n检查配置文件nginx.conf的正确性命令\n\n/usr/local/webserver/nginx/sbin/nginx -t\n\n\n启动 Nginx\n\n/usr/local/webserver/nginx/sbin/nginx\n\n\nNginx 其他命令\n\n/usr/local/webserver/nginx/sbin/nginx -s reload            # 重新载入配置文件\n/usr/local/webserver/nginx/sbin/nginx -s reopen            # 重启 Nginx\n/usr/local/webserver/nginx/sbin/nginx -s stop              # 停止 Nginx\n\n\n\n# 安装配置教程\n\nnginx官方网站\n\n菜鸟ngnix安装教程\n\nnginx github站点 https://github.com/nginx/nginx\n\nnginx中文文档\n\n\n# nginx可视化配置项目\n\nnginxconfig.io\n\nnginxWebUI",normalizedContent:"# nginx常用命令\n\n\n# 常用命令\n\n查看 nginx 启动状态\n\nps -ef | grep nginx\n\n\n检查配置文件nginx.conf的正确性命令\n\n/usr/local/webserver/nginx/sbin/nginx -t\n\n\n启动 nginx\n\n/usr/local/webserver/nginx/sbin/nginx\n\n\nnginx 其他命令\n\n/usr/local/webserver/nginx/sbin/nginx -s reload            # 重新载入配置文件\n/usr/local/webserver/nginx/sbin/nginx -s reopen            # 重启 nginx\n/usr/local/webserver/nginx/sbin/nginx -s stop              # 停止 nginx\n\n\n\n# 安装配置教程\n\nnginx官方网站\n\n菜鸟ngnix安装教程\n\nnginx github站点 https://github.com/nginx/nginx\n\nnginx中文文档\n\n\n# nginx可视化配置项目\n\nnginxconfig.io\n\nnginxwebui",charsets:{cjk:!0}},{title:"基础知识",frontmatter:{title:"基础知识",date:"2022-04-13T15:40:42.000Z",permalink:"/pages/07cc6a/",categories:["学习资料","Java","Java基础"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/01.Java%E5%9F%BA%E7%A1%80/01.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",relativePath:"学习资料/03.Java/01.Java基础/01.基础知识.md",key:"v-0967cebd",path:"/pages/07cc6a/",headers:[{level:2,title:"类和对象",slug:"类和对象",normalizedTitle:"类和对象",charIndex:2},{level:3,title:"类",slug:"类",normalizedTitle:"类",charIndex:2},{level:3,title:"对象",slug:"对象",normalizedTitle:"对象",charIndex:4},{level:2,title:"抽象类与接口",slug:"抽象类与接口",normalizedTitle:"抽象类与接口",charIndex:1293},{level:3,title:"抽象类",slug:"抽象类",normalizedTitle:"抽象类",charIndex:1293},{level:3,title:"接口",slug:"接口",normalizedTitle:"接口",charIndex:1297},{level:3,title:"接口和抽象类的区别",slug:"接口和抽象类的区别",normalizedTitle:"接口和抽象类的区别",charIndex:2961},{level:2,title:"权限声明",slug:"权限声明",normalizedTitle:"权限声明",charIndex:3071},{level:2,title:"关键字",slug:"关键字",normalizedTitle:"关键字",charIndex:1330},{level:3,title:"Java 关键字",slug:"java-关键字",normalizedTitle:"java 关键字",charIndex:3590},{level:3,title:"static",slug:"static",normalizedTitle:"static",charIndex:141},{level:3,title:"final",slug:"final",normalizedTitle:"final",charIndex:3869},{level:2,title:"重载与重写",slug:"重载与重写",normalizedTitle:"重载与重写",charIndex:5605},{level:3,title:"重载（Overload）",slug:"重载-overload",normalizedTitle:"重载（overload）",charIndex:5615},{level:3,title:"重写（Override）",slug:"重写-override",normalizedTitle:"重写（override）",charIndex:5708},{level:2,title:"参数传递",slug:"参数传递",normalizedTitle:"参数传递",charIndex:5882}],headersStr:"类和对象 类 对象 抽象类与接口 抽象类 接口 接口和抽象类的区别 权限声明 关键字 Java 关键字 static final 重载与重写 重载（Overload） 重写（Override） 参数传递",content:'# 类和对象\n\n\n# 类\n\n对象的类型：定义对象含有的变量和方法。\n\npublic class Car {     \n    // 变量\n    String brand;\n    String description = "this is a car";\n    \n    // static 变量 \n    static int number_of_car;  \n    \n    // 构造方法\n    public car(String brand){        \n        this.brand = brand;\n    } \n    \n    // 方法  \n    public void go(String loc){\n        System.out.print("go to" + loc);\n    }   \n    \n    // static 方法\n    void static showNum(){            \n        System.out.print(number_of_car);\n    }\n    \n    // 初始化块\n    {       \n        number_of_car;                                      \n    }\n    \n    // static 初始化块\n    static{                                                              \n        number_of_car = 0;\n    }\n    \n    // 内部类\n    public class Warranty{\n        public void repair(){\n            System.out.print("repair");\n        }    \n    }\n}\n\n\n * 变量\n\n对象中存储的数据。\n\n * 方法\n\n调用时执行的代码。\n\n * 初始化块\n\n创建对象前自动执行的代码。\n\n * 内部类\n\n定义在类中的类。\n\n * 构造方法\n\n在创建对象时自动执行，不返回任何参数（先执行初始化块，再执行构造方法）。\n\n未定义任何构造方法时，系统会自动添加无参构造方法。\n\n\n# 对象\n\njava 是面向对象的语言：对象包含了状态和行为，用户通过调用对象的方法、改变对象的属性来实现 java 程序的功能。\n\nCar myCar = new Car("BMW");                             // 创建对象       \nmyCar.brand = "Benz";                                   // 修改对象变量                   \nmyCar.go("London");                                     // 调用对象方法\n\n\n\n# 抽象类与接口\n\n\n# 抽象类\n\n抽象类和抽象方法都使用 abstract 关键字进行声明。抽象类一般会包含抽象方法，抽象方法一定位于抽象类中。\n抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类。\n\npublic class Test {\n\n    public static void main(String[] args) {\n        AbstractClassExample ac2 = new AbstractExtendClassExample();\n        ac2.func1();\n    }\n\n    public static abstract class AbstractClassExample {\n\n        protected int x;\n        private int y;\n\n        public abstract void func1();\n\n        public void func2() {\n            System.out.println("func2");\n        }\n    }\n\n    public static class AbstractExtendClassExample extends AbstractClassExample {\n        @Override\n        public void func1() {\n            System.out.println("func1");\n        }\n    }\n}\n\n\n\n# 接口\n\nJDK 1.8 以前，接口中抽象方法必须且默认为 public，不允许实现任何方法。\nJDK 1.8 开始，接口中抽象方法可以且默认为 default，且允许实现 static 和 default 方法。\nJDK 1.9 开始，接口中抽象方法可以是 private。\n\npublic class Test {\n\n    public static void main(String[] args) {\n        InterfaceExample ie2 = new InterfaceImplementExample();\n        ie2.func1();\n        System.out.println(InterfaceExample.x);\n\n    }\n\n    public interface InterfaceExample {\n        void func1();\n\n        default void func2(){\n            System.out.println("func2");\n        }\n\n        int x = 123;\n        // int y;               // \'y\' 没有初始化\n        public int z = 0;       // 在接口种 public 是多余的\n        // private int k = 0;   // 在接口种不支持 private\n        // protected int l = 0; // 在接口种不支持 protected\n        // private void fun3(); // 在接口种不支持 private\n    }\n\n    public static class InterfaceImplementExample implements InterfaceExample {\n        @Override\n        public void func1() {\n            System.out.println("func1");\n        }\n    }\n\n}\n\n\n\n# 接口和抽象类的区别\n\n 1. 接口不能实现普通方法，抽象类可以实现具体的方法、也可以不实现。\n 2. 接口只能定义静态常量，抽象类可以定义非静态变量。\n 3. 一个实体类可以实现多个接口，但只能继承一个抽象类。\n\n\n# 权限声明\n\nJava中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\n\n * default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。\n * private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）\n * public : 对所有类可见。使用对象：类、接口、变量、方法\n * protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。\n\n修饰符         当前类   同一包内   子孙类(同一包)   子孙类(不同包)   其他包\npublic      Y     Y      Y          Y          Y\nprotected   Y     Y      Y          Y/N        N\ndefault     Y     Y      Y          N          N\nprivate     Y     N      N          N          N\n\n\n# 关键字\n\n\n# Java 关键字\n\n类别           关键字            说明\n访问控制         private        私有的\n             protected      受保护的\n             public         公共的\n             default        默认\n类、方法和变量修饰符   abstract       声明抽象\n             class          类\n             extends        扩充,继承\n             final          最终值,不可改变的\n             implements     实现（接口）\n             interface      接口\n             native         本地，原生方法（非 Java 实现）\n             new            新,创建\n             static         静态\n             strictfp       严格,精准\n             synchronized   线程,同步\n             transient      短暂\n             volatile       易失\n程序控制语句       break          跳出循环\n             case           定义一个值以供 switch 选择\n             continue       继续\n             default        默认\n             do             运行\n             else           否则\n             for            循环\n             if             如果\n             instanceof     实例\n             return         返回\n             switch         根据值选择执行\n             while          循环\n错误处理         assert         断言表达式是否为真\n             catch          捕捉异常\n             finally        有没有异常都执行\n             throw          抛出一个异常对象\n             throws         声明一个异常可能被抛出\n             try            捕获异常\n包相关          import         引入\n             package        包\n基本类型         boolean        布尔型\n             byte           字节型\n             char           字符型\n             double         双精度浮点\n             float          单精度浮点\n             int            整型\n             long           长整型\n             short          短整型\n变量引用         super          父类,超类\n             this           本类\n             void           无返回值\n保留关键字        goto           是关键字，但不能使用\n             const          是关键字，但不能使用\n\n\n# static\n\n * static 变量：该变量由该类的所有对象共享，不需要创建对象也可使用。\n * static 方法：允许直接访问，不需要创建对象也可被调用。如 main 方法。\n * static 初始化块：在创建类的第一个对象前自动执行（先执行静态初始化块，再执行初始化块）。\n * static 内部类：外部类对象共享，只能访问外部类的静态成员。\n\n\n# final\n\n * final 常量： 只能赋值一次，不可更改。\n * final 类： 不可被继承。\n * final 方法：（弃用）不可被继承。现在所有的 private 方法都隐式地指定为 final。\n\n\n# 重载与重写\n\n\n# 重载（Overload）\n\n存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。\n\n应该注意的是，返回值不同，其它都相同不算是重载。\n\n\n# 重写（Override）\n\n存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。\n为了满足里式替换原则，重写有以下两个限制:\n\n * 子类方法的访问权限必须大于等于父类方法；\n * 子类方法的返回类型必须是父类方法返回类型或为其子类型。 使用 @Override 注解，可以让编译器帮忙检查是否满足上面的两个限制条件。\n\n\n# 参数传递\n\n值传递：在 Java 方法中传递参数，形参本质是实参的副本。\n\n 1. 参数是基础数据类型：对形参的改变不会影响实参。\n\n 2. 参数是指向对象的引用（包括数组、字符串）：对对象数据进行更改会影响实参，但改变引用指向的对象不会影响实参。\n\npublic class Test{\n    public static void main(){\n        int i = 0;\n        int[] arr = {0};\n        test(i, arr);\n        System.out.println(i);            // 输出为 0\n        System.out.println(arr[0]);       // 输出为 1\n    }\n\n    public static void test(int i, int[] arr){\n        i++;                            // 实参不改变\n        arr[0]++;                       // 实参指向的对象改变\n        arr = new int[]{2};             // 实参不改变\n    }\n}\n',normalizedContent:'# 类和对象\n\n\n# 类\n\n对象的类型：定义对象含有的变量和方法。\n\npublic class car {     \n    // 变量\n    string brand;\n    string description = "this is a car";\n    \n    // static 变量 \n    static int number_of_car;  \n    \n    // 构造方法\n    public car(string brand){        \n        this.brand = brand;\n    } \n    \n    // 方法  \n    public void go(string loc){\n        system.out.print("go to" + loc);\n    }   \n    \n    // static 方法\n    void static shownum(){            \n        system.out.print(number_of_car);\n    }\n    \n    // 初始化块\n    {       \n        number_of_car;                                      \n    }\n    \n    // static 初始化块\n    static{                                                              \n        number_of_car = 0;\n    }\n    \n    // 内部类\n    public class warranty{\n        public void repair(){\n            system.out.print("repair");\n        }    \n    }\n}\n\n\n * 变量\n\n对象中存储的数据。\n\n * 方法\n\n调用时执行的代码。\n\n * 初始化块\n\n创建对象前自动执行的代码。\n\n * 内部类\n\n定义在类中的类。\n\n * 构造方法\n\n在创建对象时自动执行，不返回任何参数（先执行初始化块，再执行构造方法）。\n\n未定义任何构造方法时，系统会自动添加无参构造方法。\n\n\n# 对象\n\njava 是面向对象的语言：对象包含了状态和行为，用户通过调用对象的方法、改变对象的属性来实现 java 程序的功能。\n\ncar mycar = new car("bmw");                             // 创建对象       \nmycar.brand = "benz";                                   // 修改对象变量                   \nmycar.go("london");                                     // 调用对象方法\n\n\n\n# 抽象类与接口\n\n\n# 抽象类\n\n抽象类和抽象方法都使用 abstract 关键字进行声明。抽象类一般会包含抽象方法，抽象方法一定位于抽象类中。\n抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类。\n\npublic class test {\n\n    public static void main(string[] args) {\n        abstractclassexample ac2 = new abstractextendclassexample();\n        ac2.func1();\n    }\n\n    public static abstract class abstractclassexample {\n\n        protected int x;\n        private int y;\n\n        public abstract void func1();\n\n        public void func2() {\n            system.out.println("func2");\n        }\n    }\n\n    public static class abstractextendclassexample extends abstractclassexample {\n        @override\n        public void func1() {\n            system.out.println("func1");\n        }\n    }\n}\n\n\n\n# 接口\n\njdk 1.8 以前，接口中抽象方法必须且默认为 public，不允许实现任何方法。\njdk 1.8 开始，接口中抽象方法可以且默认为 default，且允许实现 static 和 default 方法。\njdk 1.9 开始，接口中抽象方法可以是 private。\n\npublic class test {\n\n    public static void main(string[] args) {\n        interfaceexample ie2 = new interfaceimplementexample();\n        ie2.func1();\n        system.out.println(interfaceexample.x);\n\n    }\n\n    public interface interfaceexample {\n        void func1();\n\n        default void func2(){\n            system.out.println("func2");\n        }\n\n        int x = 123;\n        // int y;               // \'y\' 没有初始化\n        public int z = 0;       // 在接口种 public 是多余的\n        // private int k = 0;   // 在接口种不支持 private\n        // protected int l = 0; // 在接口种不支持 protected\n        // private void fun3(); // 在接口种不支持 private\n    }\n\n    public static class interfaceimplementexample implements interfaceexample {\n        @override\n        public void func1() {\n            system.out.println("func1");\n        }\n    }\n\n}\n\n\n\n# 接口和抽象类的区别\n\n 1. 接口不能实现普通方法，抽象类可以实现具体的方法、也可以不实现。\n 2. 接口只能定义静态常量，抽象类可以定义非静态变量。\n 3. 一个实体类可以实现多个接口，但只能继承一个抽象类。\n\n\n# 权限声明\n\njava中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。java 支持 4 种不同的访问权限。\n\n * default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。\n * private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）\n * public : 对所有类可见。使用对象：类、接口、变量、方法\n * protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。\n\n修饰符         当前类   同一包内   子孙类(同一包)   子孙类(不同包)   其他包\npublic      y     y      y          y          y\nprotected   y     y      y          y/n        n\ndefault     y     y      y          n          n\nprivate     y     n      n          n          n\n\n\n# 关键字\n\n\n# java 关键字\n\n类别           关键字            说明\n访问控制         private        私有的\n             protected      受保护的\n             public         公共的\n             default        默认\n类、方法和变量修饰符   abstract       声明抽象\n             class          类\n             extends        扩充,继承\n             final          最终值,不可改变的\n             implements     实现（接口）\n             interface      接口\n             native         本地，原生方法（非 java 实现）\n             new            新,创建\n             static         静态\n             strictfp       严格,精准\n             synchronized   线程,同步\n             transient      短暂\n             volatile       易失\n程序控制语句       break          跳出循环\n             case           定义一个值以供 switch 选择\n             continue       继续\n             default        默认\n             do             运行\n             else           否则\n             for            循环\n             if             如果\n             instanceof     实例\n             return         返回\n             switch         根据值选择执行\n             while          循环\n错误处理         assert         断言表达式是否为真\n             catch          捕捉异常\n             finally        有没有异常都执行\n             throw          抛出一个异常对象\n             throws         声明一个异常可能被抛出\n             try            捕获异常\n包相关          import         引入\n             package        包\n基本类型         boolean        布尔型\n             byte           字节型\n             char           字符型\n             double         双精度浮点\n             float          单精度浮点\n             int            整型\n             long           长整型\n             short          短整型\n变量引用         super          父类,超类\n             this           本类\n             void           无返回值\n保留关键字        goto           是关键字，但不能使用\n             const          是关键字，但不能使用\n\n\n# static\n\n * static 变量：该变量由该类的所有对象共享，不需要创建对象也可使用。\n * static 方法：允许直接访问，不需要创建对象也可被调用。如 main 方法。\n * static 初始化块：在创建类的第一个对象前自动执行（先执行静态初始化块，再执行初始化块）。\n * static 内部类：外部类对象共享，只能访问外部类的静态成员。\n\n\n# final\n\n * final 常量： 只能赋值一次，不可更改。\n * final 类： 不可被继承。\n * final 方法：（弃用）不可被继承。现在所有的 private 方法都隐式地指定为 final。\n\n\n# 重载与重写\n\n\n# 重载（overload）\n\n存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。\n\n应该注意的是，返回值不同，其它都相同不算是重载。\n\n\n# 重写（override）\n\n存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。\n为了满足里式替换原则，重写有以下两个限制:\n\n * 子类方法的访问权限必须大于等于父类方法；\n * 子类方法的返回类型必须是父类方法返回类型或为其子类型。 使用 @override 注解，可以让编译器帮忙检查是否满足上面的两个限制条件。\n\n\n# 参数传递\n\n值传递：在 java 方法中传递参数，形参本质是实参的副本。\n\n 1. 参数是基础数据类型：对形参的改变不会影响实参。\n\n 2. 参数是指向对象的引用（包括数组、字符串）：对对象数据进行更改会影响实参，但改变引用指向的对象不会影响实参。\n\npublic class test{\n    public static void main(){\n        int i = 0;\n        int[] arr = {0};\n        test(i, arr);\n        system.out.println(i);            // 输出为 0\n        system.out.println(arr[0]);       // 输出为 1\n    }\n\n    public static void test(int i, int[] arr){\n        i++;                            // 实参不改变\n        arr[0]++;                       // 实参指向的对象改变\n        arr = new int[]{2};             // 实参不改变\n    }\n}\n',charsets:{cjk:!0}},{title:"数据类型",frontmatter:{title:"数据类型",date:"2022-04-08T16:43:34.000Z",permalink:"/pages/118174/",categories:["学习资料","Java","Java基础"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/01.Java%E5%9F%BA%E7%A1%80/03.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",relativePath:"学习资料/03.Java/01.Java基础/03.数据类型.md",key:"v-6903b558",path:"/pages/118174/",headers:[{level:2,title:"基本类型",slug:"基本类型",normalizedTitle:"基本类型",charIndex:2},{level:3,title:"八大基本类型",slug:"八大基本类型",normalizedTitle:"八大基本类型",charIndex:11},{level:3,title:"包装类型",slug:"包装类型",normalizedTitle:"包装类型",charIndex:416},{level:3,title:"转换类型",slug:"转换类型",normalizedTitle:"转换类型",charIndex:635},{level:2,title:"数组",slug:"数组",normalizedTitle:"数组",charIndex:892},{level:3,title:"Array 类",slug:"array-类",normalizedTitle:"array 类",charIndex:899},{level:3,title:"Arrays 类",slug:"arrays-类",normalizedTitle:"arrays 类",charIndex:1248},{level:2,title:"字符串",slug:"字符串",normalizedTitle:"字符串",charIndex:2026},{level:3,title:"String类",slug:"string类",normalizedTitle:"string类",charIndex:2034},{level:3,title:"StringBuilder / StringBuffer 类",slug:"stringbuilder-stringbuffer-类",normalizedTitle:"stringbuilder / stringbuffer 类",charIndex:3906},{level:2,title:"大数",slug:"大数",normalizedTitle:"大数",charIndex:4754},{level:3,title:"BigInteger 类",slug:"biginteger-类",normalizedTitle:"biginteger 类",charIndex:4870},{level:3,title:"BigDecimal 类",slug:"bigdecimal-类",normalizedTitle:"bigdecimal 类",charIndex:4830},{level:2,title:"枚举",slug:"枚举",normalizedTitle:"枚举",charIndex:5840},{level:3,title:"枚举定义",slug:"枚举定义",normalizedTitle:"枚举定义",charIndex:5916},{level:3,title:"枚举使用",slug:"枚举使用",normalizedTitle:"枚举使用",charIndex:6173},{level:2,title:"时间",slug:"时间",normalizedTitle:"时间",charIndex:6463},{level:3,title:"Date类",slug:"date类",normalizedTitle:"date类",charIndex:6470},{level:3,title:"Calendar类",slug:"calendar类",normalizedTitle:"calendar类",charIndex:7552},{level:2,title:"泛型",slug:"泛型",normalizedTitle:"泛型",charIndex:9436},{level:3,title:"泛型定义",slug:"泛型定义",normalizedTitle:"泛型定义",charIndex:9443},{level:3,title:"泛型使用",slug:"泛型使用",normalizedTitle:"泛型使用",charIndex:9572}],headersStr:"基本类型 八大基本类型 包装类型 转换类型 数组 Array 类 Arrays 类 字符串 String类 StringBuilder / StringBuffer 类 大数 BigInteger 类 BigDecimal 类 枚举 枚举定义 枚举使用 时间 Date类 Calendar类 泛型 泛型定义 泛型使用",content:'# 基本类型\n\n\n# 八大基本类型\n\nJava 语言提供了八种基本类型，用户无需定义也可以直接使用。其数据保存在相应的方法栈中。\n\n基本数据类型    字节数   默认值     包装数据类型      备注\nbyte      1     0       Byte        \nshort     2     0       Short       \nint       4     0       Integer     \nlong      8     0       Long        \nfloat     4     0.0f    Float       数字后加f\ndouble    8     0.0     Double      \nchar      2     null    Character   必须用单引号\nboolean   1     false   Boolean     \n\n\n# 包装类型\n\n均继承自 Number 抽象类，把基本类型数据封装成对象。基本类型都有对应的包装类型，基本类型和包装类型之间会自动进行转化（装箱与拆箱）\n\n * 基本类型（如int），是一个值。允许不赋初值，系统自动添加默认值。\n * 包装类型（如Integer），是一个对象。实例化必须赋初值，且赋值后不能改变(final)。\n\nInteger x = 2;     // 装箱\nint y = x;         // 拆箱\n\n\n\n# 转换类型\n\n\n\n * 按上图顺序可以自动进行类型转换。但整型转化为浮点型时，如果数据过大可能会导致数据丢失精度。\n\n * 反之则必须进行强制类型转换。但务必小心，超出范围可能会产生意想不到的错误。\n\nint i = \'x\';                  // 自动转换\nchar c = (char)60;            // 强制转换\n\n\n但是包装类型之间的转换，需要使用特殊的方法。\n\nInteger i = l.intValue();\nLong l = i.longValue();\n\n\n\n# 数组\n\n\n# Array 类\n\n数据的集合。本质是一个对象，数据存储在堆区，由引用指向数组首个元素的地址。\n\n# 创建数组\n\n创建数组时，必须确定数组长度和类型。但如果储存的是基本类型，允许不赋初值（使用默认值）。\n\nint[] arr = new int[4];                    // 方法一\nint[] arr = {1,2,3,4};                     // 方法二\nint[] arr = new int[]{1,2,3,4};            // 方法三\n\n\n数组长度：在数组对象中，定义了 length 属性记录了数组长度。\n\nint len = arr.length;                      // 返回数组长度  \n\n\n\n# Arrays 类\n\n对数组进行操作的辅助类，实现了对数组的常用操作。\n\n# 数组排序\n\nsort 方法：可以对数组排序，默认数组数值从小到大排列，用户可以自定义排列顺序，\n\nArrays.sort(arr);                                     // 数组排序\n\n\n# 数组复制\n\ncopyOf/copyOfRange 方法：复制数组。底层调用 System.arrayCopy 的本地方法实现，常用于数组扩容。\n\nint[] arr1 = Arrays.copyOf(arr, 10);                  // 复制数组：前 10 个单位\nint[] arr2 = Arrays.copyOf(arr, 0, arr.length);       // 复制数组：从 0 到 arr.length - 1\n\n\n# 数组转化\n\nasList 方法：将数组转化为列表（List 类），但数组数据必须是包装类型。\n\n调用该方法将数组转换为列表后，在内存中实际还是以数组形式存储。这可能会导致以下两个问题：\n\n 1. 调用 List 类的 add 方法向列表中插入数据，会导致异常；\n 2. 对原数组进行更改，也会导致列表中的数据发生变化。\n\narr[] = new Integer[]{1, 2, 3, 4};                    // 数组必须是包装数据类型\n\nList list = Arrays.asList(arr);                       // 将数组转换为集合（有问题）               \nList list = new ArrayList<>(Arrays.asList(arr));      // 将数组转换为集合（推荐）  \n\n\n\n# 字符串\n\n\n# String类\n\nString 类本质是一个 final 对象，由引用指向存储字符串对象的地址。引用虽然可变，但内存数据不能被更改。\n\n# 创建字符串\n\nString 对象创建后一经赋值不再改变，有以下两种创建方式：\n\n 1. 直接赋值：如果常量池没有，则在常量池新建对象。否则直接使用常量池中已有对象，引用指向常量池。\n 2. 构造方法：如果常量池没有，则在常量池新建对象。无论如何一定会在堆区创建对象，引用指向堆区。\n\nString str1 = "string";                       // 引用指向常量池\nString str2 = "str" + "ing";                  // 引用指向常量池（指向 str1 的字符串对象）\nSystem.out.println(str1==str2);               // true\n\nString str3 = new String("string");           // 引用指向堆区（在堆区新建字符串对象）\nString str4 = new String("string");           // 引用指向堆区（在堆区新建字符串对象）\nSystem.out.println(str1==str3);               // false\nSystem.out.println(str3==str4);               // false\n\nString str5 = str1 + str2;                    // 引用指向堆区\n\nString str6 = str1.intern();           // String.intern()可以保证相同内容的字符串变量引用同一的内存对象。\nSystem.out.println(str1==str6);        // true\n\nString newStr = new String(str1.getBytes("ISO-8859-1"), "GBK");    // 获取指定类型编码对象，按指定类型编码\n\n\n# 常用方法\n\nint len = str.length();                   // 返回字符串长度\n\nString[] strs = str.split(",");           // 按分隔符分解字符串\n\nboolean c = str.contains(str2);           // 判断是否存在子字符串\nint index = str.indexOf(str2);            // 查找子字符串出现的第一个位置，没有返回-1\nint index = str.lastIndexOf(str2);        // 查找子字符串出现的最后一个位置，没有返回-1\n\nString str3 = str1.concat(str2);          // 连接两个字符串\n\nString str2 = str.trim();                 // 去除字符串左右空格　　\nString str2 = str.substring(0,3);         // 截取指定位置（0-2）的子字符串\nString str2 = str.replace("a", "b");      // 新字符 a 替换旧字符 b\n\n\n# 类型转换\n\n// Number > String\n\nString s1 = data.toString();              // data 必须为包装数据类型\nString s2 = Integer.toString(data);       // data 可以为基础数据类型，包括字符数组 char[]\nString s3 = String.valueOf(data);         // data 可以为基础数据类型，包括字符数组 char[]\n\n// String > char\n\nchar c = str.charAt(0);\nchar[] ch = str.toCharArray();\n\n// String > int\n\nint n1 = Integer.parseInt(str);          \nint n2 = Integer.valueOf(str);\n\n\n\n# StringBuilder / StringBuffer 类\n\n由于 String 类不可变性，对其频繁更改往往会产生较多临时变量类，占用大量内存。对此我们通常使用 StringBuilder/StringBuffer 来避免，这两个类允许在原有内存地址对字符串进行操作\n\n * String 不可变，因此是线程安全的\n * StringBuilder 不是线程安全的\n * StringBuffer 是线程安全的，内部使用 synchronized 进行同步\n\n# 创建字符串\n\n必须通过构造方法创建，不可以直接赋值的形式创建：StringBuffer str = "hello";。\n\n字符串默认长度为16，超出后会进行自动扩容。\n\nStringBuffer str1 = new StringBuffer("hello");\nStringBuilder str2 = new StringBuilder("hello");\n\n\n将 StringBuilder / StringBuffer 类转化为 String 类。\n\nString str1 = str.toString();    \n\n\n# 专用方法\n\nStringBuilder / StringBuffer 类可以使用 String 类的全部方法，还新增了以下方法直接对字符串进行修改。\n\nstr.append("add");                 // 末尾添加字符串，也可以是其他基础类型\nstr.insert(0,"insert");            // 指定位置插入字符串，也可以是其他基础类型\nstr.deleteCharAt(6);               // 删除指定位置（6）的字符\nstr.delete(6,8);                   // 删除指定位置（6和7）的字符串\nstr.reverse(str2);                 // 翻转字符串\n\n\n\n# 大数\n\n在 Java 程序中，我们可能会用到一些数值特别巨大、或者小数特别精确的数值，这些数值无法用基础类型表示。因此我们定义了 BigInteger/BigDecimal 类来保存这类数据，实际是以字符串形式在堆区存储。\n\n\n# BigInteger 类\n\n主要用来操作比 long 类型更大的整型数字。\n\n\n# BigDecimal 类\n\n基于 BigInteger 类实现。由于基本浮点数类型(float/double) 会产生精度丢失问题，因此常使用 BigDecimal 类代替。涉及金额必须使用该类。\n\nfloat x = 1.0f;                           \nfloat a = 1.0f - 0.9f;\nfloat b = 0.9f - 0.8f;                    // 约等于 0.1\nSystem.out.println(a == b);               // false\n\nBigDecimal a = new BigDecimal("1.0");     \nBigDecimal b = new BigDecimal("0.9");\nBigDecimal c = new BigDecimal("0.8");     \nBigDecimal x = a.subtract(b);\nBigDecimal y = b.subtract(c);             // 等于 0.1\nSystem.out.println(x.equals(y));          // true\n\n\n# BigInteger 和 BigDecimal 类常用方法\n\nBigDecimal x = a.add(b);                  // 加\nBigDecimal x = a.subtract(b);             // 减\nBigDecimal x = a.multiply(b);             // 乘\nBigDecimal x = a.divide(b);               // 除\nBigDecimal x = a.abs();                   // 绝对值\na.compareTo(b);                           // 比较大小\n\n// BigDecimal 类专用\nBigDecimal x = y.setScale(3, rules);      // 设置精度和保留规则\n\n\n\n# 枚举\n\nJava 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等。\n\n\n# 枚举定义\n\n// 定义枚举类\npublic enum Day {\n    MONDAY, TUESDAY, WEDNESDAY,\n    THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n\n// 使用枚举类\npublic class Demo {\n    public boolean test(Day today){\n        if(today == Day.MONDAY) return true;\n        else teturn false;\n    }\n}\n\n\n\n# 枚举使用\n\n * values(); // 返回枚举类中所有的值。\n * ordinal(); // 方法可以找到每个枚举常量的索引，就像数组索引一样。\n * valueOf(); // 方法返回指定字符串值的枚举常量。\n\nDay[] arr = Day.values();       \nfor(Day day: arr){\n    System.out.println(day + " at index " + day.ordinal());     // 查看值和索引\n}\nSystem.out.println(Color.valueOf("MONDAY"));\n\n\n\n# 时间\n\n\n# Date类\n\njava.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。\n\nDate()                      // 第一个构造函数使用当前日期和时间来初始化对象。\nDate(long millisec)         // 第二个构造函数接收一个参数，该参数是从 1970 年 1 月 1 日起的毫秒数。\n\n\n# 日期格式化（String）\n\nSimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。\n\nDate date = new Date( );\nSimpleDateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");\nSystem.out.println("当前时间为: " + dateFormat.format(date));\n\n\n# 日期格式化（Long）\n\n在日常 Java 开发中，我们最常使用 Long 类型，而不是 Date/Timestamp 类型表示时间。\n\nLong timestamp1 = System.currentTimeMillis();                 // 13 位 精确到 ms\nLong timestamp2 = (System.currentTimeMillis()) / 1000;        // 10 位 精确到 s\n\n\n# 常用方法\n\nlong time = date.getTime();                         // 获取时间戳\nboolean before = date1.before(date2);               // date1 在 date2 时间前就返回true\nboolean after = date1.after(date2);                 // date1 在 date2 时间后就返回true\nboolean equals = date1.equals(date2);               // date1 和 date2 同时间就返回true\nint i = date1.compareTo(date2);                     // 返回 -1，0，1 分别表示 在这之前，相同，在这之后\n\n\n\n# Calendar类\n\nCalendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。\n\nCalendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。\n\nCalendar calendar = Calendar.getInstance();                // 默认是当前日期\n\n\n# Calendar类对象字段类型\n\n常量                      描述\nCalendar.YEAR           年份\nCalendar.MONTH          月份\nCalendar.DATE           日期\nCalendar.DAY_OF_MONTH   日期，和上面的字段意义完全相同\nCalendar.HOUR           12小时制的小时\nCalendar.HOUR_OF_DAY    24小时制的小时\nCalendar.MINUTE         分钟\nCalendar.SECOND         秒\nCalendar.DAY_OF_WEEK    星期几\n\n# 常用方法\n\n * public int get(int field) 返回的是一个日历的字段值\n\nint year = calendar.get(calendar.YEAR);                 // 获取年份\n\nint month = calendar.get(Calendar.MONTH) + 1;           // 获取月份  西方的日历 月份：0--11  东方1--12\n\nint date = calendar.get(Calendar.DATE);                 // 获取日期\n\nint hour = calendar.get(Calendar.HOUR);                 // 获取时\n\nint hours = calendar.get(Calendar.HOUR_OF_DAY);         // 获取时的24小时制\n\nint minute = calendar.get(Calendar.MINUTE);             // 获取分\n\nint second = calendar.get(Calendar.SECOND);             // 获取秒\n\n\n * public int getActualMaximum(int field) 返回字段的最大值\n\nint max = calendar.getActualMaximum(Calendar.MONTH);          // 获取指定字段具备最大值,获得最大月份\n\nint days = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);  //获取当前日历所表示月份的最大天数\n\n\n * public void set(int field,int value) 讲给定的日历字段设置为给定的值\n\ncalendar.set(Calendar.YEAR, 2022);                      // 设置年份\n\ncalendar.set(Calendar.MONTH, 3);                        // 设置月份   这里是4月\n\ncalendar.set(Calendar.DAY_OF_MONTH, 1);                 // 设置日期\n\n\n * public abstract void add(int field,int amount) 根据日历规则，为给定的日历字段添加或者是减去指定的时间量值\n\ncalendar.add(Calendar.YEAR, 1);                         // 月份加一\n\ncalendar.add(Calendar.YEAR, -1);                        // 月份减一\n\n\n * public Date getTime() 返回的是一个表示Calendar时间值(从历元到现在的毫秒偏移量)的Date对象\n\nDate time = calendar.getTime();                         // 获取时间\n\n\n\n# 泛型\n\n\n# 泛型定义\n\n定义类时并不固定数据类型，等到创建对象或调用方法时再明确数据类型。\n\n编译过程中，由编译器检查类型安全，自动隐性地对类的数据类型进行强制转换（Object -> 指定数据类型）。编译后生成的 字节码文件(.class) 将不再含有泛型。\n\n\n# 泛型使用\n\n可使用 A-Z 之间的任何一个字母，常用：\n\n * T (type)： 表示具体的一个 java 类型\n * K V (key value)： 分别代表 java 键值中的 Key Value\n * E (element)： 代表 java 集合框架元素\n * ？：表示不确定的 java 类\n\n// 定义时使用泛型\npublic class Box<T> {\n    private T t;\n    public void set(T t) {\n        this.t = t;\n    }\n    public T get() {\n        return t;\n    }\n} \n\n// 调用时明确类型\nclass Test{\n    static void main(String[] args){\n        Box<Integer> myBox = new Box<>();\n        myBox.set(3);\n        System.out.print(myBox.get());\n    }\n}\n',normalizedContent:'# 基本类型\n\n\n# 八大基本类型\n\njava 语言提供了八种基本类型，用户无需定义也可以直接使用。其数据保存在相应的方法栈中。\n\n基本数据类型    字节数   默认值     包装数据类型      备注\nbyte      1     0       byte        \nshort     2     0       short       \nint       4     0       integer     \nlong      8     0       long        \nfloat     4     0.0f    float       数字后加f\ndouble    8     0.0     double      \nchar      2     null    character   必须用单引号\nboolean   1     false   boolean     \n\n\n# 包装类型\n\n均继承自 number 抽象类，把基本类型数据封装成对象。基本类型都有对应的包装类型，基本类型和包装类型之间会自动进行转化（装箱与拆箱）\n\n * 基本类型（如int），是一个值。允许不赋初值，系统自动添加默认值。\n * 包装类型（如integer），是一个对象。实例化必须赋初值，且赋值后不能改变(final)。\n\ninteger x = 2;     // 装箱\nint y = x;         // 拆箱\n\n\n\n# 转换类型\n\n\n\n * 按上图顺序可以自动进行类型转换。但整型转化为浮点型时，如果数据过大可能会导致数据丢失精度。\n\n * 反之则必须进行强制类型转换。但务必小心，超出范围可能会产生意想不到的错误。\n\nint i = \'x\';                  // 自动转换\nchar c = (char)60;            // 强制转换\n\n\n但是包装类型之间的转换，需要使用特殊的方法。\n\ninteger i = l.intvalue();\nlong l = i.longvalue();\n\n\n\n# 数组\n\n\n# array 类\n\n数据的集合。本质是一个对象，数据存储在堆区，由引用指向数组首个元素的地址。\n\n# 创建数组\n\n创建数组时，必须确定数组长度和类型。但如果储存的是基本类型，允许不赋初值（使用默认值）。\n\nint[] arr = new int[4];                    // 方法一\nint[] arr = {1,2,3,4};                     // 方法二\nint[] arr = new int[]{1,2,3,4};            // 方法三\n\n\n数组长度：在数组对象中，定义了 length 属性记录了数组长度。\n\nint len = arr.length;                      // 返回数组长度  \n\n\n\n# arrays 类\n\n对数组进行操作的辅助类，实现了对数组的常用操作。\n\n# 数组排序\n\nsort 方法：可以对数组排序，默认数组数值从小到大排列，用户可以自定义排列顺序，\n\narrays.sort(arr);                                     // 数组排序\n\n\n# 数组复制\n\ncopyof/copyofrange 方法：复制数组。底层调用 system.arraycopy 的本地方法实现，常用于数组扩容。\n\nint[] arr1 = arrays.copyof(arr, 10);                  // 复制数组：前 10 个单位\nint[] arr2 = arrays.copyof(arr, 0, arr.length);       // 复制数组：从 0 到 arr.length - 1\n\n\n# 数组转化\n\naslist 方法：将数组转化为列表（list 类），但数组数据必须是包装类型。\n\n调用该方法将数组转换为列表后，在内存中实际还是以数组形式存储。这可能会导致以下两个问题：\n\n 1. 调用 list 类的 add 方法向列表中插入数据，会导致异常；\n 2. 对原数组进行更改，也会导致列表中的数据发生变化。\n\narr[] = new integer[]{1, 2, 3, 4};                    // 数组必须是包装数据类型\n\nlist list = arrays.aslist(arr);                       // 将数组转换为集合（有问题）               \nlist list = new arraylist<>(arrays.aslist(arr));      // 将数组转换为集合（推荐）  \n\n\n\n# 字符串\n\n\n# string类\n\nstring 类本质是一个 final 对象，由引用指向存储字符串对象的地址。引用虽然可变，但内存数据不能被更改。\n\n# 创建字符串\n\nstring 对象创建后一经赋值不再改变，有以下两种创建方式：\n\n 1. 直接赋值：如果常量池没有，则在常量池新建对象。否则直接使用常量池中已有对象，引用指向常量池。\n 2. 构造方法：如果常量池没有，则在常量池新建对象。无论如何一定会在堆区创建对象，引用指向堆区。\n\nstring str1 = "string";                       // 引用指向常量池\nstring str2 = "str" + "ing";                  // 引用指向常量池（指向 str1 的字符串对象）\nsystem.out.println(str1==str2);               // true\n\nstring str3 = new string("string");           // 引用指向堆区（在堆区新建字符串对象）\nstring str4 = new string("string");           // 引用指向堆区（在堆区新建字符串对象）\nsystem.out.println(str1==str3);               // false\nsystem.out.println(str3==str4);               // false\n\nstring str5 = str1 + str2;                    // 引用指向堆区\n\nstring str6 = str1.intern();           // string.intern()可以保证相同内容的字符串变量引用同一的内存对象。\nsystem.out.println(str1==str6);        // true\n\nstring newstr = new string(str1.getbytes("iso-8859-1"), "gbk");    // 获取指定类型编码对象，按指定类型编码\n\n\n# 常用方法\n\nint len = str.length();                   // 返回字符串长度\n\nstring[] strs = str.split(",");           // 按分隔符分解字符串\n\nboolean c = str.contains(str2);           // 判断是否存在子字符串\nint index = str.indexof(str2);            // 查找子字符串出现的第一个位置，没有返回-1\nint index = str.lastindexof(str2);        // 查找子字符串出现的最后一个位置，没有返回-1\n\nstring str3 = str1.concat(str2);          // 连接两个字符串\n\nstring str2 = str.trim();                 // 去除字符串左右空格　　\nstring str2 = str.substring(0,3);         // 截取指定位置（0-2）的子字符串\nstring str2 = str.replace("a", "b");      // 新字符 a 替换旧字符 b\n\n\n# 类型转换\n\n// number > string\n\nstring s1 = data.tostring();              // data 必须为包装数据类型\nstring s2 = integer.tostring(data);       // data 可以为基础数据类型，包括字符数组 char[]\nstring s3 = string.valueof(data);         // data 可以为基础数据类型，包括字符数组 char[]\n\n// string > char\n\nchar c = str.charat(0);\nchar[] ch = str.tochararray();\n\n// string > int\n\nint n1 = integer.parseint(str);          \nint n2 = integer.valueof(str);\n\n\n\n# stringbuilder / stringbuffer 类\n\n由于 string 类不可变性，对其频繁更改往往会产生较多临时变量类，占用大量内存。对此我们通常使用 stringbuilder/stringbuffer 来避免，这两个类允许在原有内存地址对字符串进行操作\n\n * string 不可变，因此是线程安全的\n * stringbuilder 不是线程安全的\n * stringbuffer 是线程安全的，内部使用 synchronized 进行同步\n\n# 创建字符串\n\n必须通过构造方法创建，不可以直接赋值的形式创建：stringbuffer str = "hello";。\n\n字符串默认长度为16，超出后会进行自动扩容。\n\nstringbuffer str1 = new stringbuffer("hello");\nstringbuilder str2 = new stringbuilder("hello");\n\n\n将 stringbuilder / stringbuffer 类转化为 string 类。\n\nstring str1 = str.tostring();    \n\n\n# 专用方法\n\nstringbuilder / stringbuffer 类可以使用 string 类的全部方法，还新增了以下方法直接对字符串进行修改。\n\nstr.append("add");                 // 末尾添加字符串，也可以是其他基础类型\nstr.insert(0,"insert");            // 指定位置插入字符串，也可以是其他基础类型\nstr.deletecharat(6);               // 删除指定位置（6）的字符\nstr.delete(6,8);                   // 删除指定位置（6和7）的字符串\nstr.reverse(str2);                 // 翻转字符串\n\n\n\n# 大数\n\n在 java 程序中，我们可能会用到一些数值特别巨大、或者小数特别精确的数值，这些数值无法用基础类型表示。因此我们定义了 biginteger/bigdecimal 类来保存这类数据，实际是以字符串形式在堆区存储。\n\n\n# biginteger 类\n\n主要用来操作比 long 类型更大的整型数字。\n\n\n# bigdecimal 类\n\n基于 biginteger 类实现。由于基本浮点数类型(float/double) 会产生精度丢失问题，因此常使用 bigdecimal 类代替。涉及金额必须使用该类。\n\nfloat x = 1.0f;                           \nfloat a = 1.0f - 0.9f;\nfloat b = 0.9f - 0.8f;                    // 约等于 0.1\nsystem.out.println(a == b);               // false\n\nbigdecimal a = new bigdecimal("1.0");     \nbigdecimal b = new bigdecimal("0.9");\nbigdecimal c = new bigdecimal("0.8");     \nbigdecimal x = a.subtract(b);\nbigdecimal y = b.subtract(c);             // 等于 0.1\nsystem.out.println(x.equals(y));          // true\n\n\n# biginteger 和 bigdecimal 类常用方法\n\nbigdecimal x = a.add(b);                  // 加\nbigdecimal x = a.subtract(b);             // 减\nbigdecimal x = a.multiply(b);             // 乘\nbigdecimal x = a.divide(b);               // 除\nbigdecimal x = a.abs();                   // 绝对值\na.compareto(b);                           // 比较大小\n\n// bigdecimal 类专用\nbigdecimal x = y.setscale(3, rules);      // 设置精度和保留规则\n\n\n\n# 枚举\n\njava 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等。\n\n\n# 枚举定义\n\n// 定义枚举类\npublic enum day {\n    monday, tuesday, wednesday,\n    thursday, friday, saturday, sunday\n}\n\n// 使用枚举类\npublic class demo {\n    public boolean test(day today){\n        if(today == day.monday) return true;\n        else teturn false;\n    }\n}\n\n\n\n# 枚举使用\n\n * values(); // 返回枚举类中所有的值。\n * ordinal(); // 方法可以找到每个枚举常量的索引，就像数组索引一样。\n * valueof(); // 方法返回指定字符串值的枚举常量。\n\nday[] arr = day.values();       \nfor(day day: arr){\n    system.out.println(day + " at index " + day.ordinal());     // 查看值和索引\n}\nsystem.out.println(color.valueof("monday"));\n\n\n\n# 时间\n\n\n# date类\n\njava.util 包提供了 date 类来封装当前的日期和时间。 date 类提供两个构造函数来实例化 date 对象。\n\ndate()                      // 第一个构造函数使用当前日期和时间来初始化对象。\ndate(long millisec)         // 第二个构造函数接收一个参数，该参数是从 1970 年 1 月 1 日起的毫秒数。\n\n\n# 日期格式化（string）\n\nsimpledateformat 是一个以语言环境敏感的方式来格式化和分析日期的类。simpledateformat 允许你选择任何用户自定义日期时间格式来运行。\n\ndate date = new date( );\nsimpledateformat dateformat = new simpledateformat ("yyyy-mm-dd hh:mm:ss");\nsystem.out.println("当前时间为: " + dateformat.format(date));\n\n\n# 日期格式化（long）\n\n在日常 java 开发中，我们最常使用 long 类型，而不是 date/timestamp 类型表示时间。\n\nlong timestamp1 = system.currenttimemillis();                 // 13 位 精确到 ms\nlong timestamp2 = (system.currenttimemillis()) / 1000;        // 10 位 精确到 s\n\n\n# 常用方法\n\nlong time = date.gettime();                         // 获取时间戳\nboolean before = date1.before(date2);               // date1 在 date2 时间前就返回true\nboolean after = date1.after(date2);                 // date1 在 date2 时间后就返回true\nboolean equals = date1.equals(date2);               // date1 和 date2 同时间就返回true\nint i = date1.compareto(date2);                     // 返回 -1，0，1 分别表示 在这之前，相同，在这之后\n\n\n\n# calendar类\n\ncalendar类的功能要比date类强大很多，而且在实现方式上也比date类要复杂一些。\n\ncalendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getinstance方法创建即可。\n\ncalendar calendar = calendar.getinstance();                // 默认是当前日期\n\n\n# calendar类对象字段类型\n\n常量                      描述\ncalendar.year           年份\ncalendar.month          月份\ncalendar.date           日期\ncalendar.day_of_month   日期，和上面的字段意义完全相同\ncalendar.hour           12小时制的小时\ncalendar.hour_of_day    24小时制的小时\ncalendar.minute         分钟\ncalendar.second         秒\ncalendar.day_of_week    星期几\n\n# 常用方法\n\n * public int get(int field) 返回的是一个日历的字段值\n\nint year = calendar.get(calendar.year);                 // 获取年份\n\nint month = calendar.get(calendar.month) + 1;           // 获取月份  西方的日历 月份：0--11  东方1--12\n\nint date = calendar.get(calendar.date);                 // 获取日期\n\nint hour = calendar.get(calendar.hour);                 // 获取时\n\nint hours = calendar.get(calendar.hour_of_day);         // 获取时的24小时制\n\nint minute = calendar.get(calendar.minute);             // 获取分\n\nint second = calendar.get(calendar.second);             // 获取秒\n\n\n * public int getactualmaximum(int field) 返回字段的最大值\n\nint max = calendar.getactualmaximum(calendar.month);          // 获取指定字段具备最大值,获得最大月份\n\nint days = calendar.getactualmaximum(calendar.day_of_month);  //获取当前日历所表示月份的最大天数\n\n\n * public void set(int field,int value) 讲给定的日历字段设置为给定的值\n\ncalendar.set(calendar.year, 2022);                      // 设置年份\n\ncalendar.set(calendar.month, 3);                        // 设置月份   这里是4月\n\ncalendar.set(calendar.day_of_month, 1);                 // 设置日期\n\n\n * public abstract void add(int field,int amount) 根据日历规则，为给定的日历字段添加或者是减去指定的时间量值\n\ncalendar.add(calendar.year, 1);                         // 月份加一\n\ncalendar.add(calendar.year, -1);                        // 月份减一\n\n\n * public date gettime() 返回的是一个表示calendar时间值(从历元到现在的毫秒偏移量)的date对象\n\ndate time = calendar.gettime();                         // 获取时间\n\n\n\n# 泛型\n\n\n# 泛型定义\n\n定义类时并不固定数据类型，等到创建对象或调用方法时再明确数据类型。\n\n编译过程中，由编译器检查类型安全，自动隐性地对类的数据类型进行强制转换（object -> 指定数据类型）。编译后生成的 字节码文件(.class) 将不再含有泛型。\n\n\n# 泛型使用\n\n可使用 a-z 之间的任何一个字母，常用：\n\n * t (type)： 表示具体的一个 java 类型\n * k v (key value)： 分别代表 java 键值中的 key value\n * e (element)： 代表 java 集合框架元素\n * ？：表示不确定的 java 类\n\n// 定义时使用泛型\npublic class box<t> {\n    private t t;\n    public void set(t t) {\n        this.t = t;\n    }\n    public t get() {\n        return t;\n    }\n} \n\n// 调用时明确类型\nclass test{\n    static void main(string[] args){\n        box<integer> mybox = new box<>();\n        mybox.set(3);\n        system.out.print(mybox.get());\n    }\n}\n',charsets:{cjk:!0}},{title:"面向对象",frontmatter:{title:"面向对象",date:"2022-04-11T14:36:09.000Z",permalink:"/pages/15942a/",categories:["学习资料","Java","Java基础"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/01.Java%E5%9F%BA%E7%A1%80/05.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html",relativePath:"学习资料/03.Java/01.Java基础/05.面向对象.md",key:"v-a0ce0a92",path:"/pages/15942a/",headers:[{level:2,title:"什么是面向对象",slug:"什么是面向对象",normalizedTitle:"什么是面向对象",charIndex:2},{level:2,title:"封装",slug:"封装",normalizedTitle:"封装",charIndex:100},{level:2,title:"继承",slug:"继承",normalizedTitle:"继承",charIndex:103},{level:3,title:"类的继承",slug:"类的继承",normalizedTitle:"类的继承",charIndex:1025},{level:3,title:"接口继承",slug:"接口继承",normalizedTitle:"接口继承",charIndex:2215},{level:2,title:"多态",slug:"多态",normalizedTitle:"多态",charIndex:106},{level:3,title:"继承多态",slug:"继承多态",normalizedTitle:"继承多态",charIndex:2840},{level:3,title:"方法多态",slug:"方法多态",normalizedTitle:"方法多态",charIndex:3053},{level:3,title:"代码示例",slug:"代码示例",normalizedTitle:"代码示例",charIndex:3268}],headersStr:"什么是面向对象 封装 继承 类的继承 接口继承 多态 继承多态 方法多态 代码示例",content:'# 什么是面向对象\n\n * 面向过程：根据解决问题的过程，直接设计系统。如 C 语言。\n\n * 面向对象：将问题分解成多个对象，设计模块化、低耦合的系统。如 java 语言。\n   \n   * 特性：封装、继承、多态。\n   \n   * 优点：使系统更加灵活，易维护、易复用、易扩展。\n\n\n# 封装\n\n封装是指把对象的属性和操作（或服务）结合为一个独立的整体，并尽可能隐藏对象的内部实现细节\n\n优点\n\n * 良好的封装能够减少耦合。\n * 类内部的结构可以自由修改。\n * 可以对成员变量进行更精确的控制。\n * 隐藏信息，实现细节。\n\n以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。\n而 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。\n\npublic class Person {\n\n    private String name;\n    private int gender;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public String getGender() {\n        return gender == 0 ? "man" : "woman";\n    }\n\n    public void work() {\n        if (18 <= age && age <= 50) {\n            System.out.println(name + " is working very hard!");\n        } else {\n            System.out.println(name + " can\'t work any more!");\n        }\n    }\n}\n\n\n\n# 继承\n\n继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。\n\n\n# 类的继承\n\n特性\n\n * 子类拥有父类非 private 的属性、方法。\n * 子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\n * 子类可以用自己的方式实现父类的方法。\n * 父类的 static 方法不会被子类继承，子类的 static 方法会隐藏父类的同名 static 方法。\n * 父类的构造方法不会被子类继承，子类必须在构造方法首行调用父类构造方法（先构造父类，再构造子类）\n * 提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。\n * Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。\n\npublic class Animal {\n\n    // public 可以继承\n    public String name;\n\n    //private 不可以继承\n    private int id;\n\n    // 父类构造方法\n    public Animal(String name){\n        this.name = name;\n    }\n\n    public void eat() {\n        //吃东西方法的具体实现\n        System.out.println("animal : eat");\n    }\n    \n    public static void sleep() {\n        //睡觉方法的具体实现}\n        System.out.println("animal ：sleep");\n    }\n}\n\npublic class Dog extends Animal {\n\n    // 扩展属性\n    private int age;\n\n    // 扩展方法\n    public void go(){\n\n    }\n\n    // 子类构造方法\n    public Dog(String name){\n        super(name);\n        this.name = name;\n    }\n\n    // 重写方法\n    @Override\n    public void eat(){\n        System.out.println("dog : eat");\n    }\n}\n\n\n> Object 类是一切 java 类的父类。对于普通的 java 类,即便不声明也默认继承了 Object 类。\n\n----------------------------------------\n\n\n# 接口继承\n\n和类的继承类似。但 Java 类只能单继承，而 Java 接口可以多继承。\n\npublic interface A {\n    public void eat();\n    public void sleep();\n}\n\npublic interface B {\n    public void show();\n}\n\npublic class C implements A,B {\n    @Override\n    public void eat() {\n        \n    }\n\n    @Override\n    public void sleep() {\n\n    }\n\n    @Override\n    public void show() {\n\n    }\n}\n\n\n\n# 多态\n\n多态是同一个行为具有多个不同表现形式或形态的能力。\n多态就是同一个接口，使用不同的实例而执行不同操作。\n\n优点\n\n * 消除类型直接的耦合关系\n * 消除类型之间的耦合关系\n * 可替换性\n * 可扩充性\n * 接口性\n * 灵活性\n * 简化性\n\n三个必要条件\n\n * 继承\n * 重写\n * 父类引用指向子类对象: Animal animal = new Dog();\n\n * 重载(overload)：定义多种同名方法，调用时根据传入参数判定调用哪种方法。\n * 重写(override)：子类定义完全相同的方法覆盖父类。\n\n\n# 继承多态\n\n重写是多态的前提，其允许父类引用指向子类对象（引用类型为父类，指向的实际对象类型为子类）。\n\nAnimal animal = new Dog();\n\n但不允许子类引用指向父类对象。\n\nDog dog = new Animal();\n\n如果两个类之间存在继承关系，可以进行强制类型转换。强制类型转换只能改变引用类型，实际指向对象类型不会发生变化。\n\nAnimal animal = (Animal)dog;\n\n\n# 方法多态\n\n * 调用普通方法\n   \n   子类同名方法会覆盖父类。执行方法根据实际对象类型来判定，即执行子类重写的方法。\n\n * 调用 static / private / final 以及构造方法\n   \n   特殊方法不能被覆盖，不存在多态。执行方法会根据引用类型来判定，即执行父类方法。\n\n * 调用成员变量\n   \n   父类属性值不会被子类继承，不存在多态。调用变量会根据引用类型来判定，即得到父类属性值。\n\n\n# 代码示例\n\npublic class Test {\n    public static void main(String[] args) {\n      show(new Cat());  // 以 Cat 对象调用 show 方法\n      show(new Dog());  // 以 Dog 对象调用 show 方法\n                \n      Animal a = new Cat();  // 向上转型  \n      a.eat();               // 调用的是 Cat 的 eat\n      Cat c = (Cat)a;        // 向下转型  \n      c.work();        // 调用的是 Cat 的 work\n  }  \n            \n    public static void show(Animal a)  {\n      a.eat();  \n        // 类型判断\n        if (a instanceof Cat)  {  // 猫做的事情 \n            Cat c = (Cat)a;  \n            c.work();  \n        } else if (a instanceof Dog) { // 狗做的事情 \n            Dog c = (Dog)a;  \n            c.work();  \n        }  \n    }  \n}\n \nabstract class Animal {\n    abstract void eat();  \n}  \n  \nclass Cat extends Animal {  \n    public void eat() {  \n        System.out.println("吃鱼");  \n    }  \n    public void work() {  \n        System.out.println("抓老鼠");  \n    }  \n}  \n  \nclass Dog extends Animal {  \n    public void eat() {  \n        System.out.println("吃骨头");  \n    }  \n    public void work() {  \n        System.out.println("看家");  \n    }  \n}\n',normalizedContent:'# 什么是面向对象\n\n * 面向过程：根据解决问题的过程，直接设计系统。如 c 语言。\n\n * 面向对象：将问题分解成多个对象，设计模块化、低耦合的系统。如 java 语言。\n   \n   * 特性：封装、继承、多态。\n   \n   * 优点：使系统更加灵活，易维护、易复用、易扩展。\n\n\n# 封装\n\n封装是指把对象的属性和操作（或服务）结合为一个独立的整体，并尽可能隐藏对象的内部实现细节\n\n优点\n\n * 良好的封装能够减少耦合。\n * 类内部的结构可以自由修改。\n * 可以对成员变量进行更精确的控制。\n * 隐藏信息，实现细节。\n\n以下 person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。\n而 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。\n\npublic class person {\n\n    private string name;\n    private int gender;\n    private int age;\n\n    public string getname() {\n        return name;\n    }\n\n    public string getgender() {\n        return gender == 0 ? "man" : "woman";\n    }\n\n    public void work() {\n        if (18 <= age && age <= 50) {\n            system.out.println(name + " is working very hard!");\n        } else {\n            system.out.println(name + " can\'t work any more!");\n        }\n    }\n}\n\n\n\n# 继承\n\n继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。\n\n\n# 类的继承\n\n特性\n\n * 子类拥有父类非 private 的属性、方法。\n * 子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\n * 子类可以用自己的方式实现父类的方法。\n * 父类的 static 方法不会被子类继承，子类的 static 方法会隐藏父类的同名 static 方法。\n * 父类的构造方法不会被子类继承，子类必须在构造方法首行调用父类构造方法（先构造父类，再构造子类）\n * 提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。\n * java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 b 类继承 a 类，c 类继承 b 类，所以按照关系就是 b 类是 c 类的父类，a 类是 b 类的父类，这是 java 继承区别于 c++ 继承的一个特性。\n\npublic class animal {\n\n    // public 可以继承\n    public string name;\n\n    //private 不可以继承\n    private int id;\n\n    // 父类构造方法\n    public animal(string name){\n        this.name = name;\n    }\n\n    public void eat() {\n        //吃东西方法的具体实现\n        system.out.println("animal : eat");\n    }\n    \n    public static void sleep() {\n        //睡觉方法的具体实现}\n        system.out.println("animal ：sleep");\n    }\n}\n\npublic class dog extends animal {\n\n    // 扩展属性\n    private int age;\n\n    // 扩展方法\n    public void go(){\n\n    }\n\n    // 子类构造方法\n    public dog(string name){\n        super(name);\n        this.name = name;\n    }\n\n    // 重写方法\n    @override\n    public void eat(){\n        system.out.println("dog : eat");\n    }\n}\n\n\n> object 类是一切 java 类的父类。对于普通的 java 类,即便不声明也默认继承了 object 类。\n\n----------------------------------------\n\n\n# 接口继承\n\n和类的继承类似。但 java 类只能单继承，而 java 接口可以多继承。\n\npublic interface a {\n    public void eat();\n    public void sleep();\n}\n\npublic interface b {\n    public void show();\n}\n\npublic class c implements a,b {\n    @override\n    public void eat() {\n        \n    }\n\n    @override\n    public void sleep() {\n\n    }\n\n    @override\n    public void show() {\n\n    }\n}\n\n\n\n# 多态\n\n多态是同一个行为具有多个不同表现形式或形态的能力。\n多态就是同一个接口，使用不同的实例而执行不同操作。\n\n优点\n\n * 消除类型直接的耦合关系\n * 消除类型之间的耦合关系\n * 可替换性\n * 可扩充性\n * 接口性\n * 灵活性\n * 简化性\n\n三个必要条件\n\n * 继承\n * 重写\n * 父类引用指向子类对象: animal animal = new dog();\n\n * 重载(overload)：定义多种同名方法，调用时根据传入参数判定调用哪种方法。\n * 重写(override)：子类定义完全相同的方法覆盖父类。\n\n\n# 继承多态\n\n重写是多态的前提，其允许父类引用指向子类对象（引用类型为父类，指向的实际对象类型为子类）。\n\nanimal animal = new dog();\n\n但不允许子类引用指向父类对象。\n\ndog dog = new animal();\n\n如果两个类之间存在继承关系，可以进行强制类型转换。强制类型转换只能改变引用类型，实际指向对象类型不会发生变化。\n\nanimal animal = (animal)dog;\n\n\n# 方法多态\n\n * 调用普通方法\n   \n   子类同名方法会覆盖父类。执行方法根据实际对象类型来判定，即执行子类重写的方法。\n\n * 调用 static / private / final 以及构造方法\n   \n   特殊方法不能被覆盖，不存在多态。执行方法会根据引用类型来判定，即执行父类方法。\n\n * 调用成员变量\n   \n   父类属性值不会被子类继承，不存在多态。调用变量会根据引用类型来判定，即得到父类属性值。\n\n\n# 代码示例\n\npublic class test {\n    public static void main(string[] args) {\n      show(new cat());  // 以 cat 对象调用 show 方法\n      show(new dog());  // 以 dog 对象调用 show 方法\n                \n      animal a = new cat();  // 向上转型  \n      a.eat();               // 调用的是 cat 的 eat\n      cat c = (cat)a;        // 向下转型  \n      c.work();        // 调用的是 cat 的 work\n  }  \n            \n    public static void show(animal a)  {\n      a.eat();  \n        // 类型判断\n        if (a instanceof cat)  {  // 猫做的事情 \n            cat c = (cat)a;  \n            c.work();  \n        } else if (a instanceof dog) { // 狗做的事情 \n            dog c = (dog)a;  \n            c.work();  \n        }  \n    }  \n}\n \nabstract class animal {\n    abstract void eat();  \n}  \n  \nclass cat extends animal {  \n    public void eat() {  \n        system.out.println("吃鱼");  \n    }  \n    public void work() {  \n        system.out.println("抓老鼠");  \n    }  \n}  \n  \nclass dog extends animal {  \n    public void eat() {  \n        system.out.println("吃骨头");  \n    }  \n    public void work() {  \n        system.out.println("看家");  \n    }  \n}\n',charsets:{cjk:!0}},{title:"异常处理",frontmatter:{title:"异常处理",date:"2022-04-15T17:03:25.000Z",permalink:"/pages/b5379c/",categories:["学习资料","Java","Java基础"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/01.Java%E5%9F%BA%E7%A1%80/07.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",relativePath:"学习资料/03.Java/01.Java基础/07.异常处理.md",key:"v-4174c5c8",path:"/pages/b5379c/",headers:[{level:2,title:"什么是异常",slug:"什么是异常",normalizedTitle:"什么是异常",charIndex:2},{level:2,title:"Throwable类",slug:"throwable类",normalizedTitle:"throwable类",charIndex:73},{level:2,title:"捕获异常",slug:"捕获异常",normalizedTitle:"捕获异常",charIndex:289},{level:3,title:"抛出异常 throw",slug:"抛出异常-throw",normalizedTitle:"抛出异常 throw",charIndex:298},{level:3,title:"捕获异常 try/catch",slug:"捕获异常-try-catch",normalizedTitle:"捕获异常 try/catch",charIndex:1072}],headersStr:"什么是异常 Throwable类 捕获异常 抛出异常 throw 捕获异常 try/catch",content:'# 什么是异常\n\n异常是指程序在运行过程中发生由于硬件、设备问题、软件设计错误等因素导致的程序异常事件，异常的发生往往会中断程序的运行。\n\n\n# Throwable类\n\njava 程序中所有的异常都继承自 Throwable 类，Throwable 类有两个子类 Error 类和 Exception 类：\n\n * Error 类：【错误】表示 java 程序在运行时产生的无法处理的故障（如堆栈溢出），错误出现时会导致程序无法正常执行并强制退出。\n * Exception 类：【异常】表示 java 程序中产生的可以被处理的故障，异常出现时可以由程序进行处理。\n\n\n\n\n# 捕获异常\n\n\n# 抛出异常 throw\n\n当方法执行出现问题时，方法就会创建异常对象并抛出。开发者可以在程序中自行抛出异常；JVM 在执行程序时发现问题也会自动抛出异常。\n\n * throw 语句：开发者自行创建异常对象并抛出，等待程序进行异常处理。\n\n * throws 语句：声明方法可能抛出某种异常且未经处理，调用该方法的上级需要进行异常处理。\n\n\nclass TestException{       \n    // 把方法中的抛出异常交给上层处理     \n    public void writeList(int size) throws IndexOutOfBoundsException, IOException{\n        PrintWriter out = null;\n        // 用户自定义异常并抛出\n        if(size < 1) {\n             throw new IndexOutOfBoundsException("至少要输出1个字符");\n        }\n        try{\n            // 虚拟机自动发现异常也会抛出，必须出现在 try 代码块中\n            out = new PrintWriter(new FileWriter(txt));\n            for (int i = 0; i < size; i++)\n                System.out.println("Value at: " + i + " = " + list.get(i));\n        }finally{\n            if (out != null) out.close();\n        }\n     }\n}\n\n\n\n# 捕获异常 try/catch\n\n当方法执行抛出异常时，必须由专门的代码块对异常进行处理。\n\n * try 语句：可能出现异常的代码块。\n\n * catch 语句：捕获相应异常后停止执行 try 代码，转而执行对应 catch 代码。如果没有异常 catch 代码不会执行。\n\n * finally 语句：无论是否发生异常，finally 代码总会被执行。一般用于释放资源。\n\n注意事项\n\n 1. 如果 try 语句中出现的异常未被 catch，默认将异常 throw 给上层调用者处理。但必须在方法中声明 throws。\n\n 2. try/catch 代码中的 return 语句会在执行完 finally 后再返回，但 finally 中对返回变量的改变不会影响最终的返回结果。\n\n 3. finally 代码中应避免含有 return 语句或抛出异常，否则只会执行 finally 中的 return 语句，且不会向上级抛出异常。\n\nJava 7 后在 try 语句中打开 IO 流，会在跳出后自动关闭流。不必再用 finally 语句关闭。\n\nclass TestException{               \n    public void writeList(int size) {\n        PrintWriter out = null;\n        try {\n            if(size < 1) throw new IndexOutOfBoundsException("至少要输出1个字符");\n            out = new PrintWriter(new FileWriter("OutFile.txt"));\n            for (int i = 0; i < size; i++)\n                System.out.println("Value at: " + i + " = " + list.get(i));\n        } catch (IndexOutOfBoundsException e) {\n            System.err.println("Caught IndexOutOfBoundsException: " + e.getMessage());\n        } catch (IOException e) {\n            System.err.println("Caught IOException: " + e.getMessage());\n        } finally {\n            if (out != null) out.close();\n        }\n    }\n}\n',normalizedContent:'# 什么是异常\n\n异常是指程序在运行过程中发生由于硬件、设备问题、软件设计错误等因素导致的程序异常事件，异常的发生往往会中断程序的运行。\n\n\n# throwable类\n\njava 程序中所有的异常都继承自 throwable 类，throwable 类有两个子类 error 类和 exception 类：\n\n * error 类：【错误】表示 java 程序在运行时产生的无法处理的故障（如堆栈溢出），错误出现时会导致程序无法正常执行并强制退出。\n * exception 类：【异常】表示 java 程序中产生的可以被处理的故障，异常出现时可以由程序进行处理。\n\n\n\n\n# 捕获异常\n\n\n# 抛出异常 throw\n\n当方法执行出现问题时，方法就会创建异常对象并抛出。开发者可以在程序中自行抛出异常；jvm 在执行程序时发现问题也会自动抛出异常。\n\n * throw 语句：开发者自行创建异常对象并抛出，等待程序进行异常处理。\n\n * throws 语句：声明方法可能抛出某种异常且未经处理，调用该方法的上级需要进行异常处理。\n\n\nclass testexception{       \n    // 把方法中的抛出异常交给上层处理     \n    public void writelist(int size) throws indexoutofboundsexception, ioexception{\n        printwriter out = null;\n        // 用户自定义异常并抛出\n        if(size < 1) {\n             throw new indexoutofboundsexception("至少要输出1个字符");\n        }\n        try{\n            // 虚拟机自动发现异常也会抛出，必须出现在 try 代码块中\n            out = new printwriter(new filewriter(txt));\n            for (int i = 0; i < size; i++)\n                system.out.println("value at: " + i + " = " + list.get(i));\n        }finally{\n            if (out != null) out.close();\n        }\n     }\n}\n\n\n\n# 捕获异常 try/catch\n\n当方法执行抛出异常时，必须由专门的代码块对异常进行处理。\n\n * try 语句：可能出现异常的代码块。\n\n * catch 语句：捕获相应异常后停止执行 try 代码，转而执行对应 catch 代码。如果没有异常 catch 代码不会执行。\n\n * finally 语句：无论是否发生异常，finally 代码总会被执行。一般用于释放资源。\n\n注意事项\n\n 1. 如果 try 语句中出现的异常未被 catch，默认将异常 throw 给上层调用者处理。但必须在方法中声明 throws。\n\n 2. try/catch 代码中的 return 语句会在执行完 finally 后再返回，但 finally 中对返回变量的改变不会影响最终的返回结果。\n\n 3. finally 代码中应避免含有 return 语句或抛出异常，否则只会执行 finally 中的 return 语句，且不会向上级抛出异常。\n\njava 7 后在 try 语句中打开 io 流，会在跳出后自动关闭流。不必再用 finally 语句关闭。\n\nclass testexception{               \n    public void writelist(int size) {\n        printwriter out = null;\n        try {\n            if(size < 1) throw new indexoutofboundsexception("至少要输出1个字符");\n            out = new printwriter(new filewriter("outfile.txt"));\n            for (int i = 0; i < size; i++)\n                system.out.println("value at: " + i + " = " + list.get(i));\n        } catch (indexoutofboundsexception e) {\n            system.err.println("caught indexoutofboundsexception: " + e.getmessage());\n        } catch (ioexception e) {\n            system.err.println("caught ioexception: " + e.getmessage());\n        } finally {\n            if (out != null) out.close();\n        }\n    }\n}\n',charsets:{cjk:!0}},{title:"Java集合",frontmatter:{title:"Java集合",date:"2022-04-16T14:21:58.000Z",permalink:"/pages/4cb86a/",categories:["学习资料","Java","集合"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/03.%E9%9B%86%E5%90%88/01.Java%E9%9B%86%E5%90%88.html",relativePath:"学习资料/03.Java/03.集合/01.Java集合.md",key:"v-193cd5cd",path:"/pages/4cb86a/",headers:[{level:2,title:"Java 集合框架",slug:"java-集合框架",normalizedTitle:"java 集合框架",charIndex:2},{level:2,title:"Collection",slug:"collection",normalizedTitle:"collection",charIndex:40},{level:3,title:"List",slug:"list",normalizedTitle:"list",charIndex:159},{level:3,title:"Set",slug:"set",normalizedTitle:"set",charIndex:164},{level:3,title:"Queue",slug:"queue",normalizedTitle:"queue",charIndex:1957},{level:2,title:"Map",slug:"map",normalizedTitle:"map",charIndex:67},{level:3,title:"TreeMap",slug:"treemap",normalizedTitle:"treemap",charIndex:2939},{level:3,title:"HashMap",slug:"hashmap",normalizedTitle:"hashmap",charIndex:273},{level:3,title:"HashTable",slug:"hashtable",normalizedTitle:"hashtable",charIndex:2983},{level:3,title:"LinkedHashMap",slug:"linkedhashmap",normalizedTitle:"linkedhashmap",charIndex:3165}],headersStr:"Java 集合框架 Collection List Set Queue Map TreeMap HashMap HashTable LinkedHashMap",content:'# Java 集合框架\n\nJava 集合框架主要包括两种类型的容器，一种是集合（Collection），存储着对象的集合，另一种是图（Map），存储着键值对(两个对象)的映射表。\n\n\n集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含\n\n * 接口：是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象\n\n * 实现（类）：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。\n\n * 算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。\n   \n\n\n# Collection\n\n\n# List\n\n【列表】元素有序，可以按索引操作。\n\n// 修改\nlist.add("data1");              // 末尾添加元素\nlist.add(0, "data0");           // 插入元素\nlist.remove(0);                 // 按索引删除元素(int)\nlist.remove("data");            // 按内容删除对象元素(Object)\nlist.remove(new Integer(3));    // 按内容删除基础类型元素\nlist.clear();                   // 清除所有元素\nlist.set(0, "data2");           // 修改元素\n\n// 查找\nlist.isEmpty();                 // 判定是否为空\nlist.size();                    // 查询列表元素个数\nlist.contains("data3");         // 判定是否含有元素\nlist.get(1);                    // 按索引查找元素\nlist.indexOf("data1");          // 查询索引号：如果有返回第一个，没有返回-1\nlist.lastIndexOf("data1");      // 查询索引号：如果有返回最后一个，没有返回-1\n\n// 转化\nlist.toString();                // 转化为字符串\nlist.toArray();                 // 转化为 Object[] 数组\n(String [])list.toArray();      // 转化为对象数组，但不能是基础类型\n\n\n# ArrayList\n\n基于动态数组实现，支持随机访问。\n\n# Vector\n\n和 ArrayList 类似，但它是线程安全的。\n\n# LinkedList\n\n基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。\n\n\n# Set\n\n【集】数据不可重复。\n\n// 修改\nset.add("data");              // 添加元素\nset.remove("data");           // 删除元素\nset.clear();                  // 清除所有元素\n\n// 查询\nset.get(1);                   // 按序号查找元素（仅限于有序的 set 接口）\nset.isEmpty();                // 判断是否为空\nset.size();                   // 返回元素个数\nset.contains("data");         // 判定是否含有元素\n\n\nHashSet 类无序，因此不支持 get 方法：获取对象必须要通过 Iterator 来遍历。\n\n# TreeSet\n\n基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。\n\n# HashSet\n\n基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。\n\n# LinkedHashSet\n\n具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。\n\n\n# Queue\n\n【队列】元素有序，在队列尾插入/在队列首移除。常用 Deque 子接口。\n\n//修改\nqueue.offer(10);                // 队列尾插入元素，队列满返回 false\nqueue.peek();                   // 获取队列首元素，队列空返回 null\nqueue.poll();                   // 获取并移除队列首元素，队列空返回 null\nqueue.clear();                  // 清空元素\n\n/* offer/peek/poll 方法可以用 add/get/remove 方法代替，但队列空/满时会抛出异常。 */\n\n// 查找\nqueue.isEmpty();                 // 判定是否为空\nqueue.size();                    // 查询列表元素个数\nqueue.contains("data3");         // 判定是否含有元素\n\n\n# LinkedList\n\n可以用它来实现双向队列。\n\n# PriorityQueue\n\n基于堆结构实现，可以用它来实现优先队列。\n\n\n# Map\n\nmap.put("key_1",1);               // 添加键值对,已有 key 则覆盖 value\nmap.putIfAbsent("key_2",2);       // 添加键值对,已有 key 则不操作\n\nmap.remove("key_1");              // 删除键值对（按值）           \nmap.remove("key_2",2);            // 删除键值对（按键值）\n\nmap.get("key_1");                 // 获取值, key 不存在返回null\nmap.getOrDefault("key_2",-1);     // 获取值, key 不存在返回默认值\n\nmap.containsKey("key_1");       // 判断 key 是否存在  \nmap.containsValue(1);             // 判断 value 是否存在      \n\n\n\n# TreeMap\n\n基于红黑树实现。\n\n\n# HashMap\n\n基于哈希表实现。\n\n\n# HashTable\n\n和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。\n\n\n# LinkedHashMap\n\n使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。',normalizedContent:'# java 集合框架\n\njava 集合框架主要包括两种类型的容器，一种是集合（collection），存储着对象的集合，另一种是图（map），存储着键值对(两个对象)的映射表。\n\n\n集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含\n\n * 接口：是代表集合的抽象数据类型。例如 collection、list、set、map 等。之所以定义多个接口，是为了以不同的方式操作集合对象\n\n * 实现（类）：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：arraylist、linkedlist、hashset、hashmap。\n\n * 算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。\n   \n\n\n# collection\n\n\n# list\n\n【列表】元素有序，可以按索引操作。\n\n// 修改\nlist.add("data1");              // 末尾添加元素\nlist.add(0, "data0");           // 插入元素\nlist.remove(0);                 // 按索引删除元素(int)\nlist.remove("data");            // 按内容删除对象元素(object)\nlist.remove(new integer(3));    // 按内容删除基础类型元素\nlist.clear();                   // 清除所有元素\nlist.set(0, "data2");           // 修改元素\n\n// 查找\nlist.isempty();                 // 判定是否为空\nlist.size();                    // 查询列表元素个数\nlist.contains("data3");         // 判定是否含有元素\nlist.get(1);                    // 按索引查找元素\nlist.indexof("data1");          // 查询索引号：如果有返回第一个，没有返回-1\nlist.lastindexof("data1");      // 查询索引号：如果有返回最后一个，没有返回-1\n\n// 转化\nlist.tostring();                // 转化为字符串\nlist.toarray();                 // 转化为 object[] 数组\n(string [])list.toarray();      // 转化为对象数组，但不能是基础类型\n\n\n# arraylist\n\n基于动态数组实现，支持随机访问。\n\n# vector\n\n和 arraylist 类似，但它是线程安全的。\n\n# linkedlist\n\n基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，linkedlist 还可以用作栈、队列和双向队列。\n\n\n# set\n\n【集】数据不可重复。\n\n// 修改\nset.add("data");              // 添加元素\nset.remove("data");           // 删除元素\nset.clear();                  // 清除所有元素\n\n// 查询\nset.get(1);                   // 按序号查找元素（仅限于有序的 set 接口）\nset.isempty();                // 判断是否为空\nset.size();                   // 返回元素个数\nset.contains("data");         // 判定是否含有元素\n\n\nhashset 类无序，因此不支持 get 方法：获取对象必须要通过 iterator 来遍历。\n\n# treeset\n\n基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 hashset，hashset 查找的时间复杂度为 o(1)，treeset 则为 o(logn)。\n\n# hashset\n\n基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 iterator 遍历 hashset 得到的结果是不确定的。\n\n# linkedhashset\n\n具有 hashset 的查找效率，且内部使用双向链表维护元素的插入顺序。\n\n\n# queue\n\n【队列】元素有序，在队列尾插入/在队列首移除。常用 deque 子接口。\n\n//修改\nqueue.offer(10);                // 队列尾插入元素，队列满返回 false\nqueue.peek();                   // 获取队列首元素，队列空返回 null\nqueue.poll();                   // 获取并移除队列首元素，队列空返回 null\nqueue.clear();                  // 清空元素\n\n/* offer/peek/poll 方法可以用 add/get/remove 方法代替，但队列空/满时会抛出异常。 */\n\n// 查找\nqueue.isempty();                 // 判定是否为空\nqueue.size();                    // 查询列表元素个数\nqueue.contains("data3");         // 判定是否含有元素\n\n\n# linkedlist\n\n可以用它来实现双向队列。\n\n# priorityqueue\n\n基于堆结构实现，可以用它来实现优先队列。\n\n\n# map\n\nmap.put("key_1",1);               // 添加键值对,已有 key 则覆盖 value\nmap.putifabsent("key_2",2);       // 添加键值对,已有 key 则不操作\n\nmap.remove("key_1");              // 删除键值对（按值）           \nmap.remove("key_2",2);            // 删除键值对（按键值）\n\nmap.get("key_1");                 // 获取值, key 不存在返回null\nmap.getordefault("key_2",-1);     // 获取值, key 不存在返回默认值\n\nmap.containskey("key_1");       // 判断 key 是否存在  \nmap.containsvalue(1);             // 判断 value 是否存在      \n\n\n\n# treemap\n\n基于红黑树实现。\n\n\n# hashmap\n\n基于哈希表实现。\n\n\n# hashtable\n\n和 hashmap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 hashtable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 concurrenthashmap 来支持线程安全，并且 concurrenthashmap 的效率会更高，因为 concurrenthashmap 引入了分段锁。\n\n\n# linkedhashmap\n\n使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(lru)顺序。',charsets:{cjk:!0}},{title:"JVM相关知识体系",frontmatter:{title:"JVM相关知识体系",date:"2022-05-13T13:52:14.000Z",permalink:"/pages/c3df4e/",categories:["学习资料","Java","JVM"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/05.JVM/01.JVM%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"学习资料/03.Java/05.JVM/01.JVM相关知识体系.md",key:"v-03fefd3b",path:"/pages/c3df4e/",headers:[{level:2,title:"JVM体系图",slug:"jvm体系图",normalizedTitle:"jvm体系图",charIndex:2},{level:2,title:"JDK1.8",slug:"jdk1-8",normalizedTitle:"jdk1.8",charIndex:15}],headersStr:"JVM体系图 JDK1.8",content:"# JVM体系图\n\n\n\n\n# JDK1.8\n\n",normalizedContent:"# jvm体系图\n\n\n\n\n# jdk1.8\n\n",charsets:{cjk:!0}},{title:"Java IO知识体系图",frontmatter:{title:"Java IO知识体系图",date:"2022-05-13T13:55:15.000Z",permalink:"/pages/27f6bd/",categories:["学习资料","Java","IO"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/07.IO/01.Java%20IO%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E5%9B%BE.html",relativePath:"学习资料/03.Java/07.IO/01.Java IO知识体系图.md",key:"v-61294425",path:"/pages/27f6bd/",headers:[{level:2,title:"Java IO体系图",slug:"java-io体系图",normalizedTitle:"java io体系图",charIndex:2}],headersStr:"Java IO体系图",content:"# Java IO体系图\n\n",normalizedContent:"# java io体系图\n\n",charsets:{cjk:!0}},{title:"Java并发知识体系",frontmatter:{title:"Java并发知识体系",date:"2022-04-22T16:03:30.000Z",permalink:"/pages/5f1d51/",categories:["学习资料","Java","并发"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/09.%E5%B9%B6%E5%8F%91/01.Java%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html",relativePath:"学习资料/03.Java/09.并发/01.Java并发知识体系.md",key:"v-05930a17",path:"/pages/5f1d51/",headers:[{level:2,title:"并行和并发",slug:"并行和并发",normalizedTitle:"并行和并发",charIndex:2},{level:3,title:"并行",slug:"并行",normalizedTitle:"并行",charIndex:2},{level:3,title:"并发",slug:"并发",normalizedTitle:"并发",charIndex:5},{level:2,title:"进程和线程",slug:"进程和线程",normalizedTitle:"进程和线程",charIndex:80},{level:3,title:"进程 Processor",slug:"进程-processor",normalizedTitle:"进程 processor",charIndex:90},{level:3,title:"线程 Thread",slug:"线程-thread",normalizedTitle:"线程 thread",charIndex:210},{level:2,title:"并发体系图",slug:"并发体系图",normalizedTitle:"并发体系图",charIndex:316}],headersStr:"并行和并发 并行 并发 进程和线程 进程 Processor 线程 Thread 并发体系图",content:"# 并行和并发\n\n\n# 并行\n\n多个CPU核心同时工作，处理不同的任务。\n\n\n# 并发\n\n多个任务交替使用 CPU 核心工作，以提高 CPU 利用率。\n\n\n# 进程和线程\n\n\n# 进程 Processor\n\n程序的一次执行。由操作系统创建并分配资源，执行一个单独的任务。\n进程是系统进行资源分配和调度的独立单位，每个进程都有自己的内存空间和系统资源。进程内所有线程共享堆存储空间，保存程序中定义的对象和常量池。\n\n\n# 线程 Thread\n\n进程内的执行单元，不分配单独的资源，执行一个单独的子任务。\n线程是进程内调度和分派的基本单位，共享进程资源。每个线程有自己的独立的栈存储空间，保存线程执行的方法以及基本类型的数据。\n\n\n# 并发体系图\n\n",normalizedContent:"# 并行和并发\n\n\n# 并行\n\n多个cpu核心同时工作，处理不同的任务。\n\n\n# 并发\n\n多个任务交替使用 cpu 核心工作，以提高 cpu 利用率。\n\n\n# 进程和线程\n\n\n# 进程 processor\n\n程序的一次执行。由操作系统创建并分配资源，执行一个单独的任务。\n进程是系统进行资源分配和调度的独立单位，每个进程都有自己的内存空间和系统资源。进程内所有线程共享堆存储空间，保存程序中定义的对象和常量池。\n\n\n# 线程 thread\n\n进程内的执行单元，不分配单独的资源，执行一个单独的子任务。\n线程是进程内调度和分派的基本单位，共享进程资源。每个线程有自己的独立的栈存储空间，保存线程执行的方法以及基本类型的数据。\n\n\n# 并发体系图\n\n",charsets:{cjk:!0}},{title:"Java线程基础",frontmatter:{title:"Java线程基础",date:"2022-04-22T16:15:54.000Z",permalink:"/pages/20b9df/",categories:["学习资料","Java","并发"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/09.%E5%B9%B6%E5%8F%91/03.Java%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80.html",relativePath:"学习资料/03.Java/09.并发/03.Java线程基础.md",key:"v-01780501",path:"/pages/20b9df/",headers:[{level:2,title:"线程使用方式",slug:"线程使用方式",normalizedTitle:"线程使用方式",charIndex:2},{level:3,title:"Runnable 接口",slug:"runnable-接口",normalizedTitle:"runnable 接口",charIndex:13},{level:3,title:"继承 Thread 类",slug:"继承-thread-类",normalizedTitle:"继承 thread 类",charIndex:363},{level:3,title:"Callable 接口",slug:"callable-接口",normalizedTitle:"callable 接口",charIndex:716},{level:2,title:"线程状态",slug:"线程状态",normalizedTitle:"线程状态",charIndex:1220},{level:3,title:"新建(New)",slug:"新建-new",normalizedTitle:"新建(new)",charIndex:1231},{level:3,title:"可运行(Runnable)",slug:"可运行-runnable",normalizedTitle:"可运行(runnable)",charIndex:1317},{level:3,title:"阻塞(Blocking)",slug:"阻塞-blocking",normalizedTitle:"阻塞(blocking)",charIndex:1439},{level:3,title:"无限期等待(Waiting)",slug:"无限期等待-waiting",normalizedTitle:"无限期等待(waiting)",charIndex:1485},{level:3,title:"限期等待(Timed Waiting)",slug:"限期等待-timed-waiting",normalizedTitle:"限期等待(timed waiting)",charIndex:1741},{level:3,title:"死亡(Terminated)",slug:"死亡-terminated",normalizedTitle:"死亡(terminated)",charIndex:2084},{level:2,title:"基础线程机制",slug:"基础线程机制",normalizedTitle:"基础线程机制",charIndex:2132},{level:3,title:"~~Executor（不常用）~~",slug:"executor-不常用",normalizedTitle:"<s>executor（不常用）</s>",charIndex:null},{level:3,title:"Daemon",slug:"daemon",normalizedTitle:"daemon",charIndex:2811},{level:3,title:"sleep()",slug:"sleep",normalizedTitle:"sleep()",charIndex:1861},{level:3,title:"yield()",slug:"yield",normalizedTitle:"yield()",charIndex:3353},{level:2,title:"线程中断",slug:"线程中断",normalizedTitle:"线程中断",charIndex:3513},{level:3,title:"InterruptedException",slug:"interruptedexception",normalizedTitle:"interruptedexception",charIndex:985},{level:3,title:"interrupted()",slug:"interrupted",normalizedTitle:"interrupted()",charIndex:4548},{level:3,title:"Executor 的中断操作",slug:"executor-的中断操作",normalizedTitle:"executor 的中断操作",charIndex:5228},{level:2,title:"线程互斥同步",slug:"线程互斥同步",normalizedTitle:"线程互斥同步",charIndex:6148},{level:3,title:"synchronized",slug:"synchronized",normalizedTitle:"synchronized",charIndex:3687},{level:3,title:"ReentrantLock",slug:"reentrantlock",normalizedTitle:"reentrantlock",charIndex:6227},{level:3,title:"比较",slug:"比较",normalizedTitle:"比较",charIndex:8805},{level:3,title:"使用选择",slug:"使用选择",normalizedTitle:"使用选择",charIndex:9214},{level:2,title:"线程之间的协作",slug:"线程之间的协作",normalizedTitle:"线程之间的协作",charIndex:9397},{level:3,title:"join()",slug:"join",normalizedTitle:"join()",charIndex:1681},{level:3,title:"wait() notify() notifyAll()",slug:"wait-notify-notifyall",normalizedTitle:"wait() notify() notifyall()",charIndex:10278},{level:3,title:"await() signal() signalAll()",slug:"await-signal-signalall",normalizedTitle:"await() signal() signalall()",charIndex:11385}],headersStr:"线程使用方式 Runnable 接口 继承 Thread 类 Callable 接口 线程状态 新建(New) 可运行(Runnable) 阻塞(Blocking) 无限期等待(Waiting) 限期等待(Timed Waiting) 死亡(Terminated) 基础线程机制 ~~Executor（不常用）~~ Daemon sleep() yield() 线程中断 InterruptedException interrupted() Executor 的中断操作 线程互斥同步 synchronized ReentrantLock 比较 使用选择 线程之间的协作 join() wait() notify() notifyAll() await() signal() signalAll()",content:'# 线程使用方式\n\n\n# Runnable 接口\n\n需要实现 run() 方法。\n通过 Thread 调用 start() 方法来启动线程。\n\npublic class MyRunnable implements Runnable {\n    public void run() {\n        // ...\n    }\n}\n\n\npublic class Test {\n    public static void main(String[] args) {\n        MyRunnable instance = new MyRunnable();\n        Thread thread = new Thread(instance);\n        thread.start();\n    }\n}\n\n\n\n# 继承 Thread 类\n\n同样也是需要实现 run() 方法，因为 Thread 类也实现了 Runable 接口。\n当调用 start() 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 run() 方法。\n\npublic class MyThread extends Thread {\n    public void run() {\n        // ...\n    }\n}\n\n\npublic class Test{\n    public static void main(String[] args) {\n        MyThread mt = new MyThread();\n        mt.start();\n    }\n}\n\n\n\n# Callable 接口\n\n与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装。\n\npublic class MyCallable implements Callable<Integer> {\n    public Integer call() {\n        return 123;\n    }\n}\n\n\npublic class Test{\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        MyCallable mc = new MyCallable();\n        FutureTask<Integer> ft = new FutureTask<>(mc);\n        Thread thread = new Thread(ft);\n        thread.start();\n        System.out.println(ft.get());\n    }\n}\n\n\n\n# 线程状态\n\n\n\n\n# 新建(New)\n\n使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。\n\n\n# 可运行(Runnable)\n\n包括Running和Ready。可能正在运行，也可能正在等待 CPU 时间片。 当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。\n\n\n# 阻塞(Blocking)\n\n等待获取一个排它锁，如果其线程释放了锁就会结束此状态。\n\n\n# 无限期等待(Waiting)\n\n处于此状态的线程不会被分配CPU执行时间，需要等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。\n\n进入方法                            退出方法\n没有设置Timeout测试的Object.wait()方法   Object.notify() / Object.notifyAll()\n没有设置Timeout测试的Thread.join()方法   被调用的线程执行完毕\nLockSupport.park()方法            -\n\n\n# 限期等待(Timed Waiting)\n\n处于此状态的线程也不会被分配CPU执行时间，不过无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。\n\n进入方法                           退出方法\nThread.sleep()方法               时间结束\n设置了Timeout测试的Object.wait()方法   时间结束 / Object.notify() / Object.notifyAll()\n设置了Timeout测试的Thread.join()方法   时间结束 / 被调用的线程执行完毕\nLockSupport.parkNanos()方法      -\nLockSupport.parkUntil()方法      -\n\n\n# 死亡(Terminated)\n\n可以是线程结束任务之后自己结束，或者产生了异常而结束。\n\n\n# 基础线程机制\n\n\n# Executor（不常用）\n\nExecutor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。\n这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。\n\n// 单个线程的线程池\nExecutorService service = Executors.newSingleThreadExecutor();\n// 指定数量的线程池\nExecutorService service1 = Executors.newFixedThreadPool(10);\n// 大小不限的线程池，60s 不使用会自动回收空闲线程。\nExecutorService service2 = Executors.newCachedThreadPool();\n// 大小不限的线程池，可定时执行任务。\nExecutorService service3 = Executors.newScheduledThreadPool();\n\n\nExecutors 类示例\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    for (int i = 0; i < 5; i++) {\n        executorService.execute(new MyRunnable());\n    }\n    executorService.shutdown();\n}\n\n\n\n# Daemon\n\n守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。\n当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。\nmain() 属于非守护线程。\n使用 setDaemon() 方法将一个线程设置为守护线程。\n\npublic static void main(String[] args) {\n    Thread thread = new Thread(new MyRunnable());\n    thread.setDaemon(true);\n}\n\n\n\n# sleep()\n\nThread.sleep(millis) 方法会休眠当前正在执行的线程，millis 单位为毫秒。\nsleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。\n\npublic void run() {\n    try {\n        Thread.sleep(3000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n\n\n\n# yield()\n\n对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。\n\npublic void run() {\n    Thread.yield();\n}\n\n\n\n# 线程中断\n\n一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。\n\n\n# InterruptedException\n\n通过调用一个线程的 interrupt() 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 InterruptedException，从而提前结束该线程。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。\n\npublic class Test {\n\n    public static void main(String[] args) throws InterruptedException{\n        Thread thread1 = new MyThread1();\n        thread1.start();\n        thread1.interrupt();\n        System.out.println("Main run");\n    }\n\n    private static class MyThread1 extends Thread {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(2000);\n                System.out.println("Thread run");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n\n在 main() 中启动一个线程之后再中断它，由于线程中调用了 Thread.sleep() 方法，因此会抛出一个 InterruptedException，从而提前结束线程，不执行之后的语句。\n\nMain run\njava.lang.InterruptedException: sleep interrupted\n\tat java.lang.Thread.sleep(Native Method)\n\tat com.springboot.cloud.smartPrison.test.ClientTest$MyThread1.run(Test.java:15)\n\n\n\n# interrupted()\n\n如果一个线程的 run() 方法执行一个无限循环，并且没有执行 sleep() 等会抛出 InterruptedException 的操作，那么调用线程的 interrupt() 方法就无法使线程提前结束。\n但是调用 interrupt() 方法会设置线程的中断标记，此时调用 interrupted() 方法会返回 true。因此可以在循环体中使用 interrupted() 方法来判断线程是否处于中断状态，从而提前结束线程\n\npublic class Test {\n\n    public static void main(String[] args) throws InterruptedException{\n        Thread thread1 = new MyThread1();\n        thread1.start();\n        thread1.interrupt();\n    }\n\n    private static class MyThread1 extends Thread {\n        @Override\n        public void run() {\n            while (!interrupted()) {\n                // ..\n            }\n            System.out.println("Thread end");\n        }\n    }\n}\n\n\nThread end\n\n\n\n# Executor 的中断操作\n\n调用 Executor 的 shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownNow() 方法，则相当于调用每个线程的 interrupt() 方法。\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    executorService.execute(() -> {\n        try {\n            Thread.sleep(2000);\n            System.out.println("Thread run");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    });\n    executorService.shutdownNow();\n    System.out.println("Main run");\n}\n\n\nMain run\njava.lang.InterruptedException: sleep interrupted\n\tat java.lang.Thread.sleep(Native Method)\n\tat com.springboot.cloud.smartPrison.test.ClientTest.lambda$main$0(Test.java:37)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\n\n# 线程互斥同步\n\nJava 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。\n\n\n# synchronized\n\n# 1. 同步一个代码块\n\n它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。\n\npublic class SynchronizedExample {\n\n    public void func1() {\n        synchronized (this) {\n            for (int i = 0; i < 10; i++) {\n                System.out.print(i + " ");\n            }\n        }\n    }\n}\n\n\npublic static void main(String[] args) {\n    SynchronizedExample e1 = new SynchronizedExample();\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    executorService.execute(() -> e1.func1());\n    executorService.execute(() -> e1.func1());\n}\n\n\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n\n\n对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。\n\npublic static void main(String[] args) {\n    SynchronizedExample e1 = new SynchronizedExample();\n    SynchronizedExample e2 = new SynchronizedExample();\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    executorService.execute(() -> e1.func1());\n    executorService.execute(() -> e2.func1());\n}\n\n\n> 数量小不一定能看得出来，可以改大一点数字\n\n0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9\n\n\n# 2. 同步一个方法\n\n和同步代码块一样，作用于同一个对象。\n\npublic synchronized void func () {\n    // ...\n}\n\n\n# 3. 同步一个类\n\n作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。\n\npublic class SynchronizedExample {\n\n    public void func2() {\n        synchronized (SynchronizedExample.class) {\n            for (int i = 0; i < 10; i++) {\n                System.out.print(i + " ");\n            }\n        }\n    }\n}\n\n\npublic static void main(String[] args) {\n    SynchronizedExample e1 = new SynchronizedExample();\n    SynchronizedExample e2 = new SynchronizedExample();\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    executorService.execute(() -> e1.func2());\n    executorService.execute(() -> e2.func2());\n}\n  \n\n\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n\n\n# 4. 同步一个静态方法\n\n作用于整个类\n\npublic synchronized static void fun() {\n    // ...\n}\n\n\n\n# ReentrantLock\n\nReentrantLock 是 java.util.concurrent(J.U.C)包中的锁。\n\npublic class LockExample {\n\n    private Lock lock = new ReentrantLock();\n\n    public void func() {\n        lock.lock();\n        try {\n            for (int i = 0; i < 10; i++) {\n                System.out.print(i + " ");\n            }\n        } finally {\n            lock.unlock(); // 确保释放锁，从而避免发生死锁。\n        }\n    }\n}\n\n\npublic static void main(String[] args) {\n    LockExample lockExample = new LockExample();\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    executorService.execute(() -> lockExample.func());\n    executorService.execute(() -> lockExample.func());\n}\n\n\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 \n\n\n\n# 比较\n\n# 1. 锁的实现\n\nsynchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。\n\n# 2. 性能\n\n新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。\n\n# 3. 等待可中断\n\n当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。\nReentrantLock 可中断，而 synchronized 不行。\n\n# 4. 公平锁\n\n公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。\nsynchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\n\n# 5. 锁绑定多个条件\n\n一个 ReentrantLock 可以同时绑定多个 Condition 对象。\n\n\n# 使用选择\n\n除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放\n\n\n# 线程之间的协作\n\n当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。\n\n\n# join()\n\n在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。\n\npublic class JoinExample {\n\n    private class A extends Thread {\n        @Override\n        public void run() {\n            System.out.println("A");\n        }\n    }\n\n    private class B extends Thread {\n\n        private A a;\n\n        B(A a) {\n            this.a = a;\n        }\n\n        @Override\n        public void run() {\n            try {\n                a.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("B");\n        }\n    }\n\n    public void test() {\n        A a = new A();\n        B b = new B(a);\n        b.start();\n        a.start();\n    }\n}\n\n\npublic static void main(String[] args) {\n    JoinExample example = new JoinExample();\n    example.test();\n}\n\n\nA\nB\n\n\n\n# wait() notify() notifyAll()\n\n调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。\n它们都属于 Object 的一部分，而不属于 Thread。\n只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateExeception。\n使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。\n\npublic class WaitNotifyExample {\n    public synchronized void before() {\n        System.out.println("before");\n        notifyAll();\n    }\n\n    public synchronized void after() {\n        try {\n            wait();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println("after");\n    }\n}\n\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    WaitNotifyExample example = new WaitNotifyExample();\n    executorService.execute(() -> example.after());\n    executorService.execute(() -> example.before());\n}\n\n\nbefore\nafter\n\n\n# wait() 和 sleep() 的区别\n\n * wait() 常叫“挂起一个线程”，sleep() 常叫“使一个线程睡眠”\n * wait() 是 Object 的方法，而 sleep() 是 Thread 的静态方法；\n * wait() 会释放锁，sleep() 不会。\n\n\n# await() signal() signalAll()\n\njava.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。\n\npublic class AwaitSignalExample {\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    public void before() {\n        lock.lock();\n        try {\n            System.out.println("before");\n            condition.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void after() {\n        lock.lock();\n        try {\n            condition.await();\n            System.out.println("after");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n\npublic static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    AwaitSignalExample example = new AwaitSignalExample();\n    executorService.execute(() -> example.after());\n    executorService.execute(() -> example.before());\n}\n\n\nbefore\nafter\n',normalizedContent:'# 线程使用方式\n\n\n# runnable 接口\n\n需要实现 run() 方法。\n通过 thread 调用 start() 方法来启动线程。\n\npublic class myrunnable implements runnable {\n    public void run() {\n        // ...\n    }\n}\n\n\npublic class test {\n    public static void main(string[] args) {\n        myrunnable instance = new myrunnable();\n        thread thread = new thread(instance);\n        thread.start();\n    }\n}\n\n\n\n# 继承 thread 类\n\n同样也是需要实现 run() 方法，因为 thread 类也实现了 runable 接口。\n当调用 start() 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 run() 方法。\n\npublic class mythread extends thread {\n    public void run() {\n        // ...\n    }\n}\n\n\npublic class test{\n    public static void main(string[] args) {\n        mythread mt = new mythread();\n        mt.start();\n    }\n}\n\n\n\n# callable 接口\n\n与 runnable 相比，callable 可以有返回值，返回值通过 futuretask 进行封装。\n\npublic class mycallable implements callable<integer> {\n    public integer call() {\n        return 123;\n    }\n}\n\n\npublic class test{\n    public static void main(string[] args) throws executionexception, interruptedexception {\n        mycallable mc = new mycallable();\n        futuretask<integer> ft = new futuretask<>(mc);\n        thread thread = new thread(ft);\n        thread.start();\n        system.out.println(ft.get());\n    }\n}\n\n\n\n# 线程状态\n\n\n\n\n# 新建(new)\n\n使用 new 关键字和 thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。\n\n\n# 可运行(runnable)\n\n包括running和ready。可能正在运行，也可能正在等待 cpu 时间片。 当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待jvm里线程调度器的调度。\n\n\n# 阻塞(blocking)\n\n等待获取一个排它锁，如果其线程释放了锁就会结束此状态。\n\n\n# 无限期等待(waiting)\n\n处于此状态的线程不会被分配cpu执行时间，需要等待其它线程显式地唤醒，否则不会被分配 cpu 时间片。\n\n进入方法                            退出方法\n没有设置timeout测试的object.wait()方法   object.notify() / object.notifyall()\n没有设置timeout测试的thread.join()方法   被调用的线程执行完毕\nlocksupport.park()方法            -\n\n\n# 限期等待(timed waiting)\n\n处于此状态的线程也不会被分配cpu执行时间，不过无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。\n\n进入方法                           退出方法\nthread.sleep()方法               时间结束\n设置了timeout测试的object.wait()方法   时间结束 / object.notify() / object.notifyall()\n设置了timeout测试的thread.join()方法   时间结束 / 被调用的线程执行完毕\nlocksupport.parknanos()方法      -\nlocksupport.parkuntil()方法      -\n\n\n# 死亡(terminated)\n\n可以是线程结束任务之后自己结束，或者产生了异常而结束。\n\n\n# 基础线程机制\n\n\n# executor（不常用）\n\nexecutor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。\n这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。\n\n// 单个线程的线程池\nexecutorservice service = executors.newsinglethreadexecutor();\n// 指定数量的线程池\nexecutorservice service1 = executors.newfixedthreadpool(10);\n// 大小不限的线程池，60s 不使用会自动回收空闲线程。\nexecutorservice service2 = executors.newcachedthreadpool();\n// 大小不限的线程池，可定时执行任务。\nexecutorservice service3 = executors.newscheduledthreadpool();\n\n\nexecutors 类示例\n\npublic static void main(string[] args) {\n    executorservice executorservice = executors.newcachedthreadpool();\n    for (int i = 0; i < 5; i++) {\n        executorservice.execute(new myrunnable());\n    }\n    executorservice.shutdown();\n}\n\n\n\n# daemon\n\n守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。\n当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。\nmain() 属于非守护线程。\n使用 setdaemon() 方法将一个线程设置为守护线程。\n\npublic static void main(string[] args) {\n    thread thread = new thread(new myrunnable());\n    thread.setdaemon(true);\n}\n\n\n\n# sleep()\n\nthread.sleep(millis) 方法会休眠当前正在执行的线程，millis 单位为毫秒。\nsleep() 可能会抛出 interruptedexception，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。\n\npublic void run() {\n    try {\n        thread.sleep(3000);\n    } catch (interruptedexception e) {\n        e.printstacktrace();\n    }\n}\n\n\n\n# yield()\n\n对静态方法 thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。\n\npublic void run() {\n    thread.yield();\n}\n\n\n\n# 线程中断\n\n一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。\n\n\n# interruptedexception\n\n通过调用一个线程的 interrupt() 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 interruptedexception，从而提前结束该线程。但是不能中断 i/o 阻塞和 synchronized 锁阻塞。\n\npublic class test {\n\n    public static void main(string[] args) throws interruptedexception{\n        thread thread1 = new mythread1();\n        thread1.start();\n        thread1.interrupt();\n        system.out.println("main run");\n    }\n\n    private static class mythread1 extends thread {\n        @override\n        public void run() {\n            try {\n                thread.sleep(2000);\n                system.out.println("thread run");\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n        }\n    }\n}\n\n\n在 main() 中启动一个线程之后再中断它，由于线程中调用了 thread.sleep() 方法，因此会抛出一个 interruptedexception，从而提前结束线程，不执行之后的语句。\n\nmain run\njava.lang.interruptedexception: sleep interrupted\n\tat java.lang.thread.sleep(native method)\n\tat com.springboot.cloud.smartprison.test.clienttest$mythread1.run(test.java:15)\n\n\n\n# interrupted()\n\n如果一个线程的 run() 方法执行一个无限循环，并且没有执行 sleep() 等会抛出 interruptedexception 的操作，那么调用线程的 interrupt() 方法就无法使线程提前结束。\n但是调用 interrupt() 方法会设置线程的中断标记，此时调用 interrupted() 方法会返回 true。因此可以在循环体中使用 interrupted() 方法来判断线程是否处于中断状态，从而提前结束线程\n\npublic class test {\n\n    public static void main(string[] args) throws interruptedexception{\n        thread thread1 = new mythread1();\n        thread1.start();\n        thread1.interrupt();\n    }\n\n    private static class mythread1 extends thread {\n        @override\n        public void run() {\n            while (!interrupted()) {\n                // ..\n            }\n            system.out.println("thread end");\n        }\n    }\n}\n\n\nthread end\n\n\n\n# executor 的中断操作\n\n调用 executor 的 shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownnow() 方法，则相当于调用每个线程的 interrupt() 方法。\n\npublic static void main(string[] args) {\n    executorservice executorservice = executors.newcachedthreadpool();\n    executorservice.execute(() -> {\n        try {\n            thread.sleep(2000);\n            system.out.println("thread run");\n        } catch (interruptedexception e) {\n            e.printstacktrace();\n        }\n    });\n    executorservice.shutdownnow();\n    system.out.println("main run");\n}\n\n\nmain run\njava.lang.interruptedexception: sleep interrupted\n\tat java.lang.thread.sleep(native method)\n\tat com.springboot.cloud.smartprison.test.clienttest.lambda$main$0(test.java:37)\n\tat java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1149)\n\tat java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:624)\n\tat java.lang.thread.run(thread.java:748)\n\n\n\n# 线程互斥同步\n\njava 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 jvm 实现的 synchronized，而另一个是 jdk 实现的 reentrantlock。\n\n\n# synchronized\n\n# 1. 同步一个代码块\n\n它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。\n\npublic class synchronizedexample {\n\n    public void func1() {\n        synchronized (this) {\n            for (int i = 0; i < 10; i++) {\n                system.out.print(i + " ");\n            }\n        }\n    }\n}\n\n\npublic static void main(string[] args) {\n    synchronizedexample e1 = new synchronizedexample();\n    executorservice executorservice = executors.newcachedthreadpool();\n    executorservice.execute(() -> e1.func1());\n    executorservice.execute(() -> e1.func1());\n}\n\n\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n\n\n对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。\n\npublic static void main(string[] args) {\n    synchronizedexample e1 = new synchronizedexample();\n    synchronizedexample e2 = new synchronizedexample();\n    executorservice executorservice = executors.newcachedthreadpool();\n    executorservice.execute(() -> e1.func1());\n    executorservice.execute(() -> e2.func1());\n}\n\n\n> 数量小不一定能看得出来，可以改大一点数字\n\n0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9\n\n\n# 2. 同步一个方法\n\n和同步代码块一样，作用于同一个对象。\n\npublic synchronized void func () {\n    // ...\n}\n\n\n# 3. 同步一个类\n\n作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。\n\npublic class synchronizedexample {\n\n    public void func2() {\n        synchronized (synchronizedexample.class) {\n            for (int i = 0; i < 10; i++) {\n                system.out.print(i + " ");\n            }\n        }\n    }\n}\n\n\npublic static void main(string[] args) {\n    synchronizedexample e1 = new synchronizedexample();\n    synchronizedexample e2 = new synchronizedexample();\n    executorservice executorservice = executors.newcachedthreadpool();\n    executorservice.execute(() -> e1.func2());\n    executorservice.execute(() -> e2.func2());\n}\n  \n\n\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n\n\n# 4. 同步一个静态方法\n\n作用于整个类\n\npublic synchronized static void fun() {\n    // ...\n}\n\n\n\n# reentrantlock\n\nreentrantlock 是 java.util.concurrent(j.u.c)包中的锁。\n\npublic class lockexample {\n\n    private lock lock = new reentrantlock();\n\n    public void func() {\n        lock.lock();\n        try {\n            for (int i = 0; i < 10; i++) {\n                system.out.print(i + " ");\n            }\n        } finally {\n            lock.unlock(); // 确保释放锁，从而避免发生死锁。\n        }\n    }\n}\n\n\npublic static void main(string[] args) {\n    lockexample lockexample = new lockexample();\n    executorservice executorservice = executors.newcachedthreadpool();\n    executorservice.execute(() -> lockexample.func());\n    executorservice.execute(() -> lockexample.func());\n}\n\n\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 \n\n\n\n# 比较\n\n# 1. 锁的实现\n\nsynchronized 是 jvm 实现的，而 reentrantlock 是 jdk 实现的。\n\n# 2. 性能\n\n新版本 java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 reentrantlock 大致相同。\n\n# 3. 等待可中断\n\n当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。\nreentrantlock 可中断，而 synchronized 不行。\n\n# 4. 公平锁\n\n公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。\nsynchronized 中的锁是非公平的，reentrantlock 默认情况下也是非公平的，但是也可以是公平的。\n\n# 5. 锁绑定多个条件\n\n一个 reentrantlock 可以同时绑定多个 condition 对象。\n\n\n# 使用选择\n\n除非需要使用 reentrantlock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 jvm 实现的一种锁机制，jvm 原生地支持它，而 reentrantlock 不是所有的 jdk 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 jvm 会确保锁的释放\n\n\n# 线程之间的协作\n\n当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。\n\n\n# join()\n\n在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。\n\npublic class joinexample {\n\n    private class a extends thread {\n        @override\n        public void run() {\n            system.out.println("a");\n        }\n    }\n\n    private class b extends thread {\n\n        private a a;\n\n        b(a a) {\n            this.a = a;\n        }\n\n        @override\n        public void run() {\n            try {\n                a.join();\n            } catch (interruptedexception e) {\n                e.printstacktrace();\n            }\n            system.out.println("b");\n        }\n    }\n\n    public void test() {\n        a a = new a();\n        b b = new b(a);\n        b.start();\n        a.start();\n    }\n}\n\n\npublic static void main(string[] args) {\n    joinexample example = new joinexample();\n    example.test();\n}\n\n\na\nb\n\n\n\n# wait() notify() notifyall()\n\n调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyall() 来唤醒挂起的线程。\n它们都属于 object 的一部分，而不属于 thread。\n只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 illegalmonitorstateexeception。\n使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyall() 来唤醒挂起的线程，造成死锁。\n\npublic class waitnotifyexample {\n    public synchronized void before() {\n        system.out.println("before");\n        notifyall();\n    }\n\n    public synchronized void after() {\n        try {\n            wait();\n        } catch (interruptedexception e) {\n            e.printstacktrace();\n        }\n        system.out.println("after");\n    }\n}\n\n\npublic static void main(string[] args) {\n    executorservice executorservice = executors.newcachedthreadpool();\n    waitnotifyexample example = new waitnotifyexample();\n    executorservice.execute(() -> example.after());\n    executorservice.execute(() -> example.before());\n}\n\n\nbefore\nafter\n\n\n# wait() 和 sleep() 的区别\n\n * wait() 常叫“挂起一个线程”，sleep() 常叫“使一个线程睡眠”\n * wait() 是 object 的方法，而 sleep() 是 thread 的静态方法；\n * wait() 会释放锁，sleep() 不会。\n\n\n# await() signal() signalall()\n\njava.util.concurrent 类库中提供了 condition 类来实现线程之间的协调，可以在 condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalall() 方法唤醒等待的线程。相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。\n\npublic class awaitsignalexample {\n    private lock lock = new reentrantlock();\n    private condition condition = lock.newcondition();\n\n    public void before() {\n        lock.lock();\n        try {\n            system.out.println("before");\n            condition.signalall();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void after() {\n        lock.lock();\n        try {\n            condition.await();\n            system.out.println("after");\n        } catch (interruptedexception e) {\n            e.printstacktrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n\npublic static void main(string[] args) {\n    executorservice executorservice = executors.newcachedthreadpool();\n    awaitsignalexample example = new awaitsignalexample();\n    executorservice.execute(() -> example.after());\n    executorservice.execute(() -> example.before());\n}\n\n\nbefore\nafter\n',charsets:{cjk:!0}},{title:"SpringBoot整合MybatisPlus",frontmatter:{title:"SpringBoot整合MybatisPlus",date:"2022-03-04T14:31:25.000Z",permalink:"/pages/5f83bc/",categories:["学习资料","Java","SpringBoot实战"],tags:["mybatis"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/18.SpringBoot%E5%AE%9E%E6%88%98/01.SpringBoot%E6%95%B4%E5%90%88MybatisPlus.html",relativePath:"学习资料/03.Java/18.SpringBoot实战/01.SpringBoot整合MybatisPlus.md",key:"v-67ad6d8f",path:"/pages/5f83bc/",headers:[{level:2,title:"1.添加依赖",slug:"_1-添加依赖",normalizedTitle:"1.添加依赖",charIndex:2},{level:2,title:"2.配置",slug:"_2-配置",normalizedTitle:"2.配置",charIndex:1144},{level:3,title:"yml配置",slug:"yml配置",normalizedTitle:"yml配置",charIndex:1153},{level:3,title:"代码生成配置",slug:"代码生成配置",normalizedTitle:"代码生成配置",charIndex:1853},{level:3,title:"分页配置",slug:"分页配置",normalizedTitle:"分页配置",charIndex:3772},{level:3,title:"自动填充配置",slug:"自动填充配置",normalizedTitle:"自动填充配置",charIndex:5018},{level:2,title:"3.使用",slug:"_3-使用",normalizedTitle:"3.使用",charIndex:6116},{level:3,title:"entity层",slug:"entity层",normalizedTitle:"entity层",charIndex:6125},{level:3,title:"mapper层",slug:"mapper层",normalizedTitle:"mapper层",charIndex:6745},{level:3,title:"Iservice层",slug:"iservice层",normalizedTitle:"iservice层",charIndex:6841},{level:3,title:"service层",slug:"service层",normalizedTitle:"service层",charIndex:6842},{level:3,title:"controller层",slug:"controller层",normalizedTitle:"controller层",charIndex:7043}],headersStr:"1.添加依赖 2.配置 yml配置 代码生成配置 分页配置 自动填充配置 3.使用 entity层 mapper层 Iservice层 service层 controller层",content:'# 1.添加依赖\n\n\x3c!--web--\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <version>2.5.5</version>\n</dependency>\n\n\x3c!--mysql--\x3e\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.21</version>\n</dependency>\n\n\x3c!--mybatisPlus--\x3e\n<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-boot-starter</artifactId>\n    <version>3.4.3.4</version>\n</dependency>\n\n\x3c!--mybatis-plus代码生成器--\x3e\n<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-generator</artifactId>\n    <version>3.5.1</version>\n</dependency>\n\n\x3c!--velocity模板--\x3e\n<dependency>\n    <groupId>org.apache.velocity</groupId>\n    <artifactId>velocity-engine-core</artifactId>\n    <version>2.3</version>\n</dependency>\n\n\x3c!--freemarker模板--\x3e\n<dependency>\n    <groupId>org.freemarker</groupId>\n    <artifactId>freemarker</artifactId>\n    <version>2.3.28</version>\n</dependency>\n\n\x3c!--lombok--\x3e\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>1.18.16</version>\n</dependency>\n\n\n\n# 2.配置\n\n\n# yml配置\n\nserver:\n  port: 8080\n\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: root\n    password: 123456\n    url: jdbc:mysql://localhost:3306/myblog?characterEncoding=UTF-8&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai\nlogging:\n  level:\n    com.springboot.cloud: debug\n    java.sql.PreparedStatement: debug\n    com.lawt.repository.mapper: debug\n\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl   #开启sql日志\n    map-underscore-to-camel-case: true      # 该配置就是将带有下划线的表字段映射为驼峰格式的实体类属性\n  global-config:\n    db-config:\n      logic-delete-value: "Y" # 逻辑已删除值(默认为 Y)\n      logic-not-delete-value: "N" # 逻辑未删除值(默认为 N)\n\n\n\n# 代码生成配置\n\nimport com.baomidou.mybatisplus.annotation.FieldFill;\nimport com.baomidou.mybatisplus.generator.FastAutoGenerator;\nimport com.baomidou.mybatisplus.generator.config.DataSourceConfig;\nimport com.baomidou.mybatisplus.generator.fill.Column;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n\n/**\n * 代码生成配置类\n* */\npublic class GeneratorConfig {\n\n    private static final DataSourceConfig.Builder DATA_SOURCE_CONFIG = new DataSourceConfig\n            .Builder("jdbc:mysql://localhost:3306/myshop?characterEncoding=UTF-8&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai","root","123456");\n\n\n    // 处理 all 情况\n    protected static List<String> getTables(String tables) {\n        return "all".equals(tables) ? Collections.emptyList() : Arrays.asList(tables.split(","));\n    }\n\n    public static void main(String[] args) {\n        FastAutoGenerator.create(DATA_SOURCE_CONFIG)\n                // 全局配置\n                .globalConfig((scanner, builder) -> builder.author(scanner.apply("请输入作者名称？")).fileOverride().outputDir(System.getProperty("user.dir")+"\\\\src\\\\main\\\\java"))\n                // 包配置\n                .packageConfig((scanner, builder) -> builder.parent(scanner.apply("请输入包名？")))\n                // 策略配置\n                .strategyConfig((scanner, builder) -> builder.addInclude(getTables(scanner.apply("请输入表名，多个英文逗号分隔？所有输入 all")))\n                        .controllerBuilder().enableRestStyle().enableHyphenStyle()\n                        .entityBuilder().enableLombok().addTableFills(\n                                new Column("created_time", FieldFill.INSERT)\n                        ).build())\n                /*\n                    模板引擎配置，默认 Velocity 可选模板引擎 Beetl 或 Freemarker\n                   .templateEngine(new BeetlTemplateEngine())\n                   .templateEngine(new FreemarkerTemplateEngine())\n                 */\n                .execute();\n\n    }\n    \n}\n\n\n\n# 分页配置\n\nimport com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n/**\n * mybatis-plus 分页\n */\n@Configuration\npublic class MybatisPlusConfig {\n\n    // 最新版\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        // 乐观锁\n        interceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor());\n        // 分页\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.H2));\n        return interceptor;\n    }\n    \n    /**\n     * 逻辑删除\n     */\n    @Bean\n    public ISqlInjector sqlInjector() {\n        return new LogicSqlInjector();\n    }\n    \n    /**\n     * 分页插件\n     */\n    @Bean\n    public PaginationInterceptor paginationInterceptor() {\n        return new PaginationInterceptor();\n    }\n    \n    /**\n     * 乐观锁\n     */\n    @Bean\n    public OptimisticLockerInterceptor optimisticLockerInterceptor() {\n        return new OptimisticLockerInterceptor();\n    }\n\n}\n\n\n\n# 自动填充配置\n\n/**\n * mybatis-plus 自动填充    \n */\n@Slf4j\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        log.info("start insert fill ....");\n        this.strictInsertFill(metaObject, "createTime", LocalDateTime.class, LocalDateTime.now()); // 起始版本 3.3.0(推荐使用)\n        // 或者\n        this.strictInsertFill(metaObject, "createTime", () -> LocalDateTime.now(), LocalDateTime.class); // 起始版本 3.3.3(推荐)\n        // 或者\n        this.fillStrategy(metaObject, "createTime", LocalDateTime.now()); // 也可以使用(3.3.0 该方法有bug)\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        log.info("start update fill ....");\n        this.strictUpdateFill(metaObject, "updateTime", LocalDateTime.class, LocalDateTime.now()); // 起始版本 3.3.0(推荐)\n        // 或者\n        this.strictUpdateFill(metaObject, "updateTime", () -> LocalDateTime.now(), LocalDateTime.class); // 起始版本 3.3.3(推荐)\n        // 或者\n        this.fillStrategy(metaObject, "updateTime", LocalDateTime.now()); // 也可以使用(3.3.0 该方法有bug)\n    }\n}\n\n\n\n# 3.使用\n\n\n# entity层\n\npublic class User implements Serializable {\n    \n    private static final long serialVersionUID = 1L;\n\n    /**\n     * 主键\n     */\n     @TableId(type = IdType.ID_WORKER_STR)\n     private String id;\n\n    /**\n     * 用户名\n     */\n    private String username;\n\n    /**\n     * 加密后的密码\n     */\n    private String password;\n\n\n    /**\n     * 逻辑删除，Y：已删，N：未删\n     */\n    @TableLogic\n    private String deleted;\n\n    /**\n     * 创建时间\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private Date createTime;\n\n    /**\n     * 上次更新时间\n     */\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private Date updateTime;\n}\n\n\n\n# mapper层\n\n@Repository\n@mapper\npublic interface UserMapper extends BaseMapper<User> {\n    \n}\n\n\n\n# Iservice层\n\npublic interface IUserService extends IService<User> {\n    \n}\n\n\n\n# service层\n\n@Service\npublic class UserServiceImpl extends ServiceImpl<UserMapper, User> implements IUserService {\n    \n}\n\n\n\n# controller层\n\n@RestController\n@RequestMapping("/user")\npublic class UserController {\n    \n    @Autowired\n    private IUserService userService;\n    \n    @GetMapping("/hello")\n    public String helloWorld(){\n        return "hello world";\n    }\n    \n}\n',normalizedContent:'# 1.添加依赖\n\n\x3c!--web--\x3e\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-web</artifactid>\n    <version>2.5.5</version>\n</dependency>\n\n\x3c!--mysql--\x3e\n<dependency>\n    <groupid>mysql</groupid>\n    <artifactid>mysql-connector-java</artifactid>\n    <version>8.0.21</version>\n</dependency>\n\n\x3c!--mybatisplus--\x3e\n<dependency>\n    <groupid>com.baomidou</groupid>\n    <artifactid>mybatis-plus-boot-starter</artifactid>\n    <version>3.4.3.4</version>\n</dependency>\n\n\x3c!--mybatis-plus代码生成器--\x3e\n<dependency>\n    <groupid>com.baomidou</groupid>\n    <artifactid>mybatis-plus-generator</artifactid>\n    <version>3.5.1</version>\n</dependency>\n\n\x3c!--velocity模板--\x3e\n<dependency>\n    <groupid>org.apache.velocity</groupid>\n    <artifactid>velocity-engine-core</artifactid>\n    <version>2.3</version>\n</dependency>\n\n\x3c!--freemarker模板--\x3e\n<dependency>\n    <groupid>org.freemarker</groupid>\n    <artifactid>freemarker</artifactid>\n    <version>2.3.28</version>\n</dependency>\n\n\x3c!--lombok--\x3e\n<dependency>\n    <groupid>org.projectlombok</groupid>\n    <artifactid>lombok</artifactid>\n    <version>1.18.16</version>\n</dependency>\n\n\n\n# 2.配置\n\n\n# yml配置\n\nserver:\n  port: 8080\n\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.driver\n    username: root\n    password: 123456\n    url: jdbc:mysql://localhost:3306/myblog?characterencoding=utf-8&useunicode=true&usessl=false&servertimezone=asia/shanghai\nlogging:\n  level:\n    com.springboot.cloud: debug\n    java.sql.preparedstatement: debug\n    com.lawt.repository.mapper: debug\n\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.stdoutimpl   #开启sql日志\n    map-underscore-to-camel-case: true      # 该配置就是将带有下划线的表字段映射为驼峰格式的实体类属性\n  global-config:\n    db-config:\n      logic-delete-value: "y" # 逻辑已删除值(默认为 y)\n      logic-not-delete-value: "n" # 逻辑未删除值(默认为 n)\n\n\n\n# 代码生成配置\n\nimport com.baomidou.mybatisplus.annotation.fieldfill;\nimport com.baomidou.mybatisplus.generator.fastautogenerator;\nimport com.baomidou.mybatisplus.generator.config.datasourceconfig;\nimport com.baomidou.mybatisplus.generator.fill.column;\nimport java.util.arrays;\nimport java.util.collections;\nimport java.util.list;\n\n\n/**\n * 代码生成配置类\n* */\npublic class generatorconfig {\n\n    private static final datasourceconfig.builder data_source_config = new datasourceconfig\n            .builder("jdbc:mysql://localhost:3306/myshop?characterencoding=utf-8&useunicode=true&usessl=false&servertimezone=asia/shanghai","root","123456");\n\n\n    // 处理 all 情况\n    protected static list<string> gettables(string tables) {\n        return "all".equals(tables) ? collections.emptylist() : arrays.aslist(tables.split(","));\n    }\n\n    public static void main(string[] args) {\n        fastautogenerator.create(data_source_config)\n                // 全局配置\n                .globalconfig((scanner, builder) -> builder.author(scanner.apply("请输入作者名称？")).fileoverride().outputdir(system.getproperty("user.dir")+"\\\\src\\\\main\\\\java"))\n                // 包配置\n                .packageconfig((scanner, builder) -> builder.parent(scanner.apply("请输入包名？")))\n                // 策略配置\n                .strategyconfig((scanner, builder) -> builder.addinclude(gettables(scanner.apply("请输入表名，多个英文逗号分隔？所有输入 all")))\n                        .controllerbuilder().enablereststyle().enablehyphenstyle()\n                        .entitybuilder().enablelombok().addtablefills(\n                                new column("created_time", fieldfill.insert)\n                        ).build())\n                /*\n                    模板引擎配置，默认 velocity 可选模板引擎 beetl 或 freemarker\n                   .templateengine(new beetltemplateengine())\n                   .templateengine(new freemarkertemplateengine())\n                 */\n                .execute();\n\n    }\n    \n}\n\n\n\n# 分页配置\n\nimport com.baomidou.mybatisplus.annotation.dbtype;\nimport com.baomidou.mybatisplus.extension.plugins.mybatisplusinterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.paginationinnerinterceptor;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\n/**\n * mybatis-plus 分页\n */\n@configuration\npublic class mybatisplusconfig {\n\n    // 最新版\n    @bean\n    public mybatisplusinterceptor mybatisplusinterceptor() {\n        mybatisplusinterceptor interceptor = new mybatisplusinterceptor();\n        // 乐观锁\n        interceptor.addinnerinterceptor(new optimisticlockerinnerinterceptor());\n        // 分页\n        interceptor.addinnerinterceptor(new paginationinnerinterceptor(dbtype.h2));\n        return interceptor;\n    }\n    \n    /**\n     * 逻辑删除\n     */\n    @bean\n    public isqlinjector sqlinjector() {\n        return new logicsqlinjector();\n    }\n    \n    /**\n     * 分页插件\n     */\n    @bean\n    public paginationinterceptor paginationinterceptor() {\n        return new paginationinterceptor();\n    }\n    \n    /**\n     * 乐观锁\n     */\n    @bean\n    public optimisticlockerinterceptor optimisticlockerinterceptor() {\n        return new optimisticlockerinterceptor();\n    }\n\n}\n\n\n\n# 自动填充配置\n\n/**\n * mybatis-plus 自动填充    \n */\n@slf4j\n@component\npublic class mymetaobjecthandler implements metaobjecthandler {\n\n    @override\n    public void insertfill(metaobject metaobject) {\n        log.info("start insert fill ....");\n        this.strictinsertfill(metaobject, "createtime", localdatetime.class, localdatetime.now()); // 起始版本 3.3.0(推荐使用)\n        // 或者\n        this.strictinsertfill(metaobject, "createtime", () -> localdatetime.now(), localdatetime.class); // 起始版本 3.3.3(推荐)\n        // 或者\n        this.fillstrategy(metaobject, "createtime", localdatetime.now()); // 也可以使用(3.3.0 该方法有bug)\n    }\n\n    @override\n    public void updatefill(metaobject metaobject) {\n        log.info("start update fill ....");\n        this.strictupdatefill(metaobject, "updatetime", localdatetime.class, localdatetime.now()); // 起始版本 3.3.0(推荐)\n        // 或者\n        this.strictupdatefill(metaobject, "updatetime", () -> localdatetime.now(), localdatetime.class); // 起始版本 3.3.3(推荐)\n        // 或者\n        this.fillstrategy(metaobject, "updatetime", localdatetime.now()); // 也可以使用(3.3.0 该方法有bug)\n    }\n}\n\n\n\n# 3.使用\n\n\n# entity层\n\npublic class user implements serializable {\n    \n    private static final long serialversionuid = 1l;\n\n    /**\n     * 主键\n     */\n     @tableid(type = idtype.id_worker_str)\n     private string id;\n\n    /**\n     * 用户名\n     */\n    private string username;\n\n    /**\n     * 加密后的密码\n     */\n    private string password;\n\n\n    /**\n     * 逻辑删除，y：已删，n：未删\n     */\n    @tablelogic\n    private string deleted;\n\n    /**\n     * 创建时间\n     */\n    @tablefield(fill = fieldfill.insert)\n    private date createtime;\n\n    /**\n     * 上次更新时间\n     */\n    @tablefield(fill = fieldfill.insert_update)\n    private date updatetime;\n}\n\n\n\n# mapper层\n\n@repository\n@mapper\npublic interface usermapper extends basemapper<user> {\n    \n}\n\n\n\n# iservice层\n\npublic interface iuserservice extends iservice<user> {\n    \n}\n\n\n\n# service层\n\n@service\npublic class userserviceimpl extends serviceimpl<usermapper, user> implements iuserservice {\n    \n}\n\n\n\n# controller层\n\n@restcontroller\n@requestmapping("/user")\npublic class usercontroller {\n    \n    @autowired\n    private iuserservice userservice;\n    \n    @getmapping("/hello")\n    public string helloworld(){\n        return "hello world";\n    }\n    \n}\n',charsets:{cjk:!0}},{title:"SpringBoot整合SwaggerUI",frontmatter:{title:"SpringBoot整合SwaggerUI",date:"2022-03-03T16:41:04.000Z",permalink:"/pages/5d1537/",categories:["学习资料","Java","SpringBoot实战"],tags:["swagger"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/18.SpringBoot%E5%AE%9E%E6%88%98/02.SpringBoot%E6%95%B4%E5%90%88SwaggerUI.html",relativePath:"学习资料/03.Java/18.SpringBoot实战/02.SpringBoot整合SwaggerUI.md",key:"v-2f299662",path:"/pages/5d1537/",headers:[{level:2,title:"1.添加依赖",slug:"_1-添加依赖",normalizedTitle:"1.添加依赖",charIndex:2},{level:2,title:"2.配置",slug:"_2-配置",normalizedTitle:"2.配置",charIndex:313},{level:3,title:"swagger配置",slug:"swagger配置",normalizedTitle:"swagger配置",charIndex:413},{level:2,title:"3.使用",slug:"_3-使用",normalizedTitle:"3.使用",charIndex:1884},{level:3,title:"常用注解",slug:"常用注解",normalizedTitle:"常用注解",charIndex:1893},{level:3,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:2940}],headersStr:"1.添加依赖 2.配置 swagger配置 3.使用 常用注解 示例",content:'# 1.添加依赖\n\n\x3c!--Swagger-UI API文档生产工具--\x3e\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger2</artifactId>\n  <version>2.9.2</version>\n</dependency>\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger-ui</artifactId>\n  <version>2.9.2</version>\n</dependency>\n\n\n\n# 2.配置\n\n提示\n\nSwagger对生成API文档的范围有三种不同的选择\n\n * 生成指定包下面的类的API文档\n * 生成有指定注解的类的API文档\n * 生成有指定注解的方法的API文档\n\n\n# swagger配置\n\n/**\n * Swagger2 API文档的配置\n */\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfig {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                //为当前包下controller生成API文档\n                .apis(RequestHandlerSelectors.basePackage("com.springboot.cloud"))\n                //为有@Api注解的Controller生成API文档\n//                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))\n                //为有@ApiOperation注解的方法生成API文档\n//                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title("SwaggerUI演示")\n                .description("Swagger-UI API文档")\n                .version("2.0")\n                .build();\n    }\n\n}\n\n\n\n\n# 3.使用\n\n\n# 常用注解\n\n@Api：用在请求的类上，表示对类的说明   \n    tags="说明该类的作用，可以在UI界面上看到的注解"  \n    value="该参数没什么意义，在UI界面上也看到，所以不需要配置"  \n  \n  \n@ApiOperation：用在请求的方法上，说明方法的用途、作用\n    value="说明方法的用途、作用"\n    notes="方法的备注说明"\n    \n    \n@ApiImplicitParams：用在请求的方法上，表示一组参数说明  \n    @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面\n        name：参数名\n        value：参数的汉字说明、解释\n        required：参数是否必须传\n        paramType：参数放在哪个地方\n            · header --\x3e 请求参数的获取：@RequestHeader\n            · query --\x3e 请求参数的获取：@RequestParam\n            · path（用于restful接口）--\x3e 请求参数的获取：@PathVariable\n            · body（不常用）\n            · form（不常用）    \n        dataType：参数类型，默认String，其它值dataType="Integer"       \n        defaultValue：参数的默认值\n        \n        \n@ApiResponses：用在请求的方法上，表示一组响应\n    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息\n        code：数字，例如400\n        message：信息，例如"请求参数没填好"\n        response：抛出异常的类\n        \n        \n@ApiModel：用于响应类上，表示一个返回响应数据的信息\n            （这种一般用在post创建的时候，使用@RequestBody这样的场景，\n            请求参数无法使用@ApiImplicitParam注解进行描述的时候）\n    @ApiModelProperty：用在属性上，描述响应类的属性\n\n\n\n# 示例\n\n@Api(value="APP用户注册Controller", tags="APP用户注册Controller")\n\n@ApiOperation(value="用户注册",notes="手机号、密码都是必输项，年龄随边填，但必须是数字")\n\n@ApiImplicitParams({\n    @ApiImplicitParam(name="mobile",value="手机号",required=true,paramType="form"),\n    @ApiImplicitParam(name="password",value="密码",required=true,paramType="form"),\n    @ApiImplicitParam(name="age",value="年龄",required=true,paramType="form",dataType="Integer")\n})\n\n\n@ApiOperation(value = "select请求",notes = "多个参数，多种的查询参数类型")\n@ApiResponses({\n    @ApiResponse(code=400,message="请求参数没填好"),\n    @ApiResponse(code=404,message="请求路径没有或页面跳转路径不对")\n})\n\n\n@ApiModel(description= "返回响应数据")\npublic class RestMessage implements Serializable{\n \n    @ApiModelProperty(value = "是否成功")\n    private boolean success=true;\n    @ApiModelProperty(value = "返回对象")\n    private Object data;\n    @ApiModelProperty(value = "错误编号")\n    private Integer errCode;\n    @ApiModelProperty(value = "错误信息")\n    private String message;\n    \n}\n',normalizedContent:'# 1.添加依赖\n\n\x3c!--swagger-ui api文档生产工具--\x3e\n<dependency>\n  <groupid>io.springfox</groupid>\n  <artifactid>springfox-swagger2</artifactid>\n  <version>2.9.2</version>\n</dependency>\n<dependency>\n  <groupid>io.springfox</groupid>\n  <artifactid>springfox-swagger-ui</artifactid>\n  <version>2.9.2</version>\n</dependency>\n\n\n\n# 2.配置\n\n提示\n\nswagger对生成api文档的范围有三种不同的选择\n\n * 生成指定包下面的类的api文档\n * 生成有指定注解的类的api文档\n * 生成有指定注解的方法的api文档\n\n\n# swagger配置\n\n/**\n * swagger2 api文档的配置\n */\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\nimport springfox.documentation.builders.apiinfobuilder;\nimport springfox.documentation.builders.pathselectors;\nimport springfox.documentation.builders.requesthandlerselectors;\nimport springfox.documentation.service.apiinfo;\nimport springfox.documentation.spi.documentationtype;\nimport springfox.documentation.spring.web.plugins.docket;\nimport springfox.documentation.swagger2.annotations.enableswagger2;\n\n@configuration\n@enableswagger2\npublic class swaggerconfig {\n    @bean\n    public docket createrestapi() {\n        return new docket(documentationtype.swagger_2)\n                .apiinfo(apiinfo())\n                .select()\n                //为当前包下controller生成api文档\n                .apis(requesthandlerselectors.basepackage("com.springboot.cloud"))\n                //为有@api注解的controller生成api文档\n//                .apis(requesthandlerselectors.withclassannotation(api.class))\n                //为有@apioperation注解的方法生成api文档\n//                .apis(requesthandlerselectors.withmethodannotation(apioperation.class))\n                .paths(pathselectors.any())\n                .build();\n    }\n\n    private apiinfo apiinfo() {\n        return new apiinfobuilder()\n                .title("swaggerui演示")\n                .description("swagger-ui api文档")\n                .version("2.0")\n                .build();\n    }\n\n}\n\n\n\n\n# 3.使用\n\n\n# 常用注解\n\n@api：用在请求的类上，表示对类的说明   \n    tags="说明该类的作用，可以在ui界面上看到的注解"  \n    value="该参数没什么意义，在ui界面上也看到，所以不需要配置"  \n  \n  \n@apioperation：用在请求的方法上，说明方法的用途、作用\n    value="说明方法的用途、作用"\n    notes="方法的备注说明"\n    \n    \n@apiimplicitparams：用在请求的方法上，表示一组参数说明  \n    @apiimplicitparam：用在@apiimplicitparams注解中，指定一个请求参数的各个方面\n        name：参数名\n        value：参数的汉字说明、解释\n        required：参数是否必须传\n        paramtype：参数放在哪个地方\n            · header --\x3e 请求参数的获取：@requestheader\n            · query --\x3e 请求参数的获取：@requestparam\n            · path（用于restful接口）--\x3e 请求参数的获取：@pathvariable\n            · body（不常用）\n            · form（不常用）    \n        datatype：参数类型，默认string，其它值datatype="integer"       \n        defaultvalue：参数的默认值\n        \n        \n@apiresponses：用在请求的方法上，表示一组响应\n    @apiresponse：用在@apiresponses中，一般用于表达一个错误的响应信息\n        code：数字，例如400\n        message：信息，例如"请求参数没填好"\n        response：抛出异常的类\n        \n        \n@apimodel：用于响应类上，表示一个返回响应数据的信息\n            （这种一般用在post创建的时候，使用@requestbody这样的场景，\n            请求参数无法使用@apiimplicitparam注解进行描述的时候）\n    @apimodelproperty：用在属性上，描述响应类的属性\n\n\n\n# 示例\n\n@api(value="app用户注册controller", tags="app用户注册controller")\n\n@apioperation(value="用户注册",notes="手机号、密码都是必输项，年龄随边填，但必须是数字")\n\n@apiimplicitparams({\n    @apiimplicitparam(name="mobile",value="手机号",required=true,paramtype="form"),\n    @apiimplicitparam(name="password",value="密码",required=true,paramtype="form"),\n    @apiimplicitparam(name="age",value="年龄",required=true,paramtype="form",datatype="integer")\n})\n\n\n@apioperation(value = "select请求",notes = "多个参数，多种的查询参数类型")\n@apiresponses({\n    @apiresponse(code=400,message="请求参数没填好"),\n    @apiresponse(code=404,message="请求路径没有或页面跳转路径不对")\n})\n\n\n@apimodel(description= "返回响应数据")\npublic class restmessage implements serializable{\n \n    @apimodelproperty(value = "是否成功")\n    private boolean success=true;\n    @apimodelproperty(value = "返回对象")\n    private object data;\n    @apimodelproperty(value = "错误编号")\n    private integer errcode;\n    @apimodelproperty(value = "错误信息")\n    private string message;\n    \n}\n',charsets:{cjk:!0}},{title:"SpringBoot整合SpringTask",frontmatter:{title:"SpringBoot整合SpringTask",date:"2022-03-08T10:34:01.000Z",permalink:"/pages/d0754d/",categories:["学习资料","Java","SpringBoot实战"],tags:["task"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/18.SpringBoot%E5%AE%9E%E6%88%98/03.SpringBoot%E6%95%B4%E5%90%88SpringTask.html",relativePath:"学习资料/03.Java/18.SpringBoot实战/03.SpringBoot整合SpringTask.md",key:"v-4de5e5e9",path:"/pages/d0754d/",headers:[{level:2,title:"cron 表达式",slug:"cron-表达式",normalizedTitle:"cron 表达式",charIndex:2},{level:2,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:2116},{level:3,title:"启动类",slug:"启动类",normalizedTitle:"启动类",charIndex:2123},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:808}],headersStr:"cron 表达式 配置 启动类 使用",content:'# cron 表达式\n\n> cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，在SpringTask中可以用于指定任务的执行时间。\n\n秒         分         时       日期           月       星期          年（可选）\nSeconds   Minutes   Hours   DayofMonth   Month   DayofWeek   Year\n\n> 每一个域可出现的字符\n\n字段               允许值                        允许的特殊字符\n秒（Seconds）       0~59的整数                    , - * / 四个字符\n分（Minutes）       0~59的整数                    , - * / 四个字符\n小时（Hours）        0~23的整数                    , - * / 四个字符\n日期（DayofMonth）   1~31的整数（但是你需要考虑你月的天数）      ,- * ? / L W C 八个字符\n月份（Month）        1~12的整数或者 JAN-DEC          , - * / 四个字符\n星期（DayofWeek）    1~7的整数或者 SUN-SAT （1=SUN）   , - * ? / L C # 八个字符\n年(可选，留空)（Year）   1970~2099                  , - * / 四个字符\n\n> cron格式中特殊字符说明\n\n字符   作用                               举例\n,    列出枚举值                            在Minutes域使用5,10，表示在5分和10分各触发一次\n-    表示触发范围                           在Minutes域使用5-10，表示从5分到10分钟每分钟触发一次\n*    匹配任意值                            在Minutes域使用*, 表示每分钟都会触发一次\n/    起始时间开始触发，每隔固定时间触发一次              在Minutes域使用5/10,表示5分时触发一次，每10分钟再触发一次\n?    在DayofMonth和DayofWeek中，用于匹配任意值   在DayofMonth域使用?,表示每天都触发一次\n#    在DayofMonth中，确定第几个星期几            1#3表示第三个星期日\nL    表示最后                             在DayofWeek中使用5L,表示在最后一个星期四触发\nW    表示有效工作日(周一到周五)                   在DayofMonth使用5W，如果5日是星期六，则将在最近的工作日4日触发一次\n\n> cron示例\n\n0 0 2 1 * ? * 表示在每月的1日的凌晨2点调度任务\n0 15 10 ? * MON-FRI 表示周一到周五每天上午10：15执行作业\n0 15 10 ? 6L 2002-2006 表示2002-2006年的每个月的最后一个星期五上午10:15执行作\n0 0 10,14,16 * * ? 每天上午10点，下午2点，4点\n0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时\n0 0 12 ? * WED 表示每个星期三中午12点\n0 0 12 * * ? 每天中午12点触发\n0 15 10 ? * * 每天上午10:15触发\n0 15 10 * * ? 每天上午10:15触发 0 15 10 * * ? *” 每天上午10:15触发\n0 15 10 * * ? 2005 2005年的每天上午10:15触发\n0 * 14 * * ? 在每天下午2点到下午2:59期间的每1分钟触发\n0 0/5 14 * * ? 在每天下午2点到下午2:55期间的每5分钟触发\n0 0/5 14,18 * * ? 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发\n0 0-5 14 * * ? 在每天下午2点到下午2:05期间的每1分钟触发\n0 10,44 14 ? 3 WED 每年三月的星期三的下午2:10和2:44触发\n0 15 10 ? * MON-FRI 周一至周五的上午10:15触发\n0 15 10 15 * ? 每月15日上午10:15触发\n0 15 10 L * ? 每月最后一日的上午10:15触发\n0 15 10 ? * 6L 每月的最后一个星期五上午10:15触发\n0 15 10 ? * 6L 2002-2005 2002年至2005年的每月的最后一个星期五上午10:15触发\n0 15 10 ? * 6#3 每月的第三个星期五上午10:15触发\n\n\n# 配置\n\n\n# 启动类\n\n@SpringBootApplication\n@EnableScheduling //开启定时任务功能\npublic class SpringBootApplication {\n    \n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootApplication.class, args);\n    }\n\n}\n\n\n\n# 使用\n\n@Component\npublic class HelloWorldTask {\n\n    //每天凌晨两点输出hello world\n    @Scheduled(cron = "0 0 2 * * ?")\n    public void hello() {\n       System.out.println("hello world");\n    }\n\n}\n',normalizedContent:'# cron 表达式\n\n> cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，在springtask中可以用于指定任务的执行时间。\n\n秒         分         时       日期           月       星期          年（可选）\nseconds   minutes   hours   dayofmonth   month   dayofweek   year\n\n> 每一个域可出现的字符\n\n字段               允许值                        允许的特殊字符\n秒（seconds）       0~59的整数                    , - * / 四个字符\n分（minutes）       0~59的整数                    , - * / 四个字符\n小时（hours）        0~23的整数                    , - * / 四个字符\n日期（dayofmonth）   1~31的整数（但是你需要考虑你月的天数）      ,- * ? / l w c 八个字符\n月份（month）        1~12的整数或者 jan-dec          , - * / 四个字符\n星期（dayofweek）    1~7的整数或者 sun-sat （1=sun）   , - * ? / l c # 八个字符\n年(可选，留空)（year）   1970~2099                  , - * / 四个字符\n\n> cron格式中特殊字符说明\n\n字符   作用                               举例\n,    列出枚举值                            在minutes域使用5,10，表示在5分和10分各触发一次\n-    表示触发范围                           在minutes域使用5-10，表示从5分到10分钟每分钟触发一次\n*    匹配任意值                            在minutes域使用*, 表示每分钟都会触发一次\n/    起始时间开始触发，每隔固定时间触发一次              在minutes域使用5/10,表示5分时触发一次，每10分钟再触发一次\n?    在dayofmonth和dayofweek中，用于匹配任意值   在dayofmonth域使用?,表示每天都触发一次\n#    在dayofmonth中，确定第几个星期几            1#3表示第三个星期日\nl    表示最后                             在dayofweek中使用5l,表示在最后一个星期四触发\nw    表示有效工作日(周一到周五)                   在dayofmonth使用5w，如果5日是星期六，则将在最近的工作日4日触发一次\n\n> cron示例\n\n0 0 2 1 * ? * 表示在每月的1日的凌晨2点调度任务\n0 15 10 ? * mon-fri 表示周一到周五每天上午10：15执行作业\n0 15 10 ? 6l 2002-2006 表示2002-2006年的每个月的最后一个星期五上午10:15执行作\n0 0 10,14,16 * * ? 每天上午10点，下午2点，4点\n0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时\n0 0 12 ? * wed 表示每个星期三中午12点\n0 0 12 * * ? 每天中午12点触发\n0 15 10 ? * * 每天上午10:15触发\n0 15 10 * * ? 每天上午10:15触发 0 15 10 * * ? *” 每天上午10:15触发\n0 15 10 * * ? 2005 2005年的每天上午10:15触发\n0 * 14 * * ? 在每天下午2点到下午2:59期间的每1分钟触发\n0 0/5 14 * * ? 在每天下午2点到下午2:55期间的每5分钟触发\n0 0/5 14,18 * * ? 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发\n0 0-5 14 * * ? 在每天下午2点到下午2:05期间的每1分钟触发\n0 10,44 14 ? 3 wed 每年三月的星期三的下午2:10和2:44触发\n0 15 10 ? * mon-fri 周一至周五的上午10:15触发\n0 15 10 15 * ? 每月15日上午10:15触发\n0 15 10 l * ? 每月最后一日的上午10:15触发\n0 15 10 ? * 6l 每月的最后一个星期五上午10:15触发\n0 15 10 ? * 6l 2002-2005 2002年至2005年的每月的最后一个星期五上午10:15触发\n0 15 10 ? * 6#3 每月的第三个星期五上午10:15触发\n\n\n# 配置\n\n\n# 启动类\n\n@springbootapplication\n@enablescheduling //开启定时任务功能\npublic class springbootapplication {\n    \n    public static void main(string[] args) {\n        springapplication.run(springbootapplication.class, args);\n    }\n\n}\n\n\n\n# 使用\n\n@component\npublic class helloworldtask {\n\n    //每天凌晨两点输出hello world\n    @scheduled(cron = "0 0 2 * * ?")\n    public void hello() {\n       system.out.println("hello world");\n    }\n\n}\n',charsets:{cjk:!0}},{title:"SpringBoot整合Redis",frontmatter:{title:"SpringBoot整合Redis",date:"2022-03-08T14:51:12.000Z",permalink:"/pages/a36330/",categories:["学习资料","Java","SpringBoot实战"],tags:["redis"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/18.SpringBoot%E5%AE%9E%E6%88%98/04.SpringBoot%E6%95%B4%E5%90%88Redis.html",relativePath:"学习资料/03.Java/18.SpringBoot实战/04.SpringBoot整合Redis.md",key:"v-24bd736f",path:"/pages/a36330/",headers:[{level:2,title:"1.添加依赖",slug:"_1-添加依赖",normalizedTitle:"1.添加依赖",charIndex:2},{level:2,title:"2.配置",slug:"_2-配置",normalizedTitle:"2.配置",charIndex:628},{level:3,title:"yml配置",slug:"yml配置",normalizedTitle:"yml配置",charIndex:637},{level:3,title:"redis配置类",slug:"redis配置类",normalizedTitle:"redis配置类",charIndex:1103},{level:2,title:"3.使用",slug:"_3-使用",normalizedTitle:"3.使用",charIndex:4880}],headersStr:"1.添加依赖 2.配置 yml配置 redis配置类 3.使用",content:'# 1.添加依赖\n\n\x3c!--redis--\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n    <version>2.5.3</version>\n</dependency>\n\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-pool2</artifactId>\n    <version>2.9.0</version>\n</dependency>\n\n\x3c!--JSON--\x3e\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.59</version>\n</dependency>\n\n \x3c!--lombok--\x3e\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>1.18.16</version>\n</dependency>\n\n\n\n# 2.配置\n\n\n# yml配置\n\nserver:\n  port: 8080\nspring:\n  redis:\n    # Redis数据库索引（默认为0）\n    database: 0\n    # Redis服务器地址\n    host: localhost\n    # Redis服务器连接端口\n    port: 6379\n    # Redis服务器连接密码（默认为空）\n    password:\n    lettuce:\n      pool:\n        # 连接池最大连接数（使用负值表示没有限制）\n        max-active: 20\n        # 连接池中的最大空闲连接\n        max-idle: 20\n        # 连接池中的最小空闲连接\n        min-idle: 0\n        # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-wait: -1ms\n    # 连接超时时间（毫秒）默认是2000ms\n    timeout: 3000ms\n\n\n\n# redis配置类\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheConfiguration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.cache.RedisCacheWriter;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\nimport java.time.Duration;\n\n@Configuration\npublic class RedisConfig extends CachingConfigurerSupport {\n\n\n    private static final StringRedisSerializer STRING_SERIALIZER = new StringRedisSerializer();\n    private static final GenericJackson2JsonRedisSerializer JACKSON__SERIALIZER = new GenericJackson2JsonRedisSerializer();\n\n    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\n        //对象的序列化\n        RedisSerializationContext.SerializationPair valueSerializationPair\n                = RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer());\n        //全局redis缓存过期时间\n        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()\n                .entryTtl(Duration.ofDays(1))\n//                .serializeKeysWith()\n                .serializeValuesWith(valueSerializationPair);\n\n        return new RedisCacheManager(RedisCacheWriter.nonLockingRedisCacheWriter(factory), redisCacheConfiguration);\n    }\n\n    @Bean\n    @ConditionalOnMissingBean(name = "redisTemplate")\n    public RedisTemplate<String,Object> redisTemplate(RedisConnectionFactory factory){\n        // 配置redisTemplate\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        // key序列化\n        redisTemplate.setKeySerializer(STRING_SERIALIZER);\n        // value序列化\n        redisTemplate.setValueSerializer(JACKSON__SERIALIZER);\n        // Hash key序列化\n        redisTemplate.setHashKeySerializer(STRING_SERIALIZER);\n        // Hash value序列化\n        redisTemplate.setHashValueSerializer(JACKSON__SERIALIZER);\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n\n\n    private Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer() {\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper());\n        return jackson2JsonRedisSerializer;\n    }\n\n    private ObjectMapper objectMapper() {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n//        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n        return objectMapper;\n    }\n}\n\n\n\n# 3.使用\n\n@SpringBootTest\nclass SpringbootdemoApplicationTests {\n\n    @Autowired\n    StringRedisTemplate stringRedisTemplate; //操作key-value都是字符串，最常用\n\n    @Test\n    public void test01(){\n        //字符串操作\n        stringRedisTemplate.opsForValue().append("msg","coder");\n\n        //列表操作\n        stringRedisTemplate.opsForList().leftPush("mylist","1");\n        stringRedisTemplate.opsForList().leftPush("mylist","2");\n    }\n}\n',normalizedContent:'# 1.添加依赖\n\n\x3c!--redis--\x3e\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-data-redis</artifactid>\n    <version>2.5.3</version>\n</dependency>\n\n<dependency>\n    <groupid>org.apache.commons</groupid>\n    <artifactid>commons-pool2</artifactid>\n    <version>2.9.0</version>\n</dependency>\n\n\x3c!--json--\x3e\n<dependency>\n    <groupid>com.alibaba</groupid>\n    <artifactid>fastjson</artifactid>\n    <version>1.2.59</version>\n</dependency>\n\n \x3c!--lombok--\x3e\n<dependency>\n    <groupid>org.projectlombok</groupid>\n    <artifactid>lombok</artifactid>\n    <version>1.18.16</version>\n</dependency>\n\n\n\n# 2.配置\n\n\n# yml配置\n\nserver:\n  port: 8080\nspring:\n  redis:\n    # redis数据库索引（默认为0）\n    database: 0\n    # redis服务器地址\n    host: localhost\n    # redis服务器连接端口\n    port: 6379\n    # redis服务器连接密码（默认为空）\n    password:\n    lettuce:\n      pool:\n        # 连接池最大连接数（使用负值表示没有限制）\n        max-active: 20\n        # 连接池中的最大空闲连接\n        max-idle: 20\n        # 连接池中的最小空闲连接\n        min-idle: 0\n        # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-wait: -1ms\n    # 连接超时时间（毫秒）默认是2000ms\n    timeout: 3000ms\n\n\n\n# redis配置类\n\nimport com.fasterxml.jackson.annotation.jsonautodetect;\nimport com.fasterxml.jackson.annotation.jsontypeinfo;\nimport com.fasterxml.jackson.annotation.propertyaccessor;\nimport com.fasterxml.jackson.databind.objectmapper;\nimport com.fasterxml.jackson.databind.jsontype.impl.laissezfairesubtypevalidator;\nimport org.springframework.boot.autoconfigure.condition.conditionalonmissingbean;\nimport org.springframework.cache.cachemanager;\nimport org.springframework.cache.annotation.cachingconfigurersupport;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.data.redis.cache.rediscacheconfiguration;\nimport org.springframework.data.redis.cache.rediscachemanager;\nimport org.springframework.data.redis.cache.rediscachewriter;\nimport org.springframework.data.redis.connection.redisconnectionfactory;\nimport org.springframework.data.redis.core.redistemplate;\nimport org.springframework.data.redis.serializer.genericjackson2jsonredisserializer;\nimport org.springframework.data.redis.serializer.jackson2jsonredisserializer;\nimport org.springframework.data.redis.serializer.redisserializationcontext;\nimport org.springframework.data.redis.serializer.stringredisserializer;\n\nimport java.time.duration;\n\n@configuration\npublic class redisconfig extends cachingconfigurersupport {\n\n\n    private static final stringredisserializer string_serializer = new stringredisserializer();\n    private static final genericjackson2jsonredisserializer jackson__serializer = new genericjackson2jsonredisserializer();\n\n    @bean\n    public cachemanager cachemanager(redisconnectionfactory factory) {\n        //对象的序列化\n        redisserializationcontext.serializationpair valueserializationpair\n                = redisserializationcontext.serializationpair.fromserializer(jackson2jsonredisserializer());\n        //全局redis缓存过期时间\n        rediscacheconfiguration rediscacheconfiguration = rediscacheconfiguration.defaultcacheconfig()\n                .entryttl(duration.ofdays(1))\n//                .serializekeyswith()\n                .serializevalueswith(valueserializationpair);\n\n        return new rediscachemanager(rediscachewriter.nonlockingrediscachewriter(factory), rediscacheconfiguration);\n    }\n\n    @bean\n    @conditionalonmissingbean(name = "redistemplate")\n    public redistemplate<string,object> redistemplate(redisconnectionfactory factory){\n        // 配置redistemplate\n        redistemplate<string, object> redistemplate = new redistemplate<>();\n        redistemplate.setconnectionfactory(factory);\n        // key序列化\n        redistemplate.setkeyserializer(string_serializer);\n        // value序列化\n        redistemplate.setvalueserializer(jackson__serializer);\n        // hash key序列化\n        redistemplate.sethashkeyserializer(string_serializer);\n        // hash value序列化\n        redistemplate.sethashvalueserializer(jackson__serializer);\n        redistemplate.afterpropertiesset();\n        return redistemplate;\n    }\n\n\n    private jackson2jsonredisserializer<object> jackson2jsonredisserializer() {\n        jackson2jsonredisserializer<object> jackson2jsonredisserializer = new jackson2jsonredisserializer<>(object.class);\n        jackson2jsonredisserializer.setobjectmapper(objectmapper());\n        return jackson2jsonredisserializer;\n    }\n\n    private objectmapper objectmapper() {\n        objectmapper objectmapper = new objectmapper();\n        objectmapper.setvisibility(propertyaccessor.all, jsonautodetect.visibility.any);\n//        objectmapper.enabledefaulttyping(objectmapper.defaulttyping.non_final);\n        objectmapper.activatedefaulttyping(laissezfairesubtypevalidator.instance, objectmapper.defaulttyping.non_final, jsontypeinfo.as.property);\n        return objectmapper;\n    }\n}\n\n\n\n# 3.使用\n\n@springboottest\nclass springbootdemoapplicationtests {\n\n    @autowired\n    stringredistemplate stringredistemplate; //操作key-value都是字符串，最常用\n\n    @test\n    public void test01(){\n        //字符串操作\n        stringredistemplate.opsforvalue().append("msg","coder");\n\n        //列表操作\n        stringredistemplate.opsforlist().leftpush("mylist","1");\n        stringredistemplate.opsforlist().leftpush("mylist","2");\n    }\n}\n',charsets:{cjk:!0}},{title:"SpringBoot整合RabbitMQ",frontmatter:{title:"SpringBoot整合RabbitMQ",date:"2022-03-08T15:06:44.000Z",permalink:"/pages/73b1ea/",categories:["学习资料","Java","SpringBoot实战"],tags:["rabbitmq"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/18.SpringBoot%E5%AE%9E%E6%88%98/05.SpringBoot%E6%95%B4%E5%90%88RabbitMQ.html",relativePath:"学习资料/03.Java/18.SpringBoot实战/05.SpringBoot整合RabbitMQ.md",key:"v-a1f6d0d6",path:"/pages/73b1ea/",headers:[{level:2,title:"1.添加依赖",slug:"_1-添加依赖",normalizedTitle:"1.添加依赖",charIndex:2},{level:2,title:"2.配置",slug:"_2-配置",normalizedTitle:"2.配置",charIndex:349},{level:3,title:"yml配置",slug:"yml配置",normalizedTitle:"yml配置",charIndex:358},{level:3,title:"rabbitmq配置",slug:"rabbitmq配置",normalizedTitle:"rabbitmq配置",charIndex:817},{level:2,title:"3.使用",slug:"_3-使用",normalizedTitle:"3.使用",charIndex:3065},{level:3,title:"direct配置",slug:"direct配置",normalizedTitle:"direct配置",charIndex:3074},{level:3,title:"fanout配置",slug:"fanout配置",normalizedTitle:"fanout配置",charIndex:4092},{level:3,title:"topic配置",slug:"topic配置",normalizedTitle:"topic配置",charIndex:5360},{level:3,title:"延迟消息配置",slug:"延迟消息配置",normalizedTitle:"延迟消息配置",charIndex:7007},{level:3,title:"队列监听配置",slug:"队列监听配置",normalizedTitle:"队列监听配置",charIndex:8969},{level:3,title:"消息ack接收",slug:"消息ack接收",normalizedTitle:"消息ack接收",charIndex:10217},{level:3,title:"消息接收",slug:"消息接收",normalizedTitle:"消息接收",charIndex:11216},{level:3,title:"消息发送",slug:"消息发送",normalizedTitle:"消息发送",charIndex:1730}],headersStr:"1.添加依赖 2.配置 yml配置 rabbitmq配置 3.使用 direct配置 fanout配置 topic配置 延迟消息配置 队列监听配置 消息ack接收 消息接收 消息发送",content:'# 1.添加依赖\n\n \x3c!--web--\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <version>2.5.3</version>\n</dependency>\n\n\x3c!--rabbitmq--\x3e\n<dependency>\n    <groupId>org.springframework.amqp</groupId>\n    <artifactId>spring-rabbit</artifactId>\n    <version>2.3.10</version>\n</dependency>\n\n\n\n# 2.配置\n\n\n# yml配置\n\nserver:\n  port: 8080\nspring:\n  rabbitmq:\n    host: localhost\n    port: 5672\n    username: guest\n    password: guest\n    publisher-confirm-type: correlated\n    #如果对异步消息需要回调必须设置为true\n    publisher-returns: true\n    listener:\n      simple:\n        #消费者数量\n        concurrency: 5\n        #最大消费者数量\n        max-concurrency: 10\n        #消费者每次从队列获取的消息数量。写多了，如果长时间得不到消费，数据就一直得不到处理\n        prefetch: 1\n        #消费接收确认机制-手动确认\n        acknowledge-mode: manual\n\n\n\n# rabbitmq配置\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.ReturnedMessage;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@Slf4j\npublic class RabbitConfig {\n\n\n    //处理消息返回\n//    @Bean\n//    public MessageConverter jsonMessageConverter() {\n//        return new Jackson2JsonMessageConverter();\n//    }\n\n    @Bean\n    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {\n        RabbitTemplate rabbitTemplate = new RabbitTemplate();\n\n        rabbitTemplate.setConnectionFactory(connectionFactory);\n        //设置消息发送格式为json\n        rabbitTemplate.setMessageConverter(new Jackson2JsonMessageConverter());\n        // 开启Mandatory, 才能触发回调函数，无论消息推送结果如何都强制调用回调函数\n        rabbitTemplate.setMandatory(true);\n        //消息发送到exchange回调 需设置：spring.rabbitmq.publisher-confirms=correlated\n        rabbitTemplate.setConfirmCallback(new RabbitTemplate.ConfirmCallback() {\n            public void confirm(CorrelationData correlationData, boolean ack, String cause) {\n                if (ack){\n                    log.debug("消息发送成功:correlationData({}),ack({}),cause({})",correlationData,ack,cause);\n                }else {\n                    log.debug("消息未确认:correlationData({}),ack({}),cause({})",correlationData,ack,cause);\n                }\n            }\n        });\n        //消息从exchange发送到queue失败回调  需设置：spring.rabbitmq.publisher-returns=true\n        rabbitTemplate.setReturnsCallback(new RabbitTemplate.ReturnsCallback() {\n            @Override\n            public void returnedMessage(ReturnedMessage returnedMessage) {\n                log.error("消息丢失:交换机exchange({}),路由键route({}),回应码replyCode({}),回应信息replyText({}),消息message:{}",returnedMessage.getExchange(),returnedMessage.getRoutingKey(),returnedMessage.getReplyCode(),returnedMessage.getReplyText(),returnedMessage.getMessage());\n            }\n\n        });\n\n        return rabbitTemplate;\n    }\n}\n\n\n\n# 3.使用\n\n\n# direct配置\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n\n/**\n * 一对一直连\n */\n@Configuration\npublic class DirectRabbitConfig {\n\n    /**\n     * 交换机\n     */\n    @Bean\n    public DirectExchange myDirectExchange() {\n        // 参数意义:\n        // name: 名称\n        // durable: true\n        // autoDelete: 自动删除\n        return new DirectExchange("myDirectExchange", true, false);\n    }\n\n    /**\n     * 队列\n     */\n    @Bean\n    public Queue myDirectQueue() {\n\n        return new Queue("myDirectQueue", true);\n    }\n\n    /**\n     * 绑定\n     */\n    @Bean\n    public Binding bindingDirect() {\n        return BindingBuilder.bind(myDirectQueue())\n                             .to(myDirectExchange())\n                             .with("my.direct.routing");\n    }\n    \n}\n\n\n\n# fanout配置\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n\n/**\n * 广播\n */\n@Configuration\npublic class FanoutRabbitConfig {\n\n    // ----- 交换机 -----\n    @Bean\n    public FanoutExchange fanoutExchange() {\n        return new FanoutExchange("fanoutExchange", true, false);\n    }\n\n    // ----- 队列 -----\n    @Bean\n    public Queue fanoutQueueA() {\n        return new Queue("fanoutQueueA", true);\n    }\n\n    @Bean\n    public Queue fanoutQueueB() {\n        return new Queue("fanoutQueueB", true);\n    }\n\n    @Bean\n    public Queue fanoutQueueC() {\n        return new Queue("fanoutQueueC", true);\n    }\n\n    // ----- 绑定 -----\n    @Bean\n    public Binding bindingFanoutA() {\n        return BindingBuilder.bind(fanoutQueueA()).to(fanoutExchange());\n    }\n\n    @Bean\n    public Binding bindingFanoutB() {\n        return BindingBuilder.bind(fanoutQueueB()).to(fanoutExchange());\n    }\n\n    @Bean\n    public Binding bindingFanoutC() {\n        return BindingBuilder.bind(fanoutQueueC()).to(fanoutExchange());\n    }\n\n}\n\n\n\n# topic配置\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n\n/**\n * 路由匹配\n */\n@Configuration\npublic class TopicRabbitConfig {\n\n    // 交换机\n    @Bean\n    public TopicExchange myTopicExchange() {\n        return new TopicExchange("myTopicExchange", true, false);\n    }\n\n    // ----- 队列 -----\n    @Bean\n    public Queue myTopicQueue_01() {\n        return new Queue("myTopicQueue_01", true);\n    }\n\n    @Bean Queue myTopicQueue_02() {\n        return new Queue("myTopicQueue_02", true);\n    }\n\n    @Bean Queue myTopicQueue_03() {\n        return new Queue("myTopicQueue_03", true);\n    }\n\n    @Bean Queue myTopicQueue_04() {\n        return new Queue("myTopicQueue_04", true);\n    }\n\n    /**\n     * 绑定路由键为user.#\n     */\n    @Bean\n    public Binding binding_01() {\n        return BindingBuilder.bind(myTopicQueue_01()).to(myTopicExchange()).with("user.#");\n    }\n\n    /**\n     * 绑定路由键为#.new\n     */\n    @Bean\n    public Binding binding_02() {\n        return BindingBuilder.bind(myTopicQueue_02()).to(myTopicExchange()).with("#.new");\n    }\n\n    /**\n     * 绑定路由键为#.weather\n     */\n    @Bean\n    public Binding binding_03() { return BindingBuilder.bind(myTopicQueue_03()).to(myTopicExchange()).with("#.weather");\n    }\n\n    /**\n     * 绑定路由键为europe.#\n     */\n    @Bean\n    public Binding binding_04() { return BindingBuilder.bind(myTopicQueue_04()).to(myTopicExchange()).with("europe.#");\n    }\n\n}\n\n\n\n# 延迟消息配置\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n\n/**\n * 死信队列---需两个交换机两个队列\n *\n * 延时交换机---需安装插件\n * */\n\n@Configuration\npublic class TTLRabbitConfig {\n\n    //死信交换机\n    @Bean\n    public DirectExchange dlkExchange(){ \n        return new DirectExchange("dlkExchange", true, false);\n    }\n\n    @Bean\n    public Queue dlkQueue(){\n        return new Queue("dlkQueue",true,false,false);\n    }\n\n    @Bean\n    public Binding dlkBind(){ \n        return BindingBuilder.bind(dlkQueue()).to(dlkExchange()).with("dlk.routeKey");\n    }\n\n    //业务交换机\n    @Bean\n    public DirectExchange demoExchange(){ \n        return new DirectExchange("demoExchange", true, false);\n    }\n\n    @Bean\n    public Queue demoQueue(){\n        //只需要在声明业务队列时添加x-dead-letter-exchange，值为死信交换机\n        Map<String,Object> map = new HashMap<>(1);\n        map.put("x-dead-letter-exchange","dlkExchange");\n        //该参数x-dead-letter-routing-key可以修改该死信的路由key，不设置则使用原消息的路由key\n        map.put("x-dead-letter-routing-key","dlk.routeKey");\n        return new Queue("demoQueue",true,false,false,map);\n    }\n\n    @Bean\n    public Binding demoBind(){ \n        return BindingBuilder.bind(demoQueue()).to(demoExchange()).with("demo.routeKey");\n    }\n\n\n    //延迟插件使用\n    //1、声明一个类型为x-delayed-message的交换机\n    //2、参数添加一个x-delayed-type值为交换机的类型用于路由key的映射\n    @Bean\n    public CustomExchange dmpExchange(){\n        Map<String, Object> arguments = new HashMap<>(1);\n        arguments.put("x-delayed-type", "direct");\n        return new CustomExchange("dmpExchange","x-delayed-message",true,false,arguments);\n    }\n\n    @Bean\n    public Queue dmpQueue(){\n        return new Queue("dmpQueue",true,false,false);\n    }\n\n    @Bean\n    public Binding dmpBind(){ \n        return BindingBuilder.bind(dmpQueue()).to(dmpExchange()).with("dmp.routeKey").noargs();\n    }\n\n}\n\n\n\n# 队列监听配置\n\nimport com.springboot.listener.MyAckReceiver;\nimport org.springframework.amqp.core.AcknowledgeMode;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n\n/**\n * rabbitmq 队列监听配置\n * */\n@Configuration\npublic class MessageListenerConfig {\n\n    @Autowired\n    private CachingConnectionFactory cachingConnectionFactory;\n\n    @Autowired\n    private MyAckReceiver myAckReceiver;\n\n    @Bean\n    public SimpleMessageListenerContainer simpleMessageListenerContainer() {\n        SimpleMessageListenerContainer container = new  SimpleMessageListenerContainer(cachingConnectionFactory);\n\n        // 监听队列名\n        container.setQueueNames("myDirectQueue");\n        // 当前消费者数量\n        container.setConcurrentConsumers(1);\n        // 最大消费者数量\n        container.setMaxConcurrentConsumers(1);\n        // 手动确认\n        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);\n        // 设置监听器\n        container.setMessageListener(myAckReceiver);\n\n        return container;\n    }\n}\n\n\n\n# 消息ack接收\n\nimport com.rabbitmq.client.Channel;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.amqp.rabbit.listener.api.ChannelAwareMessageListener;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class MyAckReceiver implements ChannelAwareMessageListener {\n\n    public void onMessage(Message message, Channel channel) throws Exception {\n        // 消息的唯一性ID\n        long deliveryTag = message.getMessageProperties().getDeliveryTag();\n\n        try {\n            String msg = message.toString();\n            System.out.println("消息: " + msg);\n            System.out.println("消息来自: "+message.getMessageProperties().getConsumerQueue());\n\n            // 手动确认\n            channel.basicAck(deliveryTag, true);\n        } catch (Exception e) {\n            // 拒绝策略\n            // 处理失败,重新压入MQ\n            channel.basicReject(deliveryTag, false);\n            e.printStackTrace();\n        }\n    }\n}\n\n\n\n# 消息接收\n\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n@Component\n//@RabbitListener(queues = "myDirectQueue")\npublic class DirectReceiver{\n\n//    @RabbitHandler\n//    @RabbitListener(queues = "myDirectQueue")\n//    public void process(String msg) {\n//        System.out.println(msg);\n//    }\n\n    @RabbitHandler\n    @RabbitListener(queues = "dlkQueue")\n    public void process1(String msg){\n        System.out.println("死信队列 " + msg);\n    }\n\n    @RabbitHandler\n    @RabbitListener(queues = "dmpQueue")\n    public void process2(String msg){\n        System.out.println("延时队列 " + msg);\n    }\n\n\n    @RabbitHandler\n    @RabbitListener(queues = "fanoutQueueA")\n    public void processA(String msg) {\n        System.out.println("fanoutQueueA " + msg);\n    }\n\n    @RabbitHandler\n    @RabbitListener(queues = "fanoutQueueB")\n    public void processB(String msg) {\n        System.out.println("fanoutQueueB " + msg);\n    }\n\n    @RabbitHandler\n    @RabbitListener(queues = "fanoutQueueC")\n    public void processC(String msg) {\n        System.out.println("fanoutQueueC " + msg);\n    }\n\n\n    @RabbitHandler\n    @RabbitListener(queues = "myTopicQueue_01")\n    public void process_01(String msg) {\n        System.out.println("myTopicQueue_01 " + msg);\n    }\n\n    @RabbitHandler\n    @RabbitListener(queues = "myTopicQueue_02")\n    public void process_02(String msg) {\n        System.out.println("myTopicQueue_02 " + msg);\n    }\n\n    @RabbitHandler\n    @RabbitListener(queues = "myTopicQueue_03")\n    public void process_03(String msg) {\n        System.out.println("myTopicQueue_03 " + msg);\n    }\n\n    @RabbitHandler\n    @RabbitListener(queues = "myTopicQueue_04")\n    public void process_04(String msg) {\n        System.out.println("myTopicQueue_04 " + msg);\n    }\n\n}\n\n\n\n# 消息发送\n\n@RestController\n@Slf4j\npublic class HelloController {\n\n//    @Autowired\n    @Resource(name = "rabbitTemplate")\n    private RabbitTemplate rabbitTemplate;\n\n    @GetMapping("/send")\n    public String send(){\n//        String msg = "hello world";\n        String msg = "你好！";\n        rabbitTemplate.convertAndSend("myDirectExchange", "my.direct.routing", msg);\n        return "hello world";\n    }\n\n    @GetMapping("/ttl")\n    public String ttl(){\n        String msg = "你好！";\n        /**死信队列*/\n        rabbitTemplate.convertAndSend("demoExchange", "demo.routeKey", msg, new MessagePostProcessor() {\n            @Override\n            public Message postProcessMessage(Message message) throws AmqpException {\n                //设置消息的过期时间，是以毫秒为单位的\n                message.getMessageProperties().setExpiration("5000");\n                return message;\n            }\n        });\n        /**延时交换机、需装插件*/\n        rabbitTemplate.convertAndSend("dmpExchange", "dmp.routeKey", msg, new MessagePostProcessor() {\n            @Override\n            public Message postProcessMessage(Message message) throws AmqpException {\n                //使用延迟插件只需要在消息的header中添加x-delay属性，值为过期时间，单位毫秒\n                message.getMessageProperties().setHeader("x-delay",5*1000);\n                return message;\n            }\n        });\n        return "hello ttl";\n    }\n\n    @GetMapping("/sendByFanout")\n    public String sendByFanout() {\n        String msg = "hello fanout";\n        rabbitTemplate.convertAndSend("fanoutExchange", null, msg);\n        return "hello fanout";\n    }\n\n    @RequestMapping("/sendByTopic")\n    public String sendByTopic() {\n        String msg = "hello";\n        rabbitTemplate.convertAndSend("myTopicExchange", "user.weather", msg + " topic.01");\n        rabbitTemplate.convertAndSend("myTopicExchange", "student.new", msg + " topic.xxx");\n        return "hello topic";\n    }\n\n}\n',normalizedContent:'# 1.添加依赖\n\n \x3c!--web--\x3e\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-web</artifactid>\n    <version>2.5.3</version>\n</dependency>\n\n\x3c!--rabbitmq--\x3e\n<dependency>\n    <groupid>org.springframework.amqp</groupid>\n    <artifactid>spring-rabbit</artifactid>\n    <version>2.3.10</version>\n</dependency>\n\n\n\n# 2.配置\n\n\n# yml配置\n\nserver:\n  port: 8080\nspring:\n  rabbitmq:\n    host: localhost\n    port: 5672\n    username: guest\n    password: guest\n    publisher-confirm-type: correlated\n    #如果对异步消息需要回调必须设置为true\n    publisher-returns: true\n    listener:\n      simple:\n        #消费者数量\n        concurrency: 5\n        #最大消费者数量\n        max-concurrency: 10\n        #消费者每次从队列获取的消息数量。写多了，如果长时间得不到消费，数据就一直得不到处理\n        prefetch: 1\n        #消费接收确认机制-手动确认\n        acknowledge-mode: manual\n\n\n\n# rabbitmq配置\n\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.amqp.core.returnedmessage;\nimport org.springframework.amqp.rabbit.connection.connectionfactory;\nimport org.springframework.amqp.rabbit.connection.correlationdata;\nimport org.springframework.amqp.rabbit.core.rabbittemplate;\nimport org.springframework.amqp.support.converter.jackson2jsonmessageconverter;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\n\n@configuration\n@slf4j\npublic class rabbitconfig {\n\n\n    //处理消息返回\n//    @bean\n//    public messageconverter jsonmessageconverter() {\n//        return new jackson2jsonmessageconverter();\n//    }\n\n    @bean\n    public rabbittemplate rabbittemplate(connectionfactory connectionfactory) {\n        rabbittemplate rabbittemplate = new rabbittemplate();\n\n        rabbittemplate.setconnectionfactory(connectionfactory);\n        //设置消息发送格式为json\n        rabbittemplate.setmessageconverter(new jackson2jsonmessageconverter());\n        // 开启mandatory, 才能触发回调函数，无论消息推送结果如何都强制调用回调函数\n        rabbittemplate.setmandatory(true);\n        //消息发送到exchange回调 需设置：spring.rabbitmq.publisher-confirms=correlated\n        rabbittemplate.setconfirmcallback(new rabbittemplate.confirmcallback() {\n            public void confirm(correlationdata correlationdata, boolean ack, string cause) {\n                if (ack){\n                    log.debug("消息发送成功:correlationdata({}),ack({}),cause({})",correlationdata,ack,cause);\n                }else {\n                    log.debug("消息未确认:correlationdata({}),ack({}),cause({})",correlationdata,ack,cause);\n                }\n            }\n        });\n        //消息从exchange发送到queue失败回调  需设置：spring.rabbitmq.publisher-returns=true\n        rabbittemplate.setreturnscallback(new rabbittemplate.returnscallback() {\n            @override\n            public void returnedmessage(returnedmessage returnedmessage) {\n                log.error("消息丢失:交换机exchange({}),路由键route({}),回应码replycode({}),回应信息replytext({}),消息message:{}",returnedmessage.getexchange(),returnedmessage.getroutingkey(),returnedmessage.getreplycode(),returnedmessage.getreplytext(),returnedmessage.getmessage());\n            }\n\n        });\n\n        return rabbittemplate;\n    }\n}\n\n\n\n# 3.使用\n\n\n# direct配置\n\nimport org.springframework.amqp.core.binding;\nimport org.springframework.amqp.core.bindingbuilder;\nimport org.springframework.amqp.core.directexchange;\nimport org.springframework.amqp.core.queue;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\n\n\n/**\n * 一对一直连\n */\n@configuration\npublic class directrabbitconfig {\n\n    /**\n     * 交换机\n     */\n    @bean\n    public directexchange mydirectexchange() {\n        // 参数意义:\n        // name: 名称\n        // durable: true\n        // autodelete: 自动删除\n        return new directexchange("mydirectexchange", true, false);\n    }\n\n    /**\n     * 队列\n     */\n    @bean\n    public queue mydirectqueue() {\n\n        return new queue("mydirectqueue", true);\n    }\n\n    /**\n     * 绑定\n     */\n    @bean\n    public binding bindingdirect() {\n        return bindingbuilder.bind(mydirectqueue())\n                             .to(mydirectexchange())\n                             .with("my.direct.routing");\n    }\n    \n}\n\n\n\n# fanout配置\n\nimport org.springframework.amqp.core.binding;\nimport org.springframework.amqp.core.bindingbuilder;\nimport org.springframework.amqp.core.fanoutexchange;\nimport org.springframework.amqp.core.queue;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\n\n\n/**\n * 广播\n */\n@configuration\npublic class fanoutrabbitconfig {\n\n    // ----- 交换机 -----\n    @bean\n    public fanoutexchange fanoutexchange() {\n        return new fanoutexchange("fanoutexchange", true, false);\n    }\n\n    // ----- 队列 -----\n    @bean\n    public queue fanoutqueuea() {\n        return new queue("fanoutqueuea", true);\n    }\n\n    @bean\n    public queue fanoutqueueb() {\n        return new queue("fanoutqueueb", true);\n    }\n\n    @bean\n    public queue fanoutqueuec() {\n        return new queue("fanoutqueuec", true);\n    }\n\n    // ----- 绑定 -----\n    @bean\n    public binding bindingfanouta() {\n        return bindingbuilder.bind(fanoutqueuea()).to(fanoutexchange());\n    }\n\n    @bean\n    public binding bindingfanoutb() {\n        return bindingbuilder.bind(fanoutqueueb()).to(fanoutexchange());\n    }\n\n    @bean\n    public binding bindingfanoutc() {\n        return bindingbuilder.bind(fanoutqueuec()).to(fanoutexchange());\n    }\n\n}\n\n\n\n# topic配置\n\nimport org.springframework.amqp.core.binding;\nimport org.springframework.amqp.core.bindingbuilder;\nimport org.springframework.amqp.core.queue;\nimport org.springframework.amqp.core.topicexchange;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\n\n\n/**\n * 路由匹配\n */\n@configuration\npublic class topicrabbitconfig {\n\n    // 交换机\n    @bean\n    public topicexchange mytopicexchange() {\n        return new topicexchange("mytopicexchange", true, false);\n    }\n\n    // ----- 队列 -----\n    @bean\n    public queue mytopicqueue_01() {\n        return new queue("mytopicqueue_01", true);\n    }\n\n    @bean queue mytopicqueue_02() {\n        return new queue("mytopicqueue_02", true);\n    }\n\n    @bean queue mytopicqueue_03() {\n        return new queue("mytopicqueue_03", true);\n    }\n\n    @bean queue mytopicqueue_04() {\n        return new queue("mytopicqueue_04", true);\n    }\n\n    /**\n     * 绑定路由键为user.#\n     */\n    @bean\n    public binding binding_01() {\n        return bindingbuilder.bind(mytopicqueue_01()).to(mytopicexchange()).with("user.#");\n    }\n\n    /**\n     * 绑定路由键为#.new\n     */\n    @bean\n    public binding binding_02() {\n        return bindingbuilder.bind(mytopicqueue_02()).to(mytopicexchange()).with("#.new");\n    }\n\n    /**\n     * 绑定路由键为#.weather\n     */\n    @bean\n    public binding binding_03() { return bindingbuilder.bind(mytopicqueue_03()).to(mytopicexchange()).with("#.weather");\n    }\n\n    /**\n     * 绑定路由键为europe.#\n     */\n    @bean\n    public binding binding_04() { return bindingbuilder.bind(mytopicqueue_04()).to(mytopicexchange()).with("europe.#");\n    }\n\n}\n\n\n\n# 延迟消息配置\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\n\nimport java.util.hashmap;\nimport java.util.map;\n\n\n/**\n * 死信队列---需两个交换机两个队列\n *\n * 延时交换机---需安装插件\n * */\n\n@configuration\npublic class ttlrabbitconfig {\n\n    //死信交换机\n    @bean\n    public directexchange dlkexchange(){ \n        return new directexchange("dlkexchange", true, false);\n    }\n\n    @bean\n    public queue dlkqueue(){\n        return new queue("dlkqueue",true,false,false);\n    }\n\n    @bean\n    public binding dlkbind(){ \n        return bindingbuilder.bind(dlkqueue()).to(dlkexchange()).with("dlk.routekey");\n    }\n\n    //业务交换机\n    @bean\n    public directexchange demoexchange(){ \n        return new directexchange("demoexchange", true, false);\n    }\n\n    @bean\n    public queue demoqueue(){\n        //只需要在声明业务队列时添加x-dead-letter-exchange，值为死信交换机\n        map<string,object> map = new hashmap<>(1);\n        map.put("x-dead-letter-exchange","dlkexchange");\n        //该参数x-dead-letter-routing-key可以修改该死信的路由key，不设置则使用原消息的路由key\n        map.put("x-dead-letter-routing-key","dlk.routekey");\n        return new queue("demoqueue",true,false,false,map);\n    }\n\n    @bean\n    public binding demobind(){ \n        return bindingbuilder.bind(demoqueue()).to(demoexchange()).with("demo.routekey");\n    }\n\n\n    //延迟插件使用\n    //1、声明一个类型为x-delayed-message的交换机\n    //2、参数添加一个x-delayed-type值为交换机的类型用于路由key的映射\n    @bean\n    public customexchange dmpexchange(){\n        map<string, object> arguments = new hashmap<>(1);\n        arguments.put("x-delayed-type", "direct");\n        return new customexchange("dmpexchange","x-delayed-message",true,false,arguments);\n    }\n\n    @bean\n    public queue dmpqueue(){\n        return new queue("dmpqueue",true,false,false);\n    }\n\n    @bean\n    public binding dmpbind(){ \n        return bindingbuilder.bind(dmpqueue()).to(dmpexchange()).with("dmp.routekey").noargs();\n    }\n\n}\n\n\n\n# 队列监听配置\n\nimport com.springboot.listener.myackreceiver;\nimport org.springframework.amqp.core.acknowledgemode;\nimport org.springframework.amqp.rabbit.connection.cachingconnectionfactory;\nimport org.springframework.amqp.rabbit.listener.simplemessagelistenercontainer;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\n\n\n/**\n * rabbitmq 队列监听配置\n * */\n@configuration\npublic class messagelistenerconfig {\n\n    @autowired\n    private cachingconnectionfactory cachingconnectionfactory;\n\n    @autowired\n    private myackreceiver myackreceiver;\n\n    @bean\n    public simplemessagelistenercontainer simplemessagelistenercontainer() {\n        simplemessagelistenercontainer container = new  simplemessagelistenercontainer(cachingconnectionfactory);\n\n        // 监听队列名\n        container.setqueuenames("mydirectqueue");\n        // 当前消费者数量\n        container.setconcurrentconsumers(1);\n        // 最大消费者数量\n        container.setmaxconcurrentconsumers(1);\n        // 手动确认\n        container.setacknowledgemode(acknowledgemode.manual);\n        // 设置监听器\n        container.setmessagelistener(myackreceiver);\n\n        return container;\n    }\n}\n\n\n\n# 消息ack接收\n\nimport com.rabbitmq.client.channel;\nimport org.springframework.amqp.core.message;\nimport org.springframework.amqp.rabbit.annotation.rabbitlistener;\nimport org.springframework.amqp.rabbit.listener.api.channelawaremessagelistener;\nimport org.springframework.stereotype.component;\n\n@component\npublic class myackreceiver implements channelawaremessagelistener {\n\n    public void onmessage(message message, channel channel) throws exception {\n        // 消息的唯一性id\n        long deliverytag = message.getmessageproperties().getdeliverytag();\n\n        try {\n            string msg = message.tostring();\n            system.out.println("消息: " + msg);\n            system.out.println("消息来自: "+message.getmessageproperties().getconsumerqueue());\n\n            // 手动确认\n            channel.basicack(deliverytag, true);\n        } catch (exception e) {\n            // 拒绝策略\n            // 处理失败,重新压入mq\n            channel.basicreject(deliverytag, false);\n            e.printstacktrace();\n        }\n    }\n}\n\n\n\n# 消息接收\n\nimport org.springframework.amqp.core.message;\nimport org.springframework.amqp.rabbit.annotation.rabbithandler;\nimport org.springframework.amqp.rabbit.annotation.rabbitlistener;\nimport org.springframework.stereotype.component;\n\n@component\n//@rabbitlistener(queues = "mydirectqueue")\npublic class directreceiver{\n\n//    @rabbithandler\n//    @rabbitlistener(queues = "mydirectqueue")\n//    public void process(string msg) {\n//        system.out.println(msg);\n//    }\n\n    @rabbithandler\n    @rabbitlistener(queues = "dlkqueue")\n    public void process1(string msg){\n        system.out.println("死信队列 " + msg);\n    }\n\n    @rabbithandler\n    @rabbitlistener(queues = "dmpqueue")\n    public void process2(string msg){\n        system.out.println("延时队列 " + msg);\n    }\n\n\n    @rabbithandler\n    @rabbitlistener(queues = "fanoutqueuea")\n    public void processa(string msg) {\n        system.out.println("fanoutqueuea " + msg);\n    }\n\n    @rabbithandler\n    @rabbitlistener(queues = "fanoutqueueb")\n    public void processb(string msg) {\n        system.out.println("fanoutqueueb " + msg);\n    }\n\n    @rabbithandler\n    @rabbitlistener(queues = "fanoutqueuec")\n    public void processc(string msg) {\n        system.out.println("fanoutqueuec " + msg);\n    }\n\n\n    @rabbithandler\n    @rabbitlistener(queues = "mytopicqueue_01")\n    public void process_01(string msg) {\n        system.out.println("mytopicqueue_01 " + msg);\n    }\n\n    @rabbithandler\n    @rabbitlistener(queues = "mytopicqueue_02")\n    public void process_02(string msg) {\n        system.out.println("mytopicqueue_02 " + msg);\n    }\n\n    @rabbithandler\n    @rabbitlistener(queues = "mytopicqueue_03")\n    public void process_03(string msg) {\n        system.out.println("mytopicqueue_03 " + msg);\n    }\n\n    @rabbithandler\n    @rabbitlistener(queues = "mytopicqueue_04")\n    public void process_04(string msg) {\n        system.out.println("mytopicqueue_04 " + msg);\n    }\n\n}\n\n\n\n# 消息发送\n\n@restcontroller\n@slf4j\npublic class hellocontroller {\n\n//    @autowired\n    @resource(name = "rabbittemplate")\n    private rabbittemplate rabbittemplate;\n\n    @getmapping("/send")\n    public string send(){\n//        string msg = "hello world";\n        string msg = "你好！";\n        rabbittemplate.convertandsend("mydirectexchange", "my.direct.routing", msg);\n        return "hello world";\n    }\n\n    @getmapping("/ttl")\n    public string ttl(){\n        string msg = "你好！";\n        /**死信队列*/\n        rabbittemplate.convertandsend("demoexchange", "demo.routekey", msg, new messagepostprocessor() {\n            @override\n            public message postprocessmessage(message message) throws amqpexception {\n                //设置消息的过期时间，是以毫秒为单位的\n                message.getmessageproperties().setexpiration("5000");\n                return message;\n            }\n        });\n        /**延时交换机、需装插件*/\n        rabbittemplate.convertandsend("dmpexchange", "dmp.routekey", msg, new messagepostprocessor() {\n            @override\n            public message postprocessmessage(message message) throws amqpexception {\n                //使用延迟插件只需要在消息的header中添加x-delay属性，值为过期时间，单位毫秒\n                message.getmessageproperties().setheader("x-delay",5*1000);\n                return message;\n            }\n        });\n        return "hello ttl";\n    }\n\n    @getmapping("/sendbyfanout")\n    public string sendbyfanout() {\n        string msg = "hello fanout";\n        rabbittemplate.convertandsend("fanoutexchange", null, msg);\n        return "hello fanout";\n    }\n\n    @requestmapping("/sendbytopic")\n    public string sendbytopic() {\n        string msg = "hello";\n        rabbittemplate.convertandsend("mytopicexchange", "user.weather", msg + " topic.01");\n        rabbittemplate.convertandsend("mytopicexchange", "student.new", msg + " topic.xxx");\n        return "hello topic";\n    }\n\n}\n',charsets:{cjk:!0}},{title:"SpringBoot整合ElasticSearch",frontmatter:{title:"SpringBoot整合ElasticSearch",date:"2022-03-10T14:19:24.000Z",permalink:"/pages/b7c905/",categories:["学习资料","Java","SpringBoot实战"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/18.SpringBoot%E5%AE%9E%E6%88%98/06.SpringBoot%E6%95%B4%E5%90%88ElasticSearch.html",relativePath:"学习资料/03.Java/18.SpringBoot实战/06.SpringBoot整合ElasticSearch.md",key:"v-3259f422",path:"/pages/b7c905/",headers:[{level:2,title:"1.添加依赖",slug:"_1-添加依赖",normalizedTitle:"1.添加依赖",charIndex:2},{level:2,title:"2.配置",slug:"_2-配置",normalizedTitle:"2.配置",charIndex:182},{level:3,title:"yml配置",slug:"yml配置",normalizedTitle:"yml配置",charIndex:191},{level:2,title:"3.使用",slug:"_3-使用",normalizedTitle:"3.使用",charIndex:466},{level:3,title:"entity层",slug:"entity层",normalizedTitle:"entity层",charIndex:475},{level:3,title:"继承ElasticsearchRepository",slug:"继承elasticsearchrepository",normalizedTitle:"继承elasticsearchrepository",charIndex:2350},{level:3,title:"mapper层",slug:"mapper层",normalizedTitle:"mapper层",charIndex:6419},{level:3,title:"Iservice层",slug:"iservice层",normalizedTitle:"iservice层",charIndex:6728},{level:3,title:"service层",slug:"service层",normalizedTitle:"service层",charIndex:6729},{level:3,title:"controller层",slug:"controller层",normalizedTitle:"controller层",charIndex:9307}],headersStr:"1.添加依赖 2.配置 yml配置 3.使用 entity层 继承ElasticsearchRepository mapper层 Iservice层 service层 controller层",content:'# 1.添加依赖\n\n\x3c!--Elasticsearch相关依赖--\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-elasticsearch<artifactId>\n</dependency>\n\n\n\n# 2.配置\n\n\n# yml配置\n\nspring: \n  elasticsearch: #springboot 默认配置 localhost:9200\n    rest:\n      uris: ["127.0.0.1:9200"]\n  data:\n    elasticsearch:\n      repositories:\n         enabled: true\n      cluster-nodes: 127.0.0.1:9300 # es的连接地址及端口号\n      cluster-name: elasticsearch # es集群的名称\n\n\n\n# 3.使用\n\n\n# entity层\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.elasticsearch.annotations.DateFormat;\nimport org.springframework.data.elasticsearch.annotations.Document;\nimport org.springframework.data.elasticsearch.annotations.Field;\nimport org.springframework.data.elasticsearch.annotations.FieldType;\n\nimport java.math.BigDecimal;\nimport java.util.Date;\n\n@Data\n@TableName("book")\n@NoArgsConstructor\n@AllArgsConstructor\n@Document(indexName = "shop", type = "book",shards = 1,replicas = 0)\npublic class Book {\n    @Id\n    @Field(type = FieldType.Text)\n    @TableId(type = IdType.ID_WORKER_STR)\n    private String id;\n    \n    @Field(analyzer="ik_max_word")\n    private String title;\n    \n    @Field(analyzer="ik_max_word")\n    private String author;\n    \n    @Field(type = FieldType.Double)\n    private Double price;\n\n    @Field(type = FieldType.Date,format = DateFormat.basic_date_time)\n    @TableField(fill = FieldFill.INSERT)\n    private Date createTime;\n\n    @Field(type = FieldType.Date,format = DateFormat.basic_date_time)\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private BigDecimal updateTime;\n}\n\n\n# 常用注解\n\n@Document：作用在类上，标记实体类为文档对象   \n    indexName = "索引库名称，mysql中数据库的概念"  \n    type = "文档类型，mysql中表的概念" \n    shards = 5 分片数，默认是5\n    replicas = 1 副本数量，默认是1\n    \n@Id：作用在成员变量，标记一个字段为id主键\n\n@Field：作用在成员变量，标记为文档的字段，并制定映射属性\n    type = 字段的类型，取值是枚举，FieldType\n    index = 是否索引，布尔值类型，默认是true\n    store = 是否存储，布尔值类型，默认值是false\n    analyzer = 分词器名称\n\n\n# FieldType枚举类\n\n//为文档自动指定元数据类型\npublic enum FieldType {\n    Text,//会进行分词并建了索引的字符类型\n    Integer,\n    Long,\n    Date,\n    Float,\n    Double,\n    Boolean,\n    Object,\n    Auto,//自动判断字段类型\n    Nested,//嵌套对象类型\n    Ip,\n    Attachment,\n    Keyword//不会进行分词建立索引的类型\n}\n\n\n\n# 继承ElasticsearchRepository\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.spring.cloud.search.entity.po.Book;\nimport org.springframework.data.elasticsearch.repository.ElasticsearchRepository;\n\npublic interface EsBookRepository extends ElasticsearchRepository<Book, String> {\n\n    Page<Book> findByTitleOrAuthor(String title, String author, Page page);\n\n}\n\n\n# 具体关键字\n\n关键字                   使用示例                                 等同于的ES查询\nAnd                   findByNameAndPrice                   {“bool” : {“must” : [ {“field” : {“name” : “?”}}, {“field” :\n                                                           {“price” : “?”}} ]}}\nOr                    findByNameOrPrice                    {“bool” : {“should” : [ {“field” : {“name” : “?”}}, {“field”\n                                                           : {“price” : “?”}} ]}}\nIs                    findByName                           {“bool” : {“must” : {“field” : {“name” : “?”}}}}\nNot                   findByNameNot                        {“bool” : {“must_not” : {“field” : {“name” : “?”}}}}\nBetween               findByPriceBetween                   {“bool” : {“must” : {“range” : {“price” : {“from” : ?,”to” :\n                                                           ?,”include_lower” : true,”include_upper” : true}}}}}\nLessThanEqual         findByPriceLessThan                  {“bool” : {“must” : {“range” : {“price” : {“from” :\n                                                           null,”to” : ?,”include_lower” : true,”include_upper” :\n                                                           true}}}}}\nGreaterThanEqual      findByPriceGreaterThan               {“bool” : {“must” : {“range” : {“price” : {“from” : ?,”to” :\n                                                           null,”include_lower” : true,”include_upper” : true}}}}}\nBefore                findByPriceBefore                    {“bool” : {“must” : {“range” : {“price” : {“from” :\n                                                           null,”to” : ?,”include_lower” : true,”include_upper” :\n                                                           true}}}}}\nAfter                 findByPriceAfter                     {“bool” : {“must” : {“range” : {“price” : {“from” : ?,”to” :\n                                                           null,”include_lower” : true,”include_upper” : true}}}}}\nLike                  findByNameLike                       {“bool” : {“must” : {“field” : {“name” : {“query” : “?\n                                                           *”,”analyze_wildcard” : true}}}}}\nStartingWith          findByNameStartingWith               {“bool” : {“must” : {“field” : {“name” : {“query” : “?\n                                                           *”,”analyze_wildcard” : true}}}}}\nEndingWith            findByNameEndingWith                 {“bool” : {“must” : {“field” : {“name” : {“query” :\n                                                           “*?”,”analyze_wildcard” : true}}}}}\nContains/Containing   findByNameContaining                 {“bool” : {“must” : {“field” : {“name” : {“query” :\n                                                           “?”,”analyze_wildcard” : true}}}}}\nIn                    findByNameIn(Collectionnames)        {“bool” : {“must” : {“bool” : {“should” : [ {“field” :\n                                                           {“name” : “?”}}, {“field” : {“name” : “?”}} ]}}}}\nNotIn                 findByNameNotIn(Collectionnames)     {“bool” : {“must_not” : {“bool” : {“should” : {“field” :\n                                                           {“name” : “?”}}}}}}\nTrue                  findByAvailableTrue                  {“bool” : {“must” : {“field” : {“available” : true}}}}\nFalse                 findByAvailableFalse                 {“bool” : {“must” : {“field” : {“available” : false}}}}\nOrderBy               findByAvailableTrueOrderByNameDesc   {“sort” : [{ “name” : {“order” : “desc”} }],”bool” : {“must”\n                                                           : {“field” : {“available” : true}}}}\n\n\n# mapper层\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.spring.cloud.search.entity.po.Book;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.context.annotation.Configuration;\n\n@Mapper\n@Configuration\npublic interface BookMapper extends BaseMapper<Book> {\n    \n}\n\n\n\n# Iservice层\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.spring.cloud.search.entity.po.Book;\nimport java.util.List;\n\npublic interface IBookService {\n\n    /**\n     * 从数据库中导入所有book到ES\n     */\n    int importAll();\n\n    /**\n     * 根据id删除book\n     */\n    void delete(String id);\n\n    /**\n     * 根据id创建book\n     */\n    Book create(String id);\n\n    /**\n     * 批量删除book\n     */\n    void delete(List<String> ids);\n\n    /**\n     * 根据关键字搜索名称或者作者\n     */\n    Page<Book> search(String keyword, Integer pageNum, Integer pageSize);\n\n}\n\n\n\n# service层\n\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.spring.cloud.search.dao.BookMapper;\nimport com.spring.cloud.search.entity.po.Book;\nimport com.spring.cloud.search.repository.EsBookRepository;\nimport com.spring.cloud.search.service.IBookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\n\n@Service\npublic class BookService extends ServiceImpl<BookMapper,Book> implements IBookService {\n\n    // 1.可以直接使用crud\n    @Autowired\n    private EsBookRepository esBookRepository;\n    \n    // 2.自己写语句做操作\n    @Autowired\n    private ElasticsearchTemplate elasticsearchTemplate;\n\n\n    @Override\n    public int importAll() {\n        List<Book> list = this.list();\n        Iterable<Book> books = esBookRepository.saveAll(list);\n        Iterator<Book> iterator = books.iterator();\n        int result = 0;\n        while (iterator.hasNext()) {\n            result++;\n            iterator.next();\n        }\n        return result;\n    }\n\n    @Override\n    public void delete(String id) {\n        esBookRepository.deleteById(id);\n    }\n\n    @Override\n    public Book create(String id) {\n        Book book = this.getById(id);\n        if (book!=null){\n            esBookRepository.save(book);\n        }\n        return book;\n    }\n\n    @Override\n    public void delete(List<String> ids) {\n        if (!CollectionUtils.isEmpty(ids)) {\n            Collection<Book> books = this.listByIds(ids);\n            if (books.size()>0){\n                esBookRepository.deleteAll(books);\n            }\n        }\n    }\n\n    @Override\n    public Page<Book> search(String keyword, Integer pageNum, Integer pageSize) {\n        Page page = new Page(pageNum, pageSize);\n        return esBookRepository.findByTitleOrAuthor(keyword,keyword,page);\n    }\n    \n}\n\n\n\n# controller层\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.spring.cloud.search.entity.po.Book;\nimport com.spring.cloud.search.service.IBookService;\nimport com.springboot.cloud.common.core.entity.vo.Result;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping("/book")\n@Api(tags = "BookController", description = "搜索book管理")\npublic class BookController {\n    \n    @Autowired\n    private IBookService bookService;\n\n    @ApiOperation(value = "导入所有数据库中book到ES")\n    @RequestMapping(value = "/importAll", method = RequestMethod.POST)\n    @ResponseBody\n    public Result importAllList() {\n        int count = bookService.importAll();\n        return Result.success(count);\n    }\n\n    @ApiOperation(value = "根据id删除book")\n    @RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)\n    @ResponseBody\n    public Result delete(@PathVariable String id) {\n        bookService.delete(id);\n        return Result.success();\n    }\n\n    @ApiOperation(value = "根据id批量删除book")\n    @RequestMapping(value = "/delete/batch", method = RequestMethod.POST)\n    @ResponseBody\n    public Result delete(@RequestParam("ids") List<String> ids) {\n        bookService.delete(ids);\n        return Result.success();\n    }\n\n    @ApiOperation(value = "根据id创建book")\n    @RequestMapping(value = "/create/{id}", method = RequestMethod.POST)\n    @ResponseBody\n    public Result create(@PathVariable String id) {\n        Book book = bookService.create(id);\n        if (book != null) {\n            return Result.success(book);\n        } else {\n            return Result.fail();\n        }\n    }\n\n    @ApiOperation(value = "简单搜索")\n    @RequestMapping(value = "/search/simple", method = RequestMethod.GET)\n    @ResponseBody\n    public Result search(@RequestParam(required = false) String keyword,\n                                                      @RequestParam(required = false, defaultValue = "0") Integer pageNum,\n                                                      @RequestParam(required = false, defaultValue = "5") Integer pageSize) {\n        Page<Book> bookPage = bookService.search(keyword, pageNum, pageSize);\n        return Result.success(bookPage);\n    }\n    \n}\n',normalizedContent:'# 1.添加依赖\n\n\x3c!--elasticsearch相关依赖--\x3e\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-data-elasticsearch<artifactid>\n</dependency>\n\n\n\n# 2.配置\n\n\n# yml配置\n\nspring: \n  elasticsearch: #springboot 默认配置 localhost:9200\n    rest:\n      uris: ["127.0.0.1:9200"]\n  data:\n    elasticsearch:\n      repositories:\n         enabled: true\n      cluster-nodes: 127.0.0.1:9300 # es的连接地址及端口号\n      cluster-name: elasticsearch # es集群的名称\n\n\n\n# 3.使用\n\n\n# entity层\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.allargsconstructor;\nimport lombok.data;\nimport lombok.noargsconstructor;\nimport org.springframework.data.annotation.id;\nimport org.springframework.data.elasticsearch.annotations.dateformat;\nimport org.springframework.data.elasticsearch.annotations.document;\nimport org.springframework.data.elasticsearch.annotations.field;\nimport org.springframework.data.elasticsearch.annotations.fieldtype;\n\nimport java.math.bigdecimal;\nimport java.util.date;\n\n@data\n@tablename("book")\n@noargsconstructor\n@allargsconstructor\n@document(indexname = "shop", type = "book",shards = 1,replicas = 0)\npublic class book {\n    @id\n    @field(type = fieldtype.text)\n    @tableid(type = idtype.id_worker_str)\n    private string id;\n    \n    @field(analyzer="ik_max_word")\n    private string title;\n    \n    @field(analyzer="ik_max_word")\n    private string author;\n    \n    @field(type = fieldtype.double)\n    private double price;\n\n    @field(type = fieldtype.date,format = dateformat.basic_date_time)\n    @tablefield(fill = fieldfill.insert)\n    private date createtime;\n\n    @field(type = fieldtype.date,format = dateformat.basic_date_time)\n    @tablefield(fill = fieldfill.insert_update)\n    private bigdecimal updatetime;\n}\n\n\n# 常用注解\n\n@document：作用在类上，标记实体类为文档对象   \n    indexname = "索引库名称，mysql中数据库的概念"  \n    type = "文档类型，mysql中表的概念" \n    shards = 5 分片数，默认是5\n    replicas = 1 副本数量，默认是1\n    \n@id：作用在成员变量，标记一个字段为id主键\n\n@field：作用在成员变量，标记为文档的字段，并制定映射属性\n    type = 字段的类型，取值是枚举，fieldtype\n    index = 是否索引，布尔值类型，默认是true\n    store = 是否存储，布尔值类型，默认值是false\n    analyzer = 分词器名称\n\n\n# fieldtype枚举类\n\n//为文档自动指定元数据类型\npublic enum fieldtype {\n    text,//会进行分词并建了索引的字符类型\n    integer,\n    long,\n    date,\n    float,\n    double,\n    boolean,\n    object,\n    auto,//自动判断字段类型\n    nested,//嵌套对象类型\n    ip,\n    attachment,\n    keyword//不会进行分词建立索引的类型\n}\n\n\n\n# 继承elasticsearchrepository\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.page;\nimport com.spring.cloud.search.entity.po.book;\nimport org.springframework.data.elasticsearch.repository.elasticsearchrepository;\n\npublic interface esbookrepository extends elasticsearchrepository<book, string> {\n\n    page<book> findbytitleorauthor(string title, string author, page page);\n\n}\n\n\n# 具体关键字\n\n关键字                   使用示例                                 等同于的es查询\nand                   findbynameandprice                   {“bool” : {“must” : [ {“field” : {“name” : “?”}}, {“field” :\n                                                           {“price” : “?”}} ]}}\nor                    findbynameorprice                    {“bool” : {“should” : [ {“field” : {“name” : “?”}}, {“field”\n                                                           : {“price” : “?”}} ]}}\nis                    findbyname                           {“bool” : {“must” : {“field” : {“name” : “?”}}}}\nnot                   findbynamenot                        {“bool” : {“must_not” : {“field” : {“name” : “?”}}}}\nbetween               findbypricebetween                   {“bool” : {“must” : {“range” : {“price” : {“from” : ?,”to” :\n                                                           ?,”include_lower” : true,”include_upper” : true}}}}}\nlessthanequal         findbypricelessthan                  {“bool” : {“must” : {“range” : {“price” : {“from” :\n                                                           null,”to” : ?,”include_lower” : true,”include_upper” :\n                                                           true}}}}}\ngreaterthanequal      findbypricegreaterthan               {“bool” : {“must” : {“range” : {“price” : {“from” : ?,”to” :\n                                                           null,”include_lower” : true,”include_upper” : true}}}}}\nbefore                findbypricebefore                    {“bool” : {“must” : {“range” : {“price” : {“from” :\n                                                           null,”to” : ?,”include_lower” : true,”include_upper” :\n                                                           true}}}}}\nafter                 findbypriceafter                     {“bool” : {“must” : {“range” : {“price” : {“from” : ?,”to” :\n                                                           null,”include_lower” : true,”include_upper” : true}}}}}\nlike                  findbynamelike                       {“bool” : {“must” : {“field” : {“name” : {“query” : “?\n                                                           *”,”analyze_wildcard” : true}}}}}\nstartingwith          findbynamestartingwith               {“bool” : {“must” : {“field” : {“name” : {“query” : “?\n                                                           *”,”analyze_wildcard” : true}}}}}\nendingwith            findbynameendingwith                 {“bool” : {“must” : {“field” : {“name” : {“query” :\n                                                           “*?”,”analyze_wildcard” : true}}}}}\ncontains/containing   findbynamecontaining                 {“bool” : {“must” : {“field” : {“name” : {“query” :\n                                                           “?”,”analyze_wildcard” : true}}}}}\nin                    findbynamein(collectionnames)        {“bool” : {“must” : {“bool” : {“should” : [ {“field” :\n                                                           {“name” : “?”}}, {“field” : {“name” : “?”}} ]}}}}\nnotin                 findbynamenotin(collectionnames)     {“bool” : {“must_not” : {“bool” : {“should” : {“field” :\n                                                           {“name” : “?”}}}}}}\ntrue                  findbyavailabletrue                  {“bool” : {“must” : {“field” : {“available” : true}}}}\nfalse                 findbyavailablefalse                 {“bool” : {“must” : {“field” : {“available” : false}}}}\norderby               findbyavailabletrueorderbynamedesc   {“sort” : [{ “name” : {“order” : “desc”} }],”bool” : {“must”\n                                                           : {“field” : {“available” : true}}}}\n\n\n# mapper层\n\nimport com.baomidou.mybatisplus.core.mapper.basemapper;\nimport com.spring.cloud.search.entity.po.book;\nimport org.apache.ibatis.annotations.mapper;\nimport org.springframework.context.annotation.configuration;\n\n@mapper\n@configuration\npublic interface bookmapper extends basemapper<book> {\n    \n}\n\n\n\n# iservice层\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.page;\nimport com.spring.cloud.search.entity.po.book;\nimport java.util.list;\n\npublic interface ibookservice {\n\n    /**\n     * 从数据库中导入所有book到es\n     */\n    int importall();\n\n    /**\n     * 根据id删除book\n     */\n    void delete(string id);\n\n    /**\n     * 根据id创建book\n     */\n    book create(string id);\n\n    /**\n     * 批量删除book\n     */\n    void delete(list<string> ids);\n\n    /**\n     * 根据关键字搜索名称或者作者\n     */\n    page<book> search(string keyword, integer pagenum, integer pagesize);\n\n}\n\n\n\n# service层\n\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.page;\nimport com.baomidou.mybatisplus.extension.service.impl.serviceimpl;\nimport com.spring.cloud.search.dao.bookmapper;\nimport com.spring.cloud.search.entity.po.book;\nimport com.spring.cloud.search.repository.esbookrepository;\nimport com.spring.cloud.search.service.ibookservice;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.service;\nimport org.springframework.util.collectionutils;\n\nimport java.util.collection;\nimport java.util.iterator;\nimport java.util.list;\n\n@service\npublic class bookservice extends serviceimpl<bookmapper,book> implements ibookservice {\n\n    // 1.可以直接使用crud\n    @autowired\n    private esbookrepository esbookrepository;\n    \n    // 2.自己写语句做操作\n    @autowired\n    private elasticsearchtemplate elasticsearchtemplate;\n\n\n    @override\n    public int importall() {\n        list<book> list = this.list();\n        iterable<book> books = esbookrepository.saveall(list);\n        iterator<book> iterator = books.iterator();\n        int result = 0;\n        while (iterator.hasnext()) {\n            result++;\n            iterator.next();\n        }\n        return result;\n    }\n\n    @override\n    public void delete(string id) {\n        esbookrepository.deletebyid(id);\n    }\n\n    @override\n    public book create(string id) {\n        book book = this.getbyid(id);\n        if (book!=null){\n            esbookrepository.save(book);\n        }\n        return book;\n    }\n\n    @override\n    public void delete(list<string> ids) {\n        if (!collectionutils.isempty(ids)) {\n            collection<book> books = this.listbyids(ids);\n            if (books.size()>0){\n                esbookrepository.deleteall(books);\n            }\n        }\n    }\n\n    @override\n    public page<book> search(string keyword, integer pagenum, integer pagesize) {\n        page page = new page(pagenum, pagesize);\n        return esbookrepository.findbytitleorauthor(keyword,keyword,page);\n    }\n    \n}\n\n\n\n# controller层\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.page;\nimport com.spring.cloud.search.entity.po.book;\nimport com.spring.cloud.search.service.ibookservice;\nimport com.springboot.cloud.common.core.entity.vo.result;\nimport io.swagger.annotations.api;\nimport io.swagger.annotations.apioperation;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.list;\n\n@restcontroller\n@requestmapping("/book")\n@api(tags = "bookcontroller", description = "搜索book管理")\npublic class bookcontroller {\n    \n    @autowired\n    private ibookservice bookservice;\n\n    @apioperation(value = "导入所有数据库中book到es")\n    @requestmapping(value = "/importall", method = requestmethod.post)\n    @responsebody\n    public result importalllist() {\n        int count = bookservice.importall();\n        return result.success(count);\n    }\n\n    @apioperation(value = "根据id删除book")\n    @requestmapping(value = "/delete/{id}", method = requestmethod.get)\n    @responsebody\n    public result delete(@pathvariable string id) {\n        bookservice.delete(id);\n        return result.success();\n    }\n\n    @apioperation(value = "根据id批量删除book")\n    @requestmapping(value = "/delete/batch", method = requestmethod.post)\n    @responsebody\n    public result delete(@requestparam("ids") list<string> ids) {\n        bookservice.delete(ids);\n        return result.success();\n    }\n\n    @apioperation(value = "根据id创建book")\n    @requestmapping(value = "/create/{id}", method = requestmethod.post)\n    @responsebody\n    public result create(@pathvariable string id) {\n        book book = bookservice.create(id);\n        if (book != null) {\n            return result.success(book);\n        } else {\n            return result.fail();\n        }\n    }\n\n    @apioperation(value = "简单搜索")\n    @requestmapping(value = "/search/simple", method = requestmethod.get)\n    @responsebody\n    public result search(@requestparam(required = false) string keyword,\n                                                      @requestparam(required = false, defaultvalue = "0") integer pagenum,\n                                                      @requestparam(required = false, defaultvalue = "5") integer pagesize) {\n        page<book> bookpage = bookservice.search(keyword, pagenum, pagesize);\n        return result.success(bookpage);\n    }\n    \n}\n',charsets:{cjk:!0}},{title:"SpringBoot整合SpringSecurity",frontmatter:{title:"SpringBoot整合SpringSecurity",date:"2022-03-10T16:52:31.000Z",permalink:"/pages/464d7a/",categories:["学习资料","Java","SpringBoot实战"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/18.SpringBoot%E5%AE%9E%E6%88%98/07.SpringBoot%E6%95%B4%E5%90%88SpringSecurity.html",relativePath:"学习资料/03.Java/18.SpringBoot实战/07.SpringBoot整合SpringSecurity.md",key:"v-2f26580a",path:"/pages/464d7a/",headers:[{level:2,title:"1.添加依赖",slug:"_1-添加依赖",normalizedTitle:"1.添加依赖",charIndex:2},{level:2,title:"2.配置",slug:"_2-配置",normalizedTitle:"2.配置",charIndex:626},{level:3,title:"yml配置",slug:"yml配置",normalizedTitle:"yml配置",charIndex:635},{level:3,title:"核心配置",slug:"核心配置",normalizedTitle:"核心配置",charIndex:1212},{level:3,title:"工具类",slug:"工具类",normalizedTitle:"工具类",charIndex:11527},{level:3,title:"Handler配置",slug:"handler配置",normalizedTitle:"handler配置",charIndex:18854},{level:3,title:"其他配置",slug:"其他配置",normalizedTitle:"其他配置",charIndex:19992},{level:2,title:"3.使用",slug:"_3-使用",normalizedTitle:"3.使用",charIndex:22197},{level:3,title:"entity层",slug:"entity层",normalizedTitle:"entity层",charIndex:22206},{level:3,title:"mapper层",slug:"mapper层",normalizedTitle:"mapper层",charIndex:29132},{level:3,title:"Iservice层",slug:"iservice层",normalizedTitle:"iservice层",charIndex:30645},{level:3,title:"service层",slug:"service层",normalizedTitle:"service层",charIndex:30646},{level:3,title:"controller层",slug:"controller层",normalizedTitle:"controller层",charIndex:61742}],headersStr:"1.添加依赖 2.配置 yml配置 核心配置 工具类 Handler配置 其他配置 3.使用 entity层 mapper层 Iservice层 service层 controller层",content:'# 1.添加依赖\n\n\x3c!--SpringSecurity依赖配置--\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n\x3c!--JWT(Json Web Token)登录支持--\x3e\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt</artifactId>\n    <version>0.9.0</version>\n</dependency>\n\x3c!--JSON--\x3e\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.59</version>\n</dependency>\n\x3c!--lombok--\x3e\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>1.18.16</version>\n</dependency>\n\n\n\n\n# 2.配置\n\n\n# yml配置\n\nserver:\n  port: 8080\nspring:\n  datasource:\n    url: jdbc:mysql://192.168.3.119:3306/zksc_medical?characterEncoding=UTF-8&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.cj.jdbc.Driver\n\n# JWT配置\njwt:\n   # 密匙Key\n   secret: JWTSecret,zksc\n   # HeaderKey\n   tokenHeader: Authorization\n   # Token前缀\n   tokenPrefix: Bearer\n   # 过期时间，单位秒\n   expiration: 1800\n   # 配置白名单（不需要认证）\n   antMatchers: /login,/refreshToken,/webjars/**,/swagger-ui.html,/swagger-resources/**,/*/api-docs,/websocket/**\n\n\n\n# 核心配置\n\n# spring security配置类\n\nimport com.springboot.system.filter.JWTAuthenticationFilter;\nimport com.springboot.system.handler.*;\nimport com.springboot.system.provider.UserAuthenticationProvider;\nimport com.springboot.system.provider.UserPermissionProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler;\nimport org.springframework.security.web.authentication.logout.LogoutFilter;\nimport org.springframework.web.filter.CorsFilter;\n\n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true) // 开启方法权限注解\npublic class SysSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     * 无权限处理类\n     */\n    @Autowired\n    private UserAccessDeniedHandler userAccessDeniedHandler;\n\n    /**\n     * 用户未登录处理类\n     */\n    @Autowired\n    private UserNotLoginHandler userNotLoginHandler;\n\n    /**\n     * 用户登录成功处理类\n     */\n    @Autowired\n    private UserLoginSuccessHandler userLoginSuccessHandler;\n\n    /**\n     * 用户登录失败处理类\n     */\n    @Autowired\n    private UserLoginFailureHandler userLoginFailureHandler;\n\n    /**\n     * 用户登出成功处理类\n     */\n    @Autowired\n    private UserLogoutSuccessHandler userLogoutSuccessHandler;\n\n    /**\n     * 跨域过滤器\n     */\n    @Autowired\n    private CorsFilter corsFilter;\n\n    /**\n     * 用户登录验证\n     */\n    @Autowired\n    private UserAuthenticationProvider userAuthenticationProvider;\n\n    /**\n     * 用户权限注解\n     */\n    @Autowired\n    private UserPermissionProvider userPermissionProvider;\n\n\n    /**\n     * 加密方式\n     *\n     * @return\n     */\n    @Bean\n    public BCryptPasswordEncoder bCryptPasswordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n\n    /**\n     * 注入自定义PermissionEvaluator\n     *\n     * @return\n     */\n    @Bean\n    public DefaultWebSecurityExpressionHandler userSecurityExpressionHandler() {\n        DefaultWebSecurityExpressionHandler handler = new DefaultWebSecurityExpressionHandler();\n        handler.setPermissionEvaluator(userPermissionProvider);\n        return handler;\n    }\n\n    /**\n     * 用户登录验证\n     */\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) {\n        auth.authenticationProvider(userAuthenticationProvider);\n    }\n\n    /**\n     * 安全权限配置\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests() // 权限配置\n                .antMatchers(JWTConfig.antMatchers.split(",")).permitAll()// 获取白名单（不进行权限验证）\n                .anyRequest().authenticated() // 其他的需要登陆后才能访问\n                .and().httpBasic().authenticationEntryPoint(userNotLoginHandler) // 配置未登录处理类\n                //.and().formLogin().loginProcessingUrl("/system-login")// 配置登录URL\n                //.successHandler(userLoginSuccessHandler) // 配置登录成功处理类\n                //.failureHandler(userLoginFailureHandler) // 配置登录失败处理类\n                .and().logout().logoutUrl("/logout")// 配置登出地址\n                .logoutSuccessHandler(userLogoutSuccessHandler) // 配置用户登出处理类\n                .and().exceptionHandling().accessDeniedHandler(userAccessDeniedHandler)// 配置没有权限处理类\n                .and().cors()// 开启跨域\n                .and().csrf().disable(); // 禁用跨站请求伪造防护\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); // 禁用session（使用Token认证）\n        http.headers().cacheControl(); // 禁用缓存\n        http.addFilter(new JWTAuthenticationFilter(authenticationManager())); // 添加JWT过滤器\n        http.addFilterBefore(corsFilter, LogoutFilter.class); // 添加CORS filter\n\n    }\n\n\n    /**\n     * 将 AuthenticationManager 注册为 bean , 方便配置 oauth server 的时候使用\n     */\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n}\n\n\n# JWT过滤配置\n\n/**\n * JWT权限过滤器，用于验证Token是否合法\n */\npublic class JWTAuthenticationFilter extends BasicAuthenticationFilter {\n\n    public JWTAuthenticationFilter(AuthenticationManager authenticationManager) {\n        super(authenticationManager);\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n            throws IOException, ServletException {\n        // 取出Token\n        String token = request.getHeader(JWTConfig.tokenHeader);\n        if (token != null) {\n            if (JWTTokenUtil.verifyToken(token)) {\n                ResponseUtils.responseJson(response, Result.fail(SystemErrorType.TOKEN_EXPIRED));\n                return;\n            }\n            String newToken = JWTTokenUtil.verifyExpired(token);\n            if (StringUtils.isNotBlank(newToken)) {\n                response.setHeader("newToken", newToken);\n                response.setHeader("Access-Control-Expose-Headers", "newToken");\n                response.setContentType("application/json;charset=utf-8");\n                response.setCharacterEncoding("UTF-8");\n            }\n            SysUserDetails sysUserDetails = JWTTokenUtil.parseAccessToken(token);\n            if (sysUserDetails != null) {\n                UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(\n                        sysUserDetails, sysUserDetails.getId(), sysUserDetails.getAuthorities());\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n            } else {\n                ResponseUtils.responseJson(response, Result.fail(SystemErrorType.INVALID_TOKEN));\n                return;\n            }\n        }\n        filterChain.doFilter(request, response);\n    }\n\n}\n\n\n# 登录验证\n\n/**\n * 用户登录验证处理类\n */\n@Component\npublic class UserAuthenticationProvider implements AuthenticationProvider {\n\n    @Autowired\n    private SysUserDetailsService userDetailsService;\n\n    /**\n     * 身份验证\n     */\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        String username = (String) authentication.getPrincipal(); // 获取用户名\n        String password = (String) authentication.getCredentials(); // 获取密码\n        SysUserDetails sysUserDetails = (SysUserDetails) userDetailsService.loadUserByUsername(username);\n        if (sysUserDetails == null) {\n            throw new UsernameNotFoundException("用户名不存在");\n        }\n        if (!new BCryptPasswordEncoder().matches(password, sysUserDetails.getPassword())) {\n            throw new BadCredentialsException("用户名或密码错误");\n        }\n        if (StringUtils.equals(sysUserDetails.getStatus(), "0")) {\n            throw new LockedException("用户已禁用");\n        }\n        return new UsernamePasswordAuthenticationToken(sysUserDetails, password, sysUserDetails.getAuthorities());\n    }\n\n    /**\n     * 支持指定的身份验证\n     */\n    @Override\n    public boolean supports(Class<?> authentication) {\n        return true;\n    }\n\n}\n\n\n# 登录逻辑\n\n/**\n * 用户登录Service\n */\n@Service\npublic class SysUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private SysUserService sysUserService;\n\n    /**\n     * 根据用户名查用户信息\n     *\n     * @param username 用户名\n     * @return 用户详细信息\n     */\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        SysUser sysUser = sysUserService.findUserByUserName(username);\n        if (sysUser != null) {\n            SysUserDetails sysUserDetails = new SysUserDetails();\n            BeanUtils.copyProperties(sysUser, sysUserDetails);\n\n            Set<GrantedAuthority> authorities = new HashSet<>(); // 角色集合\n\n            List<SysRole> roleList = sysUserService.findRoleByUserId(sysUserDetails.getId());\n            if (CollectionUtils.isNotEmpty(roleList)) {\n                roleList.forEach(role -> {\n                    authorities.add(new SimpleGrantedAuthority("ROLE_" + role.getRoleCode()));\n                });\n            }\n            sysUserDetails.setAuthorities(authorities);\n\n            return sysUserDetails;\n        }\n        return null;\n    }\n\n}\n\n\n# 权限注解拦截\n\n/**\n * 用户权限注解处理类\n */\n@Component\npublic class UserPermissionProvider implements PermissionEvaluator {\n\n    @Autowired\n    private SysUserService sysUserService;\n\n    /**\n     * 判断是否拥有权限\n     *\n     * @param authentication 用户身份\n     * @param targetUrl      目标路径\n     * @param permission     路径权限\n     * @return 是否拥有权限\n     */\n    @Override\n    public boolean hasPermission(Authentication authentication, Object targetUrl, Object permission) {\n        SysUserDetails sysUserDetails = null;\n        try {\n            sysUserDetails = (SysUserDetails) authentication.getPrincipal();\n        } catch (Exception e) {\n            return false;\n        }\n\n        /**\n        * 白名单允许访问\n        * */\n        String[] matchers = JWTConfig.antMatchers.split(",");\n        List<String> matchersList = Arrays.asList(matchers);\n        if (matchersList.contains(targetUrl)){\n            return true;\n        }\n\n        Set<String> permissions = new HashSet<String>(); // 用户权限\n\n        List<SysResource> authList = sysUserService.findSourceByUserId(sysUserDetails.getId());\n        if (CollectionUtils.isNotEmpty(authList)) {\n            authList.forEach(auth -> {\n                permissions.add(auth.getPermission());\n            });\n        }\n\n        // 判断是否拥有权限\n        if (permissions.contains(permission.toString())) {\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public boolean hasPermission(Authentication authentication, Serializable targetId, String targetType, Object permission) {\n        return false;\n    }\n\n}\n\n\n\n# 工具类\n\n# JWT工具类\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.TypeReference;\nimport com.springboot.system.config.JWTConfig;\nimport com.springboot.system.entity.SysUserDetails;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.ExpiredJwtException;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\n\nimport java.util.*;\n\n/**\n * JWT生产Token工具类\n */\n@Slf4j\npublic class JWTTokenUtil {\n\n    /**\n     * 创建Token\n     *\n     * @param sysUserDetails 用户信息\n     * @return\n     */\n    public static String createAccessToken(SysUserDetails sysUserDetails) {\n        String token = Jwts.builder().setId(// 设置JWT\n                sysUserDetails.getId()) // 用户Id\n                .setSubject(sysUserDetails.getUsername()) // 主题\n                .setIssuedAt(new Date()) // 签发时间\n                .setIssuer("zksc") // 签发者\n                .setExpiration(new Date(System.currentTimeMillis() + JWTConfig.expiration)) // 过期时间\n                .signWith(SignatureAlgorithm.HS512, JWTConfig.secret) // 签名算法、密钥\n                .claim("authorities", JSON.toJSONString(sysUserDetails.getAuthorities())).compact(); // 自定义其他属性，如用户组织机构ID，用户所拥有的角色，用户权限信息等\n        return token;\n    }\n\n    /**\n     * 创建Token\n     *\n     * @param claims claims信息\n     * @return\n     */\n    public static String generateToken(Map<String, Object> claims) {\n        return Jwts.builder()\n                .setClaims(claims)\n                .setExpiration(new Date(System.currentTimeMillis() + JWTConfig.expiration))\n                .signWith(SignatureAlgorithm.HS512, JWTConfig.secret)\n                .compact();\n    }\n\n    /**\n     * 解析Token\n     *\n     * @param token Token信息\n     * @return\n     */\n    public static SysUserDetails parseAccessToken(String token) {\n        SysUserDetails sysUserDetails = null;\n        if (StringUtils.isNotEmpty(token)) {\n            try {\n                // 去除JWT前缀\n                if (token.startsWith(JWTConfig.tokenPrefix)) {\n                    token = token.substring(JWTConfig.tokenPrefix.length());\n                }\n                // 解析Token\n                Claims claims = Jwts.parser().setSigningKey(JWTConfig.secret).parseClaimsJws(token).getBody();\n                // 获取用户信息\n                sysUserDetails = new SysUserDetails();\n                sysUserDetails.setId(claims.getId());\n                sysUserDetails.setUsername(claims.getSubject());\n                // 获取角色\n                Set<GrantedAuthority> authorities = new HashSet<GrantedAuthority>();\n                String authority = claims.get("authorities").toString();\n                if (StringUtils.isNotEmpty(authority)) {\n                    List<Map<String, String>> authorityList = JSON.parseObject(authority,\n                            new TypeReference<List<Map<String, String>>>() {\n                            });\n                    for (Map<String, String> role : authorityList) {\n                        if (!role.isEmpty()) {\n                            authorities.add(new SimpleGrantedAuthority(role.get("authority")));\n                        }\n                    }\n                }\n                sysUserDetails.setAuthorities(authorities);\n            } catch (Exception e1) {\n                log.error("解析Token异常：" + e1.getMessage());\n            }\n        }\n        return sysUserDetails;\n    }\n\n\n    /**\n     * 验证Token是否过期\n     *\n     * @param token Token信息\n     * @return\n     */\n    public static boolean verifyToken(String token) {\n        try {\n            // 去除JWT前缀\n            if (token.startsWith(JWTConfig.tokenPrefix)) {\n                token = token.substring(JWTConfig.tokenPrefix.length());\n            }\n            Jwts.parser().setSigningKey(JWTConfig.secret).parseClaimsJws(token).getBody();\n            return false;\n        } catch (ExpiredJwtException e) {\n            log.debug(e.getMessage());\n            Date expiration = e.getClaims().getExpiration();\n            return expiration.before(new Date());\n        } catch (Exception e1) {\n            log.error(e1.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * 刷新Token\n     *\n     * @param token Token信息\n     * @return 新的token\n     */\n    public static String refreshToken(String token) {\n        try {\n            // 去除JWT前缀\n            if (token.startsWith(JWTConfig.tokenPrefix)) {\n                token = token.substring(JWTConfig.tokenPrefix.length());\n            }\n            Claims claims = Jwts.parser().setSigningKey(JWTConfig.secret).parseClaimsJws(token).getBody();\n            return generateToken(claims);\n        } catch (ExpiredJwtException e) {\n            log.debug(e.getMessage());\n            return generateToken(e.getClaims());\n        } catch (Exception e1) {\n            log.error(e1.getMessage());\n            return e1.getMessage();\n        }\n    }\n\n\n    /**\n     * 过期时间还剩十分钟时刷新Token\n     *\n     * @param token\n     * @return 新的token\n     */\n    public static String verifyExpired(String token) {\n        try {\n            // 去除JWT前缀\n            if (token.startsWith(JWTConfig.tokenPrefix)) {\n                token = token.substring(JWTConfig.tokenPrefix.length());\n            }\n            Claims claims = Jwts.parser().setSigningKey(JWTConfig.secret).parseClaimsJws(token).getBody();\n            long expireTime = claims.getExpiration().getTime();\n            long nowTime = new Date().getTime();\n            if (expireTime - nowTime < 10 * 60 * 1000) {\n                return generateToken(claims);\n            } else {\n                return null;\n            }\n        } catch (Exception e1) {\n            log.error(e1.getMessage());\n            return null;\n        }\n    }\n\n}\n\n\n# Response工具类\n\nimport com.alibaba.fastjson.JSON;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.extern.slf4j.Slf4j;\n\nimport javax.servlet.ServletResponse;\nimport java.io.PrintWriter;\nimport java.time.Instant;\nimport java.time.ZonedDateTime;\n\n@Slf4j\n@Data\n@AllArgsConstructor\npublic class ResponseUtils {\n\n    /**\n     * 返回编码\n     */\n    private String code;\n\n    /**\n     * 返回消息\n     */\n    private String msg;\n\n    /**\n     * 返回数据\n     */\n    private Object data;\n\n    /**\n     * 请求结果生成时间戳\n     */\n    private Instant time;\n\n    /**\n     * Response输出Json格式\n     *\n     * @param response\n     * @param data     返回数据\n     */\n    public static void responseJson(ServletResponse response, Object data) {\n        PrintWriter out = null;\n        try {\n            response.setCharacterEncoding("UTF-8");\n            response.setContentType("application/json");\n            out = response.getWriter();\n            out.println(JSON.toJSONString(data));\n            out.flush();\n        } catch (Exception e) {\n            log.error("Response输出Json异常：" + e);\n        } finally {\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n\n    /**\n     * 返回信息\n     *\n     * @param code 返回编码\n     * @param msg  返回消息\n     * @param data 返回数据\n     * @return\n     */\n    public static ResponseUtils response(String code, String msg, Object data) {\n        return new ResponseUtils(code, msg, data, ZonedDateTime.now().toInstant());\n    }\n}\n\n\n\n# Handler配置\n\n# 无权限\n\n\n/**\n * 无权限处理类\n */\n@Component\npublic class UserAccessDeniedHandler implements AccessDeniedHandler {\n\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) {\n        ResponseUtils.responseJson(response, Result.fail(SystemErrorType.NO_PERMISSION));\n    }\n\n}\n\n\n# 未登录\n\n/**\n * 未登录处理类\n */\n@Component\npublic class UserNotLoginHandler implements AuthenticationEntryPoint {\n\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response,\n                         AuthenticationException authException) {\n        ResponseUtils.responseJson(response, Result.fail(SystemErrorType.NOT_LOGIN));\n    }\n    \n}\n\n\n# 登出\n\n/**\n * 登出成功处理类\n */\n@Component\npublic class UserLogoutSuccessHandler implements LogoutSuccessHandler {\n\n    @Override\n    public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {\n        SecurityContextHolder.clearContext();\n        ResponseUtils.responseJson(response, Result.success(SystemErrorType.LOGOUT_SUCCESS));\n    }\n    \n}\n\n\n\n# 其他配置\n\n# jwt基本配置\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n/**\n * JWT配置基础类\n */\n@Component\n@ConfigurationProperties(prefix = "jwt")\n@SuppressWarnings("static-access")\npublic class JWTConfig {\n\n    /**\n     * 密匙Key\n     */\n    public static String secret;\n\n    /**\n     * HeaderKey\n     */\n    public static String tokenHeader;\n\n    /**\n     * Token前缀\n     */\n    public static String tokenPrefix;\n\n    /**\n     * 过期时间\n     */\n    public static Integer expiration;\n\n    /**\n     * 配置白名单\n     */\n    public static String antMatchers;\n\n    /**\n     * 将过期时间单位换算成毫秒\n     *\n     * @param expiration 过期时间，单位秒\n     */\n    public void setExpiration(Integer expiration) {\n        this.expiration = expiration * 1000;\n    }\n\n    public void setSecret(String secret) {\n        this.secret = secret;\n    }\n\n    public void setTokenHeader(String tokenHeader) {\n        this.tokenHeader = tokenHeader;\n    }\n\n    public void setTokenPrefix(String tokenPrefix) {\n        this.tokenPrefix = tokenPrefix + " ";\n    }\n\n    public void setAntMatchers(String antMatchers) {\n        this.antMatchers = antMatchers;\n    }\n\n}\n\n\n# 跨域配置\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\n@Configuration\npublic class CorsConfig {\n\n    private CorsConfiguration buildConfig() {\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        // 1允许任何域名使用\n        corsConfiguration.addAllowedOrigin("*");\n        // 2允许任何头\n        corsConfiguration.addAllowedHeader("*");\n        // 3允许任何方法（post、get等）\n        corsConfiguration.addAllowedMethod("*");\n\n        corsConfiguration.setAllowCredentials(true);\n        return corsConfiguration;\n    }\n\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration("/**", buildConfig());\n        return new CorsFilter(source);\n    }\n\n}\n\n\n\n# 3.使用\n\n\n# entity层\n\n# 用户\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport com.springboot.system.entity.vo.SysUserVo;\nimport lombok.Data;\nimport org.springframework.beans.BeanUtils;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Set;\n\n@Data\n@TableName("sys_user")\npublic class SysUser {\n\n    @TableId(type = IdType.ID_WORKER_STR)\n    private String id;\n\n    private String number;\n\n    private String username;\n\n    @TableField(exist = false)\n    private String oldPassword;\n\n    private String password;\n\n    private String mobile;\n\n    private String avatar;\n\n    private String type;\n\n    private String status = "1";\n\n    @TableLogic\n    private String deleted = "N";\n\n    @TableField(exist = false)\n    private List roles;\n\n    @TableField(exist = false)\n    private Set<String> roleIds;\n\n    @TableField(value = "created_by", fill = FieldFill.INSERT)\n    private String createdBy;\n    @TableField(value = "created_time", fill = FieldFill.INSERT)\n    private Date createdTime;\n    @TableField(value = "updated_by", fill = FieldFill.INSERT_UPDATE)\n    private String updatedBy;\n    @TableField(value = "updated_time", fill = FieldFill.INSERT_UPDATE)\n    private Date updatedTime;\n\n\n    /**\n     * po转化为vo\n     *\n     * @param clazz\n     * @return\n     */\n    public SysUserVo toParam(Class<SysUserVo> clazz) {\n        SysUserVo t = BeanUtils.instantiateClass(clazz);\n        BeanUtils.copyProperties(this, t);\n        return t;\n    }\n}\n\n\n# 角色\n\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Set;\n\n@Data\n@TableName("sys_role")\npublic class SysRole {\n\n    @TableId(type = IdType.ID_WORKER_STR)\n    private String id;\n\n    private String roleCode;\n\n    private String roleName;\n\n    private String roleDescription;\n\n    @TableLogic\n    private String deleted = "N";\n\n    @TableField(exist = false)\n    private Set<String> resourcesIds;\n\n    @TableField(exist = false)\n    private List resources;\n\n    @TableField(value = "created_by", fill = FieldFill.INSERT)\n    private String createdBy;\n    @TableField(value = "created_time", fill = FieldFill.INSERT)\n    private Date createdTime;\n    @TableField(value = "updated_by", fill = FieldFill.INSERT_UPDATE)\n    private String updatedBy;\n    @TableField(value = "updated_time", fill = FieldFill.INSERT_UPDATE)\n    private Date updatedTime;\n\n}\n\n\n# 资源\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.Data;\n\nimport java.util.Date;\nimport java.util.List;\n\n@Data\n@TableName("sys_resource")\npublic class SysResource {\n\n    @TableId(type = IdType.ID_WORKER_STR)\n    private String id;\n\n    private String parentId = "0";\n\n    private String title;\n\n    private String name;\n\n    private String url;\n\n    private String permission;\n\n    @TableLogic\n    private String deleted = "N";\n\n    private String menuType;\n\n    private String hidden;\n\n    private String status;\n\n    private String alwaysShow;\n\n    private int orderNumber;\n\n    private String redirect;\n\n    private String icon;\n\n    private String noCache;\n\n    private String affix;\n\n    private String breadcrumb;\n\n    private String component;\n\n    private String activeMenu;\n\n    private String remark;\n\n    @TableField(exist = false)\n    private List<SysResource> children;\n\n    @TableField(value = "created_by", fill = FieldFill.INSERT)\n    private String createdBy;\n    @TableField(value = "created_time", fill = FieldFill.INSERT)\n    private Date createdTime;\n    @TableField(value = "updated_by", fill = FieldFill.INSERT_UPDATE)\n    private String updatedBy;\n    @TableField(value = "updated_time", fill = FieldFill.INSERT_UPDATE)\n    private Date updatedTime;\n\n}\n\n\n# 用户角色关联\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.Date;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName("sys_user_role")\npublic class SysUserRole {\n\n    @TableId(type = IdType.ID_WORKER_STR)\n    private String id;\n\n    private String userId;\n\n    private String roleId;\n\n    @TableLogic\n    private String deleted = "N";\n\n    @TableField(value = "created_by", fill = FieldFill.INSERT)\n    private String createdBy;\n    @TableField(value = "created_time", fill = FieldFill.INSERT)\n    private Date createdTime;\n    @TableField(value = "updated_by", fill = FieldFill.INSERT_UPDATE)\n    private String updatedBy;\n    @TableField(value = "updated_time", fill = FieldFill.INSERT_UPDATE)\n    private Date updatedTime;\n\n}\n\n\n# 角色资源关联\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\nimport java.util.Date;\n\n@Data\n@AllArgsConstructor\n@TableName("sys_role_resource")\npublic class SysRoleResource {\n\n    @TableId(type = IdType.ID_WORKER_STR)\n    private String id;\n\n    /**\n     * 角色ID\n     */\n    private String roleId;\n\n    /**\n     * 权限ID\n     */\n    private String resourceId;\n\n    @TableLogic\n    private String deleted = "N";\n\n    @TableField(value = "created_by", fill = FieldFill.INSERT)\n    private String createdBy;\n    @TableField(value = "created_time", fill = FieldFill.INSERT)\n    private Date createdTime;\n    @TableField(value = "updated_by", fill = FieldFill.INSERT_UPDATE)\n    private String updatedBy;\n    @TableField(value = "updated_time", fill = FieldFill.INSERT_UPDATE)\n    private Date updatedTime;\n\n}\n\n\n# 登录\n\nimport com.springboot.system.entity.po.SysUser;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.io.Serializable;\nimport java.util.Collection;\n\n/**\n * 系统用户详情\n */\n@Data\n@EqualsAndHashCode(callSuper = false)\npublic class SysUserDetails extends SysUser implements UserDetails, Serializable {\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * 用户角色\n     */\n    private Collection<GrantedAuthority> authorities;\n\n    /**\n     * 账号是否过期\n     */\n    private boolean isAccountNonExpired = false;\n\n    /**\n     * 账号是否锁定\n     */\n    private boolean isAccountNonLocked = false;\n\n    /**\n     * 证书是否过期\n     */\n    private boolean isCredentialsNonExpired = false;\n\n    /**\n     * 账号是否有效\n     */\n    private boolean isEnabled = true;\n\n    /**\n     * 获得用户权限\n     */\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return authorities;\n    }\n\n    /**\n     * 判断账号是否过期\n     */\n    @Override\n    public boolean isAccountNonExpired() {\n        return isAccountNonExpired;\n    }\n\n    /**\n     * 判断账号是否锁定\n     */\n    @Override\n    public boolean isAccountNonLocked() {\n        return isAccountNonLocked;\n    }\n\n    /**\n     * 判断证书是否过期\n     */\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return isCredentialsNonExpired;\n    }\n\n    /**\n     * 判断账号是否有效\n     */\n    @Override\n    public boolean isEnabled() {\n        return isEnabled;\n    }\n\n}\n\n\n\n# mapper层\n\n# 用户\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.springboot.system.entity.po.SysUser;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\n@Mapper\n@Repository\npublic interface SysUserMapper extends BaseMapper<SysUser> {\n\n}\n\n\n# 角色\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.springboot.system.entity.po.SysRole;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\n@Repository\n@Mapper\npublic interface SysRoleMapper extends BaseMapper<SysRole> {\n}\n\n\n# 资源\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.springboot.system.entity.po.SysResource;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\n@Repository\n@Mapper\npublic interface SysResourceMapper extends BaseMapper<SysResource> {\n\n}\n\n\n# 用户角色关联\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.springboot.system.entity.po.SysRole;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\n@Repository\n@Mapper\npublic interface SysRoleMapper extends BaseMapper<SysRole> {\n}\n\n\n# 角色资源关联\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.springboot.system.entity.po.SysRoleResource;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.stereotype.Repository;\n\n@Repository\n@Mapper\npublic interface SysRoleResourceMapper extends BaseMapper<SysRoleResource> {\n}\n\n\n\n# Iservice层\n\n# 用户\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.springboot.common.core.entity.vo.Result;\nimport com.springboot.system.entity.form.SysUserQueryForm;\nimport com.springboot.system.entity.po.SysResource;\nimport com.springboot.system.entity.po.SysRole;\nimport com.springboot.system.entity.po.SysUser;\nimport com.springboot.system.entity.vo.SysUserVo;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.Serializable;\nimport java.util.List;\n\npublic interface SysUserService {\n\n    SysUser getById(Serializable id);\n\n    /**\n     * 根据用户名称查询用户信息\n     *\n     * @param username 用户名称\n     * @return\n     */\n    SysUser findUserByUserName(String username);\n\n    /**\n     * 根据用户ID查询角色\n     *\n     * @param userId 用户ID\n     * @return\n     */\n    List<SysRole> findRoleByUserId(String userId);\n\n    /**\n     * 根据用户ID查询权限\n     *\n     * @param userId 用户ID\n     * @return\n     */\n    List<SysResource> findSourceByUserId(String userId);\n\n\n    /**\n     * 根据token查询用户信息\n     *\n     * @param token\n     * @return\n     */\n    Result findUserByToken(String token);\n\n    /**\n     * 添加用户\n     *\n     * @param sysUser\n     * @return\n     */\n    Result add(SysUser sysUser);\n\n    /**\n     * 更新用户信息\n     *\n     * @param sysUser\n     */\n    Result update(SysUser sysUser);\n\n\n    /**\n     * 更改头像\n     *\n     * @param id 用户id\n     * @param avatar 头像\n     */\n    Result updateAvatar(String id,String avatar);\n\n    /**\n     * 根据id删除用户\n     *\n     * @param id\n     */\n    boolean delete(String id);\n\n    /**\n     * 获取用户\n     *\n     * @param id 用户id\n     * @return SysUser\n     */\n    SysUser get(String id);\n\n\n    /**\n     * 查询用户\n     *\n     * @return\n     */\n    IPage<SysUser> query(Page<SysUser> page, SysUserQueryForm sysUserQueryForm);\n\n    /**\n     * 导出用户\n     *\n     * @return\n     */\n    void exportExcel(HttpServletResponse response);\n\n\n    /**\n     * 根据角色查询用户\n     *\n     * @return\n     */\n    Result getUserByRoleId(String roleId);\n\n}\n\n\n# 角色\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.springboot.common.core.entity.vo.Result;\nimport com.springboot.system.entity.form.SysRoleQueryForm;\nimport com.springboot.system.entity.po.SysRole;\n\nimport java.io.Serializable;\nimport java.util.List;\n\npublic interface SysRoleService {\n    SysRole getById(Serializable id);\n\n    List<SysRole> getRoleByUserId(String userId);\n\n    List<SysRole> getRoleList();\n\n    Result add(SysRole sysRole);\n\n    Result update(SysRole sysRole);\n\n    Result delete(String id);\n\n    SysRole get(String id);\n\n    IPage<SysRole> query(Page<SysRole> page, SysRoleQueryForm sysRoleQueryForm);\n\n}\n\n\n# 资源\n\nimport com.springboot.common.core.entity.vo.Result;\nimport com.springboot.system.entity.po.SysResource;\n\nimport java.io.Serializable;\nimport java.util.List;\n\npublic interface SysResourceService {\n\n    List<SysResource> getResourceByRoleId(String roleId);\n\n    List<SysResource> getResourceByRoleId(String roleId, String menuType);\n\n    boolean save(SysResource sysResource);\n\n    boolean updateById(SysResource sysResource);\n\n    boolean removeById(Serializable id);\n\n    Result delete(String id);\n\n    SysResource getById(Serializable id);\n\n    List<SysResource> getList();\n\n    List<SysResource> getByUserId(String userId, String menuType);\n\n}\n\n\n# 用户角色关联\n\nimport java.util.List;\nimport java.util.Set;\n\npublic interface SysUserRoleService {\n\n    /**\n     * 用户Id查询角色Ids\n     *\n     * @param userId\n     * @return\n     */\n    List<String> getRoleIdsByUserId(String userId);\n\n\n    /**\n     * 给用户添加角色\n     *\n     * @param userId\n     * @param roleIds\n     * @return\n     */\n    boolean saveBatch(String userId, Set<String> roleIds);\n\n    /**\n     * 删除用户拥有的角色\n     *\n     * @param userId\n     * @return\n     */\n    boolean removeByUserId(String userId);\n\n    /**\n     * 角色id查询用户ids\n     *\n     * @param roleId 角色id\n     * @return\n     */\n    List<String> getUserIdsByRoleId(String roleId);\n\n}\n\n\n# 角色资源关联\n\nimport java.util.List;\nimport java.util.Set;\n\npublic interface SysRoleResourceService {\n\n\n    /**\n     * 根据角色id查询资源列表id\n     *\n     * @param roleId      角色id\n     * @return 资源列表id\n     */\n    List<String> getResourceIdsByRoleId(String roleId);\n\n    /**\n     * 批量给角色添加资源\n     *\n     * @param roleId      角色id\n     * @param resourceIds 资源id列表\n     * @return 是否操作成功\n     */\n    boolean saveBatch(String roleId, Set<String> resourceIds);\n\n\n    /**\n     * 删除角色拥有的资源\n     *\n     * @param roleId 角色id\n     * @return 是否操作成功\n     */\n    boolean removeByRoleId(String roleId);\n\n\n}\n\n\n\n# service层\n\n# 用户\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.springboot.common.core.entity.vo.Result;\nimport com.springboot.common.core.exception.SystemErrorType;\nimport com.springboot.common.core.util.ConfigKeyEnum;\nimport com.springboot.common.core.util.ExcelUtil;\nimport com.springboot.system.dao.SysUserMapper;\nimport com.springboot.system.entity.SysUserDetails;\nimport com.springboot.system.entity.form.SysUserQueryForm;\nimport com.springboot.system.entity.po.SysResource;\nimport com.springboot.system.entity.po.SysRole;\nimport com.springboot.system.entity.po.SysUser;\nimport com.springboot.system.entity.vo.SysUserVo;\nimport com.springboot.system.service.SysResourceService;\nimport com.springboot.system.service.SysRoleService;\nimport com.springboot.system.service.SysUserRoleService;\nimport com.springboot.system.service.SysUserService;\nimport com.springboot.system.util.JWTTokenUtil;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.*;\n\n\n@Service\npublic class SysUserServiceImpl extends ServiceImpl<SysUserMapper, SysUser> implements SysUserService {\n\n\n    @Autowired\n    SysUserMapper userMapper;\n\n    @Autowired\n    SysRoleService roleService;\n\n    @Autowired\n    SysUserRoleService userRoleService;\n\n    @Autowired\n    SysResourceService resourceService;\n\n    @Autowired\n    BCryptPasswordEncoder passwordEncoder;\n\n    @Autowired\n    SysConfigService configService;\n\n    /**\n     * 根据用户名称查询用户信息\n     *\n     * @param username 用户名称\n     * @return\n     */\n    @Override\n    public SysUser findUserByUserName(String username) {\n        return this.getOne(new QueryWrapper<SysUser>().apply("binary username = {0}", username));\n    }\n\n    /**\n     * 根据用户ID查询角色\n     *\n     * @param userId 用户ID\n     * @return\n     */\n    @Override\n    public List<SysRole> findRoleByUserId(String userId) {\n        return roleService.getRoleByUserId(userId);\n    }\n\n    /**\n     * 根据用户ID查询权限\n     *\n     * @param userId 用户ID\n     * @return\n     */\n    @Override\n    public List<SysResource> findSourceByUserId(String userId) {\n        List<SysRole> roleList = roleService.getRoleByUserId(userId);\n        if (CollectionUtils.isEmpty(roleList)) {\n            return null;\n        }\n        Set<SysResource> sysResources = new HashSet<>();\n        for (SysRole sysRole : roleList) {\n            List<SysResource> resourceList = resourceService.getResourceByRoleId(sysRole.getId(), "R");\n            if (CollectionUtils.isNotEmpty(resourceList)) {\n                sysResources.addAll(resourceList);\n            }\n        }\n        ArrayList<SysResource> list = new ArrayList<>();\n        list.addAll(sysResources);\n        if (CollectionUtils.isEmpty(list)) {\n            return null;\n        }\n        return list;\n    }\n\n    /**\n     * 根据token查询用户信息\n     *\n     * @param token\n     * @return\n     */\n    @Override\n    public Result findUserByToken(String token) {\n        SysUserDetails sysUserDetails = JWTTokenUtil.parseAccessToken(token);\n        if (sysUserDetails == null) {\n            return Result.fail(SystemErrorType.TOKEN_EXPIRED);\n        }\n        SysUser user = this.getById(sysUserDetails.getId());\n        ArrayList<String> list = new ArrayList<>();\n        List<SysRole> roleList = roleService.getRoleByUserId(sysUserDetails.getId());\n        for (SysRole sysRole : roleList) {\n            list.add(sysRole.getRoleCode());\n        }\n        user.setRoles(list);\n        return Result.success(user.toParam(SysUserVo.class));\n    }\n\n    @Override\n    public Result add(SysUser sysUser) {\n        SysUser user = this.findUserByUserName(sysUser.getUsername());\n        if (user != null) {\n            return Result.fail("用户已存在！");\n        }\n        if (StringUtils.isBlank(sysUser.getPassword())) {\n            return Result.fail("请输入密码！");\n        }\n        sysUser.setPassword(passwordEncoder.encode(sysUser.getPassword()));\n        this.save(sysUser);\n        userRoleService.saveBatch(sysUser.getId(), sysUser.getRoleIds());\n        return Result.success();\n    }\n\n\n    @Override\n    @Transactional\n    public Result update(SysUser sysUser) {\n        if (StringUtils.isNotBlank(sysUser.getOldPassword())) {\n            SysUser user = this.getById(sysUser.getId());\n            boolean matches = passwordEncoder.matches(sysUser.getOldPassword(), user.getPassword());\n            if (!matches) {\n                return Result.fail("旧密码错误！");\n            }\n            if (StringUtils.isNotBlank(sysUser.getPassword())) {\n                sysUser.setPassword(passwordEncoder.encode(sysUser.getPassword()));\n            }\n        }\n        if (StringUtils.isNotBlank(sysUser.getAvatar())) {\n            String nginx = configService.getStrValue(ConfigKeyEnum.NGINX_PIC_PATH.getConfigKey());\n            if (sysUser.getAvatar().startsWith(nginx)) {\n                sysUser.setAvatar(sysUser.getAvatar().substring(nginx.length()));\n            }\n        }\n        if (StringUtils.isBlank(sysUser.getPassword())) {\n            SysUser user = this.getById(sysUser.getId());\n            sysUser.setPassword(user.getPassword());\n        }\n        this.updateById(sysUser);\n        userRoleService.saveBatch(sysUser.getId(), sysUser.getRoleIds());\n        return Result.success();\n    }\n\n    @Override\n    public Result updateAvatar(String id, String avatar) {\n        SysUser sysUser = this.getById(id);\n        if (StringUtils.isNotBlank(avatar)) {\n            String nginx = configService.getStrValue(ConfigKeyEnum.NGINX_PIC_PATH.getConfigKey());\n            if (avatar.startsWith(nginx)) {\n                avatar = avatar.substring(nginx.length());\n            }\n        }\n        sysUser.setAvatar(avatar);\n        this.updateById(sysUser);\n        return Result.success();\n    }\n\n    @Override\n    @Transactional\n    public boolean delete(String id) {\n        this.removeById(id);\n        return userRoleService.removeByUserId(id);\n    }\n\n    @Override\n    public SysUser get(String id) {\n        SysUser sysUser = this.getById(id);\n        if (Objects.isNull(sysUser)) {\n            return null;\n        }\n        if (StringUtils.isNotBlank(sysUser.getAvatar())) {\n            String nginx = configService.getStrValue(ConfigKeyEnum.NGINX_PIC_PATH.getConfigKey());\n            StringBuilder stringBuilder = new StringBuilder(nginx);\n            stringBuilder.append(sysUser.getAvatar());\n            sysUser.setAvatar(stringBuilder.toString());\n        }\n        List<SysRole> roleList = roleService.getRoleByUserId(sysUser.getId());\n        sysUser.setRoles(roleList);\n        return sysUser;\n    }\n\n    @Override\n    public IPage<SysUser> query(Page<SysUser> page, SysUserQueryForm sysUserQueryForm) {\n        QueryWrapper<SysUser> queryWrapper = new QueryWrapper<>();\n        if (StringUtils.isNotBlank(sysUserQueryForm.getNumber())) {\n            queryWrapper.lambda().like(SysUser::getNumber, sysUserQueryForm.getNumber());\n        }\n        if (StringUtils.isNotBlank(sysUserQueryForm.getUsername())) {\n//            queryWrapper.apply("binary username = {0}", sysUserQueryForm.getUsername());\n            queryWrapper.lambda().like(SysUser::getUsername, sysUserQueryForm.getUsername());\n        }\n        if (StringUtils.isNotBlank(sysUserQueryForm.getType())) {\n            queryWrapper.lambda().like(SysUser::getType, sysUserQueryForm.getType());\n        }\n        if (sysUserQueryForm.getCreatedTimeStart() != null && sysUserQueryForm.getCreatedTimeEnd() != null) {\n            queryWrapper.lambda().between(SysUser::getCreatedTime, sysUserQueryForm.getCreatedTimeStart(), sysUserQueryForm.getCreatedTimeEnd());\n        }\n        IPage userPage = this.page(page, queryWrapper);\n        ArrayList<SysUserVo> list = new ArrayList<>();\n        List<SysUser> records = userPage.getRecords();\n        for (SysUser user : records) {\n            user.setRoles(roleService.getRoleByUserId(user.getId()));\n            list.add(user.toParam(SysUserVo.class));\n        }\n        userPage.setRecords(list);\n        return userPage;\n    }\n\n    @Override\n    public void exportExcel(HttpServletResponse response) {\n        List<SysUser> list = this.list();\n        ArrayList<SysUserVo> userVoList = new ArrayList<>();\n        for (SysUser user : list) {\n            //user.setRoles(roleService.getRoleByUserId(user.getId()));\n            userVoList.add(user.toParam(SysUserVo.class));\n        }\n        ExcelUtil.exportExcel(userVoList, "用户列表", "sheet", SysUserVo.class, "用户列表.xls", response);\n    }\n\n    @Override\n    public Result getUserByRoleId(String roleId) {\n        List<String> userIds = userRoleService.getUserIdsByRoleId(roleId);\n        if (userIds == null || userIds.isEmpty()) {\n            return Result.success(new ArrayList<>());\n        }\n        Collection<SysUser> sysUsers = this.listByIds(userIds);\n        ArrayList list = new ArrayList<>();\n        sysUsers.forEach(sysUser -> {\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put("id", sysUser.getId());\n            jsonObject.put("username", sysUser.getUsername());\n            list.add(jsonObject);\n        });\n        return Result.success(list);\n    }\n}\n\n\n# 角色\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.springboot.admin.entity.po.DailyReminder;\nimport com.springboot.admin.service.impl.DailyReminderService;\nimport com.springboot.common.core.entity.vo.Result;\nimport com.springboot.quartz.service.SysJobService;\nimport com.springboot.system.dao.SysRoleMapper;\nimport com.springboot.system.entity.form.SysRoleQueryForm;\nimport com.springboot.system.entity.po.SysResource;\nimport com.springboot.system.entity.po.SysRole;\nimport com.springboot.system.service.SysResourceService;\nimport com.springboot.system.service.SysRoleResourceService;\nimport com.springboot.system.service.SysRoleService;\nimport com.springboot.system.service.SysUserRoleService;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\n@Service\npublic class SysRoleServiceImpl extends ServiceImpl<SysRoleMapper, SysRole> implements SysRoleService {\n\n\n    @Autowired\n    SysUserRoleService userRoleService;\n\n    @Autowired\n    SysRoleResourceService roleResourceService;\n\n    @Autowired\n    SysResourceService resourceService;\n\n    @Autowired\n    DailyReminderService dailyReminderService;\n\n    /**\n     * 根据用户ID查询角色\n     *\n     * @param userId 用户ID\n     * @return\n     */\n    public List<SysRole> getRoleByUserId(String userId) {\n        List<String> roleIds = userRoleService.getRoleIdsByUserId(userId);\n        if (roleIds.isEmpty()) {\n            return new ArrayList<>();\n        }\n        return (List<SysRole>) this.listByIds(roleIds);\n    }\n\n    /**\n     * 查询角色列表\n     */\n    @Override\n    public List<SysRole> getRoleList() {\n        return this.list();\n    }\n\n    /**\n     * 添加角色\n     *\n     * @param sysRole\n     * @return Result\n     */\n    @Override\n    @Transactional\n    public Result add(SysRole sysRole) {\n        SysRole role = this.getOne(new QueryWrapper<SysRole>().lambda().eq(SysRole::getRoleCode, sysRole.getRoleCode()));\n        if (role != null) {\n            return Result.fail("已经存在该角色");\n        }\n        this.save(sysRole);\n        roleResourceService.saveBatch(sysRole.getId(), sysRole.getResourcesIds());\n        return Result.success();\n    }\n\n    /**\n     * 修改角色\n     *\n     * @param sysRole\n     * @return Result\n     */\n    @Override\n    @Transactional\n    public Result update(SysRole sysRole) {\n        SysRole sysRoleData = this.getById(sysRole.getId());\n        List<DailyReminder> listByRole = dailyReminderService.getListByRole(sysRoleData.getRoleCode());\n        //修改每日待办事件里的角色\n        if (listByRole.size() != 0 && !sysRole.getRoleCode().equals(sysRoleData.getRoleCode())){\n            listByRole.forEach(dailyReminder -> {\n                dailyReminder.setRole(sysRole.getRoleCode());\n                dailyReminderService.update(dailyReminder);\n            });\n        }\n        this.updateById(sysRole);\n        if (CollectionUtils.isNotEmpty(sysRole.getResourcesIds())) {\n            roleResourceService.saveBatch(sysRole.getId(), sysRole.getResourcesIds());\n        }\n        return Result.success();\n    }\n\n    /**\n     * 删除角色\n     *\n     * @param id\n     * @return Result\n     */\n    @Override\n    public Result delete(String id) {\n        SysRole sysRoleData = this.getById(id);\n        List<DailyReminder> listByRole = dailyReminderService.getListByRole(sysRoleData.getRoleCode());\n        if (listByRole.size() != 0){\n            return Result.fail("每日待办事件里存在该角色，请先删除每日待办事件里的角色！");\n        }\n        this.removeById(id);\n        roleResourceService.removeByRoleId(id);\n        return Result.success();\n    }\n\n    /**\n     * 根据id获取角色\n     *\n     * @param id\n     * @return SysRole\n     */\n    @Override\n    public SysRole get(String id) {\n        SysRole sysRole = this.getById(id);\n        ArrayList<SysResource> list = new ArrayList<>();\n        List<String> resourceIds = roleResourceService.getResourceIdsByRoleId(id);\n        HashSet<String> set = new HashSet<>();\n        set.addAll(resourceIds);\n        sysRole.setResourcesIds(set);\n        return sysRole;\n    }\n\n    @Override\n    public IPage<SysRole> query(Page<SysRole> page, SysRoleQueryForm sysRoleQueryForm) {\n        LambdaQueryWrapper<SysRole> queryWrapper = new QueryWrapper<SysRole>().lambda();\n        if (StringUtils.isNotBlank(sysRoleQueryForm.getRoleName())) {\n            queryWrapper.like(SysRole::getRoleName, sysRoleQueryForm.getRoleName());\n        }\n        return this.page(page, queryWrapper);\n    }\n}\n\n\n# 资源\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.springboot.common.core.entity.vo.Result;\nimport com.springboot.system.dao.SysResourceMapper;\nimport com.springboot.system.entity.po.SysResource;\nimport com.springboot.system.entity.po.SysRole;\nimport com.springboot.system.service.SysResourceService;\nimport com.springboot.system.service.SysRoleResourceService;\nimport com.springboot.system.service.SysRoleService;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport static java.util.Comparator.comparing;\n\n@Service\npublic class SysResourceServiceImpl extends ServiceImpl<SysResourceMapper, SysResource> implements SysResourceService {\n\n\n    @Autowired\n    SysRoleService roleService;\n\n    @Autowired\n    SysRoleResourceService roleResourceService;\n\n\n    /**\n     * 根据角色ID查询资源\n     *\n     * @param roleId 用角色ID\n     * @return\n     */\n    public List<SysResource> getResourceByRoleId(String roleId) {\n        List<String> resourceIds = roleResourceService.getResourceIdsByRoleId(roleId);\n        if (CollectionUtils.isEmpty(resourceIds)) {\n            return null;\n        }\n        return (List<SysResource>) this.listByIds(resourceIds);\n    }\n\n\n    /**\n     * 根据角色ID查询后端资源\n     *\n     * @param roleId 用角色ID\n     * @return\n     */\n    public List<SysResource> getResourceByRoleId(String roleId, String menuType) {\n        List<String> resourceIds = roleResourceService.getResourceIdsByRoleId(roleId);\n        if (CollectionUtils.isEmpty(resourceIds)) {\n            return null;\n        }\n        ArrayList<SysResource> list = new ArrayList<>();\n        Collection<SysResource> sysResources = this.listByIds(resourceIds);\n        sysResources.forEach(sysResource -> {\n            if (StringUtils.isNotBlank(sysResource.getPermission()) || StringUtils.equals(menuType, sysResource.getMenuType())) {\n                list.add(sysResource);\n            }\n        });\n        return list;\n    }\n\n    /**\n     * 根据ID删除资源\n     *\n     * @param id 资源ID\n     * @return\n     */\n    @Override\n    public Result delete(String id) {\n        List<SysResource> list = this.list(new QueryWrapper<SysResource>().lambda().eq(SysResource::getParentId, id));\n        if (CollectionUtils.isNotEmpty(list)) {\n            return Result.fail("存在下级菜单，不允许删除！");\n        }\n        this.removeById(id);\n        return Result.success();\n    }\n\n\n    /**\n     * 获取资源列表\n     * 通过树的形式返回\n     */\n    @Override\n    public List<SysResource> getList() {\n        List<SysResource> resourceList = this.list();\n        if (CollectionUtils.isEmpty(resourceList)) {\n            return null;\n        }\n        //拿到顶级菜单\n        ArrayList<SysResource> list = new ArrayList<>();\n        for (SysResource sysResource : resourceList) {\n            if (StringUtils.equals(sysResource.getParentId(), "0")) {\n                list.add(sysResource);\n            }\n        }\n        list.sort(comparing(SysResource::getOrderNumber));\n        //循环顶级菜单设置子菜单\n        for (SysResource sysResource : list) {\n            sysResource.setChildren(getResourceChildren(sysResource.getId(), resourceList));\n        }\n        return list;\n    }\n\n    /**\n     * 根据用户ID查询资源\n     *\n     * @param userId   用户id\n     * @param menuType 菜单类型\n     * @return: 资源列表\n     */\n    @Override\n    public List<SysResource> getByUserId(String userId, String menuType) {\n        List<SysRole> roleList = roleService.getRoleByUserId(userId);\n        if (CollectionUtils.isEmpty(roleList)) {\n            return null;\n        }\n        HashSet<String> set = new HashSet<>();\n        roleList.forEach(sysRole -> {\n            List<String> resourceIds = roleResourceService.getResourceIdsByRoleId(sysRole.getId());\n            set.addAll(resourceIds);\n        });\n        if (CollectionUtils.isEmpty(set)) {\n            return new ArrayList<>();\n        }\n        List<SysResource> resourceList = this.list(new QueryWrapper<SysResource>().lambda().eq(SysResource::getMenuType, menuType).in(SysResource::getId, set));\n        //拿到顶级菜单\n        ArrayList<SysResource> list = new ArrayList<>();\n        for (SysResource sysResource : resourceList) {\n            if (StringUtils.equals(sysResource.getParentId(), "0")) {\n                list.add(sysResource);\n            }\n        }\n        list.sort(comparing(SysResource::getOrderNumber));\n        //循环顶级菜单设置子菜单\n        for (SysResource sysResource : list) {\n            sysResource.setChildren(getResourceChildren(sysResource.getId(), resourceList));\n        }\n        return list;\n    }\n\n    /**\n     * 递归查询资源\n     *\n     * @param list 顶级资源列表\n     * @return: 资源列表\n     */\n    private List<SysResource> getResourceChildren(String id, List<SysResource> list) {\n        List<SysResource> childrenList = new ArrayList<>();\n        if (CollectionUtils.isEmpty(list)) {\n            return null;\n        }\n        for (SysResource sysResource : list) {\n            if (StringUtils.equals(sysResource.getParentId(), id)) {\n                childrenList.add(sysResource);\n            }\n        }\n        for (SysResource sysResource : childrenList) {\n            sysResource.setChildren(getResourceChildren(sysResource.getId(), list));\n        }\n        childrenList.sort(comparing(SysResource::getOrderNumber));\n        return childrenList;\n    }\n\n}\n\n\n# 用户角色关联\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.springboot.system.dao.SysUserRoleMapper;\nimport com.springboot.system.entity.po.SysUserRole;\nimport com.springboot.system.service.SysUserRoleService;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Service\npublic class SysUserRoleServiceImpl extends ServiceImpl<SysUserRoleMapper, SysUserRole> implements SysUserRoleService {\n\n\n    /**\n     * 根据用户ID查询角色ids\n     *\n     * @param userId 用户ID\n     * @return\n     */\n    @Override\n    public List<String> getRoleIdsByUserId(String userId) {\n        List<SysUserRole> sysUserRoles = this.list(new QueryWrapper<SysUserRole>().lambda().eq(SysUserRole::getUserId, userId));\n        if (sysUserRoles.isEmpty()) {\n            return new ArrayList<>();\n        }\n        ArrayList<String> list = new ArrayList<>();\n        for (SysUserRole sysUserRole : sysUserRoles) {\n            list.add(sysUserRole.getRoleId());\n        }\n        return list;\n    }\n\n\n    @Override\n    @Transactional\n    public boolean saveBatch(String userId, Set<String> roleIds) {\n        if (CollectionUtils.isEmpty(roleIds)) {\n            return false;\n        }\n        removeByUserId(userId);\n        Set<SysUserRole> userRoles = roleIds.stream().map(roleId -> new SysUserRole(null, userId, roleId, "N", null, null, null, null)).collect(Collectors.toSet());\n        return saveBatch(userRoles);\n    }\n\n    @Override\n    @Transactional\n    public boolean removeByUserId(String userId) {\n        return remove(new QueryWrapper<SysUserRole>().lambda().eq(SysUserRole::getUserId, userId));\n    }\n\n    @Override\n    public List<String> getUserIdsByRoleId(String roleId) {\n        List<SysUserRole> sysUserRoles = this.list(new QueryWrapper<SysUserRole>().lambda().eq(SysUserRole::getRoleId, roleId));\n        if (sysUserRoles.isEmpty()) {\n            return new ArrayList<>();\n        }\n        ArrayList<String> list = new ArrayList<>();\n        for (SysUserRole sysUserRole : sysUserRoles) {\n            list.add(sysUserRole.getUserId());\n        }\n        return list;\n    }\n\n}\n\n\n# 角色资源关联\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.springboot.system.dao.SysRoleResourceMapper;\nimport com.springboot.system.entity.po.SysRoleResource;\nimport com.springboot.system.service.SysRoleResourceService;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Service\npublic class SysRoleResourceServiceImpl extends ServiceImpl<SysRoleResourceMapper, SysRoleResource> implements SysRoleResourceService {\n\n\n    /**\n     * 根据角色ID查询资源ids\n     *\n     * @param roleId 用角色ID\n     * @return\n     */\n    @Override\n    public List<String> getResourceIdsByRoleId(String roleId) {\n        List<SysRoleResource> sysRoleResources = this.list(new QueryWrapper<SysRoleResource>().lambda().eq(SysRoleResource::getRoleId, roleId));\n        ArrayList<String> list = new ArrayList<>();\n        for (SysRoleResource sysRoleResource : sysRoleResources) {\n            list.add(sysRoleResource.getResourceId());\n        }\n        return list;\n    }\n\n    @Override\n    public boolean saveBatch(String roleId, Set<String> resourceIds) {\n        if (CollectionUtils.isEmpty(resourceIds)) {\n            return false;\n        }\n        this.removeByRoleId(roleId);\n        Set<SysRoleResource> userRoles = resourceIds.stream().map(resourceId -> new SysRoleResource(null, roleId, resourceId, "N", null, null, null, null)).collect(Collectors.toSet());\n        return saveBatch(userRoles);\n    }\n\n\n    public boolean removeByRoleId(String roleId) {\n        QueryWrapper<SysRoleResource> queryWrapper = new QueryWrapper<>();\n        queryWrapper.lambda().eq(SysRoleResource::getRoleId, roleId);\n        return remove(queryWrapper);\n    }\n\n}\n\n\n# 登录\n\nimport com.baomidou.mybatisplus.core.toolkit.CollectionUtils;\nimport com.springboot.system.entity.SysUserDetails;\nimport com.springboot.system.entity.po.SysRole;\nimport com.springboot.system.entity.po.SysUser;\nimport com.springboot.system.service.SysUserService;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * 用户登录Service\n */\n@Service\npublic class SysUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private SysUserService sysUserService;\n\n    /**\n     * 根据用户名查用户信息\n     *\n     * @param username 用户名\n     * @return 用户详细信息\n     */\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        SysUser sysUser = sysUserService.findUserByUserName(username);\n        if (sysUser != null) {\n            SysUserDetails sysUserDetails = new SysUserDetails();\n            BeanUtils.copyProperties(sysUser, sysUserDetails);\n\n            Set<GrantedAuthority> authorities = new HashSet<>(); // 角色集合\n\n            List<SysRole> roleList = sysUserService.findRoleByUserId(sysUserDetails.getId());\n            if (CollectionUtils.isNotEmpty(roleList)) {\n                roleList.forEach(role -> {\n                    authorities.add(new SimpleGrantedAuthority("ROLE_" + role.getRoleCode()));\n                });\n            }\n            sysUserDetails.setAuthorities(authorities);\n\n            return sysUserDetails;\n        }\n        return null;\n    }\n}\n\n\n\n# controller层\n\n# 用户\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.springboot.admin.service.IOutsideAuditSchemeService;\nimport com.springboot.aop.annotation.SysLog;\nimport com.springboot.aop.enums.SysOperateLogEnum;\nimport com.springboot.common.core.entity.vo.Result;\nimport com.springboot.system.entity.form.SysUserQueryForm;\nimport com.springboot.system.entity.po.SysUser;\nimport com.springboot.system.entity.vo.SysUserVo;\nimport com.springboot.system.service.SysUserService;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletResponse;\nimport javax.validation.Valid;\n\n\n@Slf4j\n@RestController\n@RequestMapping("/user")\npublic class SysUserController {\n\n    @Autowired\n    SysUserService userService;\n    @Autowired\n    IOutsideAuditSchemeService outsideAuditSchemeService;\n\n    @ApiOperation(value = "根据token获取用户", notes = "根据token获取用户")\n    @ApiImplicitParam(name = "token", value = "token", required = true, dataType = "String")\n    @PreAuthorize(value = "hasPermission(\'/user/info\',\'sys:user:info\')")\n    @PostMapping("/info")\n    public Result info(@RequestParam("token") String token) {\n        log.debug("get user with token:{}", token);\n        return userService.findUserByToken(token);\n    }\n\n    @ApiOperation(value = "新增用户", notes = "新增一个用户")\n    @ApiImplicitParam(name = "sysUser", value = "新增用户sysUser表单", required = true, dataType = "SysUser")\n    @SysLog(operateModel = "用户管理", operateType = SysOperateLogEnum.INSERT)\n    @PreAuthorize(value = "hasPermission(\'/user/add\',\'sys:user:add\')")\n    @PostMapping("/add")\n    public Result add(@Valid @RequestBody SysUser sysUser) {\n        log.debug("add user with:{}", sysUser);\n        return userService.add(sysUser);\n    }\n\n    @ApiOperation(value = "修改用户", notes = "修改指定用户信息")\n    @ApiImplicitParam(name = "SysUser", value = "用户实体", required = true, dataType = "SysUser")\n    @SysLog(operateModel = "用户管理", operateType = SysOperateLogEnum.UPDATE)\n    @PreAuthorize(value = "hasPermission(\'/user/update\',\'sys:user:update\')")\n    @PutMapping(value = "/update")\n    public Result update(@Valid @RequestBody SysUser sysUser) {\n        log.debug("update user with:{}", sysUser);\n        return userService.update(sysUser);\n    }\n\n    @ApiOperation(value = "修改头像", notes = "修改头像")\n    @SysLog(operateModel = "用户管理", operateType = SysOperateLogEnum.UPDATE)\n    @PreAuthorize(value = "hasPermission(\'/user/updateAvatar\',\'sys:user:updateAvatar\')")\n    @PutMapping(value = "/updateAvatar")\n    public Result updateAvatar(@RequestParam String id,@RequestParam String avatar) {\n        log.debug("update avatar with userId:{}", id);\n        return userService.updateAvatar(id,avatar);\n    }\n\n    @ApiOperation(value = "删除用户", notes = "根据id来指定删除对象，逻辑删除")\n    @SysLog(operateModel = "用户管理", operateType = SysOperateLogEnum.DELETE)\n    @PreAuthorize(value = "hasPermission(\'/user/delete\',\'sys:user:del\')")\n    @DeleteMapping(value = "/delete")\n    public Result delete(@RequestParam String id) {\n        log.debug("delete user for:{}", id);\n        if (outsideAuditSchemeService.checkByUserId(id)) {\n            return Result.fail("该用户id在所外审批方案中被使用，无法删除！");\n        }\n        boolean result = userService.delete(id);\n        if (result) {\n            return Result.success();\n        }\n        return Result.fail();\n    }\n\n    @ApiOperation(value = "获取用户", notes = "获取指定用户信息")\n    @PreAuthorize(value = "hasPermission(\'/user/get\',\'sys:user:get\')")\n    @GetMapping(value = "/get")\n    public Result get(@RequestParam String id) {\n        log.debug("get user with id:{}", id);\n        SysUser user = userService.get(id);\n        SysUserVo sysUserVo = user.toParam(SysUserVo.class);\n        return Result.success(sysUserVo);\n    }\n\n\n    @ApiOperation(value = "搜索用户", notes = "根据条件查询用户信息")\n    @ApiImplicitParam(name = "sysUserQueryForm", value = "用户查询参数", required = true, dataType = "SysUserQueryForm")\n    @PreAuthorize(value = "hasPermission(\'/user/query\',\'sys:user:query\')")\n    @PostMapping(value = "/query")\n    public Result query(@Valid @RequestBody SysUserQueryForm sysUserQueryForm) {\n        log.debug("query with sysUserQueryForm:{}", sysUserQueryForm);\n        IPage<SysUser> userVoIPage = userService.query(sysUserQueryForm.getPage(), sysUserQueryForm);\n        return Result.success(userVoIPage);\n    }\n\n    @ApiOperation(value = "导出用户列表", notes = "导出用户列表")\n    @SysLog(operateModel = "用户管理", operateType = SysOperateLogEnum.EXPORT)\n    @PreAuthorize(value = "hasPermission(\'/user/export\',\'sys:user:export\')")\n    @GetMapping(value = "/export")\n    public void export(HttpServletResponse response) {\n        log.debug("export user list");\n        userService.exportExcel(response);\n    }\n\n\n    @ApiOperation(value = "获取用户", notes = "根据角色获取用户")\n    @PreAuthorize(value = "hasPermission(\'/user/getUserByRoleId\',\'sys:user:getUserByRoleId\')")\n    @GetMapping(value = "/getUserByRoleId")\n    public Result getUserByRole(@RequestParam String roleId) {\n        log.debug("get user roleId:{}", roleId);\n        return userService.getUserByRoleId(roleId);\n    }\n\n}\n\n\n# 角色\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.springboot.aop.annotation.SysLog;\nimport com.springboot.aop.enums.SysOperateLogEnum;\nimport com.springboot.common.core.entity.vo.Result;\nimport com.springboot.admin.service.IOutsideAuditSchemeService;\nimport com.springboot.system.entity.form.SysRoleQueryForm;\nimport com.springboot.system.entity.po.SysRole;\nimport com.springboot.system.entity.po.SysUser;\nimport com.springboot.system.service.SysRoleService;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\n\n@Slf4j\n@RestController\n@RequestMapping("/role")\npublic class SysRoleController {\n\n    @Autowired\n    SysRoleService roleService;\n    @Autowired\n    IOutsideAuditSchemeService outsideAuditSchemeService;\n\n\n    @ApiOperation(value = "新增角色", notes = "新增一个角色")\n    @ApiImplicitParam(name = "SysRole", value = "新增角色SysRole表单", required = true, dataType = "SysRole")\n    @SysLog(operateModel = "角色管理", operateType = SysOperateLogEnum.INSERT)\n    @PreAuthorize(value = "hasPermission(\'/role/add\',\'sys:role:add\')")\n    @PostMapping("/add")\n    public Result add(@Valid @RequestBody SysRole sysRole) {\n        log.debug("add role with:{}", sysRole);\n        return roleService.add(sysRole);\n    }\n\n\n    @ApiOperation(value = "修改角色", notes = "修改指定角色信息")\n    @ApiImplicitParam(name = "SysRole", value = "角色实体", required = true, dataType = "SysRole")\n    @SysLog(operateModel = "角色管理", operateType = SysOperateLogEnum.UPDATE)\n    @PreAuthorize(value = "hasPermission(\'/role/update\',\'sys:role:update\')")\n    @PutMapping(value = "/update")\n    public Result update(@Valid @RequestBody SysRole sysRole) {\n        log.debug("update role with:{}", sysRole);\n        return roleService.update(sysRole);\n    }\n\n    @ApiOperation(value = "删除角色", notes = "根据id来指定删除角色，逻辑删除")\n    @ApiImplicitParam(paramType = "param", name = "id", value = "角色ID", required = true, dataType = "string")\n    @SysLog(operateModel = "角色管理", operateType = SysOperateLogEnum.DELETE)\n    @PreAuthorize(value = "hasPermission(\'/role/delete\',\'sys:role:del\')")\n    @DeleteMapping(value = "/delete")\n    public Result delete(@RequestParam String id) {\n        log.debug("delete role for:{}", id);\n        if(outsideAuditSchemeService.checkByRoleId(id)){\n            return Result.fail("该角色id在所外审批方案中被使用，无法删除！");\n        }\n        return roleService.delete(id);\n    }\n\n    @ApiOperation(value = "获取角色", notes = "获取指定角色信息")\n    @ApiImplicitParam(paramType = "param", name = "id", value = "角色ID", required = true, dataType = "string")\n    @PreAuthorize(value = "hasPermission(\'/role/get\',\'sys:role:get\')")\n    @GetMapping(value = "/get")\n    public Result get(@RequestParam String id) {\n        log.debug("get role with id:{}", id);\n        SysRole sysRole = roleService.get(id);\n        return Result.success(sysRole);\n    }\n\n\n    @ApiOperation(value = "搜索角色", notes = "根据条件查询角色信息")\n    @ApiImplicitParam(name = "SysRoleQueryForm", value = "角色查询参数", required = true, dataType = "SysRoleQueryForm")\n    @PreAuthorize(value = "hasPermission(\'/role/query\',\'sys:role:query\')")\n    @PostMapping(value = "/query")\n    public Result query(@Valid @RequestBody SysRoleQueryForm sysRoleQueryForm) {\n        log.debug("query with sysRoleQueryForm:{}", sysRoleQueryForm);\n        IPage<SysUser> userVoIPage = roleService.query(sysRoleQueryForm.getPage(), sysRoleQueryForm);\n        return Result.success(userVoIPage);\n    }\n\n    @ApiOperation(value = "查询角色列表", notes = "查询角色列表")\n    @PreAuthorize(value = "hasPermission(\'/role/lsit\',\'sys:role:list\')")\n    @GetMapping("/list")\n    public Result list() {\n        return Result.success(roleService.getRoleList());\n    }\n\n}\n\n\n# 资源\n\nimport com.springboot.aop.annotation.SysLog;\nimport com.springboot.aop.enums.SysOperateLogEnum;\nimport com.springboot.common.core.entity.vo.Result;\nimport com.springboot.system.entity.po.SysResource;\nimport com.springboot.system.service.SysResourceService;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.util.List;\n\n@Slf4j\n@RestController\n@RequestMapping("/resource")\npublic class SysResourceController {\n\n    @Autowired\n    SysResourceService resourceService;\n\n\n    @ApiOperation(value = "新增资源", notes = "新增一个资源")\n    @ApiImplicitParam(name = "SysResource", value = "新增资源SysResource表单", required = true, dataType = "SysResource")\n    @SysLog(operateModel = "菜单资源管理", operateType = SysOperateLogEnum.INSERT)\n    @PreAuthorize(value = "hasPermission(\'/resource/add\',\'sys:resource:add\')")\n    @PostMapping("/add")\n    public Result add(@Valid @RequestBody SysResource sysResource) {\n        log.debug("add resource with:{}", sysResource);\n        if (StringUtils.isBlank(sysResource.getParentId())) {\n            sysResource.setParentId("0");\n        }\n        boolean result = resourceService.save(sysResource);\n        if (result) {\n            return Result.success();\n        }\n        return Result.fail();\n    }\n\n    @ApiOperation(value = "修改资源", notes = "修改指定资源信息")\n    @ApiImplicitParam(name = "SysResource", value = "资源实体", required = true, dataType = "SysResource")\n    @SysLog(operateModel = "菜单资源管理", operateType = SysOperateLogEnum.UPDATE)\n    @PreAuthorize(value = "hasPermission(\'/resource/update\',\'sys:resource:update\')")\n    @PutMapping(value = "/update")\n    public Result update(@Valid @RequestBody SysResource sysResource) {\n        log.debug("update resource with:{}", sysResource);\n        boolean result = resourceService.updateById(sysResource);\n        if (result) {\n            return Result.success();\n        }\n        return Result.fail();\n    }\n\n    @ApiOperation(value = "删除资源", notes = "根据id来指定删除对象，逻辑删除")\n    @ApiImplicitParam(paramType = "param", name = "id", value = "资源ID", required = true, dataType = "string")\n    @SysLog(operateModel = "菜单资源管理", operateType = SysOperateLogEnum.DELETE)\n    @PreAuthorize(value = "hasPermission(\'/resource/delete\',\'sys:resource:del\')")\n    @DeleteMapping(value = "/delete")\n    public Result delete(@RequestParam String id) {\n        log.debug("delete resource for:{}", id);\n        return resourceService.delete(id);\n    }\n\n    @ApiOperation(value = "获取资源", notes = "获取指定资源信息")\n    @ApiImplicitParam(paramType = "param", name = "id", value = "资源ID", required = true, dataType = "string")\n    @PreAuthorize(value = "hasPermission(\'/resource/get\',\'sys:resource:get\')")\n    @GetMapping(value = "/get")\n    public Result get(@RequestParam String id) {\n        log.debug("get resource with id:{}", id);\n        SysResource sysResource = resourceService.getById(id);\n        return Result.success(sysResource);\n    }\n\n\n    @ApiOperation(value = "资源列表", notes = "资源列表")\n    @PreAuthorize(value = "hasPermission(\'/resource/list\',\'sys:resource:list\')")\n    @GetMapping(value = "/list")\n    public Result list() {\n        log.debug("query resource list");\n        return Result.success(resourceService.getList());\n    }\n\n\n    @ApiOperation(value = "获取资源", notes = "获取指定资源信息")\n    @PreAuthorize(value = "hasPermission(\'/resource/getByUserId\',\'sys:resource:getByUserId\')")\n    @GetMapping(value = "/getByUserId")\n    public Result getByUserId(@RequestParam String userId, @RequestParam String menuType) {\n        log.debug("get resource with userId:{}", userId);\n        List<SysResource> resourceList = resourceService.getByUserId(userId, menuType);\n        return Result.success(resourceList);\n    }\n\n}\n\n\n# 登录\n\nimport com.springboot.common.core.entity.vo.Result;\nimport com.springboot.system.entity.SysUserDetails;\nimport com.springboot.system.entity.po.SysUser;\nimport com.springboot.system.provider.UserAuthenticationProvider;\nimport com.springboot.system.service.impl.SysUserDetailsService;\nimport com.springboot.system.util.JWTTokenUtil;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.SneakyThrows;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.validation.Valid;\nimport java.util.Base64;\n\n\n@RestController\npublic class LoginController {\n\n    @Autowired\n    private SysUserDetailsService userDetailsService;\n\n    @Autowired\n    private UserAuthenticationProvider authenticationProvider;\n\n    /**\n     * 使用 /login 请求获得 token, /login 不经过拦截器\n     */\n    @SneakyThrows\n    @PostMapping("/login")\n    @ApiOperation(value = "登录接口", notes = "登录接口")\n    public Result login(@Valid @RequestBody SysUser user, HttpServletRequest request) {\n\n        // 密码通过base64解码\n        byte[] decode = Base64.getDecoder().decode(user.getPassword());\n        String password = new String(decode, "UTF-8");\n\n        UserDetails userDetails = userDetailsService.loadUserByUsername(user.getUsername());\n        // 通过 username 和 password 构建一个 Authentication 对象\n        UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(user.getUsername(), password);\n        authenticationProvider.authenticate(authRequest, request);\n        String accessToken = JWTTokenUtil.createAccessToken((SysUserDetails) userDetails);\n        return Result.success(accessToken);\n    }\n\n    @ApiOperation(value = "刷新token接口", notes = "刷新token接口")\n    @PostMapping("/refreshToken")\n    public Result refreshToken(@RequestParam String token) {\n        return Result.success(JWTTokenUtil.refreshToken(token));\n    }\n\n}\n',normalizedContent:'# 1.添加依赖\n\n\x3c!--springsecurity依赖配置--\x3e\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-security</artifactid>\n</dependency>\n\x3c!--jwt(json web token)登录支持--\x3e\n<dependency>\n    <groupid>io.jsonwebtoken</groupid>\n    <artifactid>jjwt</artifactid>\n    <version>0.9.0</version>\n</dependency>\n\x3c!--json--\x3e\n<dependency>\n    <groupid>com.alibaba</groupid>\n    <artifactid>fastjson</artifactid>\n    <version>1.2.59</version>\n</dependency>\n\x3c!--lombok--\x3e\n<dependency>\n    <groupid>org.projectlombok</groupid>\n    <artifactid>lombok</artifactid>\n    <version>1.18.16</version>\n</dependency>\n\n\n\n\n# 2.配置\n\n\n# yml配置\n\nserver:\n  port: 8080\nspring:\n  datasource:\n    url: jdbc:mysql://192.168.3.119:3306/zksc_medical?characterencoding=utf-8&useunicode=true&usessl=false&servertimezone=asia/shanghai\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.cj.jdbc.driver\n\n# jwt配置\njwt:\n   # 密匙key\n   secret: jwtsecret,zksc\n   # headerkey\n   tokenheader: authorization\n   # token前缀\n   tokenprefix: bearer\n   # 过期时间，单位秒\n   expiration: 1800\n   # 配置白名单（不需要认证）\n   antmatchers: /login,/refreshtoken,/webjars/**,/swagger-ui.html,/swagger-resources/**,/*/api-docs,/websocket/**\n\n\n\n# 核心配置\n\n# spring security配置类\n\nimport com.springboot.system.filter.jwtauthenticationfilter;\nimport com.springboot.system.handler.*;\nimport com.springboot.system.provider.userauthenticationprovider;\nimport com.springboot.system.provider.userpermissionprovider;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.security.authentication.authenticationmanager;\nimport org.springframework.security.config.annotation.authentication.builders.authenticationmanagerbuilder;\nimport org.springframework.security.config.annotation.method.configuration.enableglobalmethodsecurity;\nimport org.springframework.security.config.annotation.web.builders.httpsecurity;\nimport org.springframework.security.config.annotation.web.configuration.enablewebsecurity;\nimport org.springframework.security.config.annotation.web.configuration.websecurityconfigureradapter;\nimport org.springframework.security.config.http.sessioncreationpolicy;\nimport org.springframework.security.crypto.bcrypt.bcryptpasswordencoder;\nimport org.springframework.security.web.access.expression.defaultwebsecurityexpressionhandler;\nimport org.springframework.security.web.authentication.logout.logoutfilter;\nimport org.springframework.web.filter.corsfilter;\n\n@configuration\n@enablewebsecurity\n@enableglobalmethodsecurity(prepostenabled = true) // 开启方法权限注解\npublic class syssecurityconfig extends websecurityconfigureradapter {\n\n    /**\n     * 无权限处理类\n     */\n    @autowired\n    private useraccessdeniedhandler useraccessdeniedhandler;\n\n    /**\n     * 用户未登录处理类\n     */\n    @autowired\n    private usernotloginhandler usernotloginhandler;\n\n    /**\n     * 用户登录成功处理类\n     */\n    @autowired\n    private userloginsuccesshandler userloginsuccesshandler;\n\n    /**\n     * 用户登录失败处理类\n     */\n    @autowired\n    private userloginfailurehandler userloginfailurehandler;\n\n    /**\n     * 用户登出成功处理类\n     */\n    @autowired\n    private userlogoutsuccesshandler userlogoutsuccesshandler;\n\n    /**\n     * 跨域过滤器\n     */\n    @autowired\n    private corsfilter corsfilter;\n\n    /**\n     * 用户登录验证\n     */\n    @autowired\n    private userauthenticationprovider userauthenticationprovider;\n\n    /**\n     * 用户权限注解\n     */\n    @autowired\n    private userpermissionprovider userpermissionprovider;\n\n\n    /**\n     * 加密方式\n     *\n     * @return\n     */\n    @bean\n    public bcryptpasswordencoder bcryptpasswordencoder() {\n        return new bcryptpasswordencoder();\n    }\n\n\n    /**\n     * 注入自定义permissionevaluator\n     *\n     * @return\n     */\n    @bean\n    public defaultwebsecurityexpressionhandler usersecurityexpressionhandler() {\n        defaultwebsecurityexpressionhandler handler = new defaultwebsecurityexpressionhandler();\n        handler.setpermissionevaluator(userpermissionprovider);\n        return handler;\n    }\n\n    /**\n     * 用户登录验证\n     */\n    @override\n    protected void configure(authenticationmanagerbuilder auth) {\n        auth.authenticationprovider(userauthenticationprovider);\n    }\n\n    /**\n     * 安全权限配置\n     */\n    @override\n    protected void configure(httpsecurity http) throws exception {\n        http.authorizerequests() // 权限配置\n                .antmatchers(jwtconfig.antmatchers.split(",")).permitall()// 获取白名单（不进行权限验证）\n                .anyrequest().authenticated() // 其他的需要登陆后才能访问\n                .and().httpbasic().authenticationentrypoint(usernotloginhandler) // 配置未登录处理类\n                //.and().formlogin().loginprocessingurl("/system-login")// 配置登录url\n                //.successhandler(userloginsuccesshandler) // 配置登录成功处理类\n                //.failurehandler(userloginfailurehandler) // 配置登录失败处理类\n                .and().logout().logouturl("/logout")// 配置登出地址\n                .logoutsuccesshandler(userlogoutsuccesshandler) // 配置用户登出处理类\n                .and().exceptionhandling().accessdeniedhandler(useraccessdeniedhandler)// 配置没有权限处理类\n                .and().cors()// 开启跨域\n                .and().csrf().disable(); // 禁用跨站请求伪造防护\n        http.sessionmanagement().sessioncreationpolicy(sessioncreationpolicy.stateless); // 禁用session（使用token认证）\n        http.headers().cachecontrol(); // 禁用缓存\n        http.addfilter(new jwtauthenticationfilter(authenticationmanager())); // 添加jwt过滤器\n        http.addfilterbefore(corsfilter, logoutfilter.class); // 添加cors filter\n\n    }\n\n\n    /**\n     * 将 authenticationmanager 注册为 bean , 方便配置 oauth server 的时候使用\n     */\n    @bean\n    @override\n    public authenticationmanager authenticationmanagerbean() throws exception {\n        return super.authenticationmanagerbean();\n    }\n\n}\n\n\n# jwt过滤配置\n\n/**\n * jwt权限过滤器，用于验证token是否合法\n */\npublic class jwtauthenticationfilter extends basicauthenticationfilter {\n\n    public jwtauthenticationfilter(authenticationmanager authenticationmanager) {\n        super(authenticationmanager);\n    }\n\n    @override\n    protected void dofilterinternal(httpservletrequest request, httpservletresponse response, filterchain filterchain)\n            throws ioexception, servletexception {\n        // 取出token\n        string token = request.getheader(jwtconfig.tokenheader);\n        if (token != null) {\n            if (jwttokenutil.verifytoken(token)) {\n                responseutils.responsejson(response, result.fail(systemerrortype.token_expired));\n                return;\n            }\n            string newtoken = jwttokenutil.verifyexpired(token);\n            if (stringutils.isnotblank(newtoken)) {\n                response.setheader("newtoken", newtoken);\n                response.setheader("access-control-expose-headers", "newtoken");\n                response.setcontenttype("application/json;charset=utf-8");\n                response.setcharacterencoding("utf-8");\n            }\n            sysuserdetails sysuserdetails = jwttokenutil.parseaccesstoken(token);\n            if (sysuserdetails != null) {\n                usernamepasswordauthenticationtoken authentication = new usernamepasswordauthenticationtoken(\n                        sysuserdetails, sysuserdetails.getid(), sysuserdetails.getauthorities());\n                securitycontextholder.getcontext().setauthentication(authentication);\n            } else {\n                responseutils.responsejson(response, result.fail(systemerrortype.invalid_token));\n                return;\n            }\n        }\n        filterchain.dofilter(request, response);\n    }\n\n}\n\n\n# 登录验证\n\n/**\n * 用户登录验证处理类\n */\n@component\npublic class userauthenticationprovider implements authenticationprovider {\n\n    @autowired\n    private sysuserdetailsservice userdetailsservice;\n\n    /**\n     * 身份验证\n     */\n    @override\n    public authentication authenticate(authentication authentication) throws authenticationexception {\n        string username = (string) authentication.getprincipal(); // 获取用户名\n        string password = (string) authentication.getcredentials(); // 获取密码\n        sysuserdetails sysuserdetails = (sysuserdetails) userdetailsservice.loaduserbyusername(username);\n        if (sysuserdetails == null) {\n            throw new usernamenotfoundexception("用户名不存在");\n        }\n        if (!new bcryptpasswordencoder().matches(password, sysuserdetails.getpassword())) {\n            throw new badcredentialsexception("用户名或密码错误");\n        }\n        if (stringutils.equals(sysuserdetails.getstatus(), "0")) {\n            throw new lockedexception("用户已禁用");\n        }\n        return new usernamepasswordauthenticationtoken(sysuserdetails, password, sysuserdetails.getauthorities());\n    }\n\n    /**\n     * 支持指定的身份验证\n     */\n    @override\n    public boolean supports(class<?> authentication) {\n        return true;\n    }\n\n}\n\n\n# 登录逻辑\n\n/**\n * 用户登录service\n */\n@service\npublic class sysuserdetailsservice implements userdetailsservice {\n\n    @autowired\n    private sysuserservice sysuserservice;\n\n    /**\n     * 根据用户名查用户信息\n     *\n     * @param username 用户名\n     * @return 用户详细信息\n     */\n    @override\n    public userdetails loaduserbyusername(string username) throws usernamenotfoundexception {\n        sysuser sysuser = sysuserservice.finduserbyusername(username);\n        if (sysuser != null) {\n            sysuserdetails sysuserdetails = new sysuserdetails();\n            beanutils.copyproperties(sysuser, sysuserdetails);\n\n            set<grantedauthority> authorities = new hashset<>(); // 角色集合\n\n            list<sysrole> rolelist = sysuserservice.findrolebyuserid(sysuserdetails.getid());\n            if (collectionutils.isnotempty(rolelist)) {\n                rolelist.foreach(role -> {\n                    authorities.add(new simplegrantedauthority("role_" + role.getrolecode()));\n                });\n            }\n            sysuserdetails.setauthorities(authorities);\n\n            return sysuserdetails;\n        }\n        return null;\n    }\n\n}\n\n\n# 权限注解拦截\n\n/**\n * 用户权限注解处理类\n */\n@component\npublic class userpermissionprovider implements permissionevaluator {\n\n    @autowired\n    private sysuserservice sysuserservice;\n\n    /**\n     * 判断是否拥有权限\n     *\n     * @param authentication 用户身份\n     * @param targeturl      目标路径\n     * @param permission     路径权限\n     * @return 是否拥有权限\n     */\n    @override\n    public boolean haspermission(authentication authentication, object targeturl, object permission) {\n        sysuserdetails sysuserdetails = null;\n        try {\n            sysuserdetails = (sysuserdetails) authentication.getprincipal();\n        } catch (exception e) {\n            return false;\n        }\n\n        /**\n        * 白名单允许访问\n        * */\n        string[] matchers = jwtconfig.antmatchers.split(",");\n        list<string> matcherslist = arrays.aslist(matchers);\n        if (matcherslist.contains(targeturl)){\n            return true;\n        }\n\n        set<string> permissions = new hashset<string>(); // 用户权限\n\n        list<sysresource> authlist = sysuserservice.findsourcebyuserid(sysuserdetails.getid());\n        if (collectionutils.isnotempty(authlist)) {\n            authlist.foreach(auth -> {\n                permissions.add(auth.getpermission());\n            });\n        }\n\n        // 判断是否拥有权限\n        if (permissions.contains(permission.tostring())) {\n            return true;\n        }\n        return false;\n    }\n\n    @override\n    public boolean haspermission(authentication authentication, serializable targetid, string targettype, object permission) {\n        return false;\n    }\n\n}\n\n\n\n# 工具类\n\n# jwt工具类\n\nimport com.alibaba.fastjson.json;\nimport com.alibaba.fastjson.typereference;\nimport com.springboot.system.config.jwtconfig;\nimport com.springboot.system.entity.sysuserdetails;\nimport io.jsonwebtoken.claims;\nimport io.jsonwebtoken.expiredjwtexception;\nimport io.jsonwebtoken.jwts;\nimport io.jsonwebtoken.signaturealgorithm;\nimport lombok.extern.slf4j.slf4j;\nimport org.apache.commons.lang3.stringutils;\nimport org.springframework.security.core.grantedauthority;\nimport org.springframework.security.core.authority.simplegrantedauthority;\n\nimport java.util.*;\n\n/**\n * jwt生产token工具类\n */\n@slf4j\npublic class jwttokenutil {\n\n    /**\n     * 创建token\n     *\n     * @param sysuserdetails 用户信息\n     * @return\n     */\n    public static string createaccesstoken(sysuserdetails sysuserdetails) {\n        string token = jwts.builder().setid(// 设置jwt\n                sysuserdetails.getid()) // 用户id\n                .setsubject(sysuserdetails.getusername()) // 主题\n                .setissuedat(new date()) // 签发时间\n                .setissuer("zksc") // 签发者\n                .setexpiration(new date(system.currenttimemillis() + jwtconfig.expiration)) // 过期时间\n                .signwith(signaturealgorithm.hs512, jwtconfig.secret) // 签名算法、密钥\n                .claim("authorities", json.tojsonstring(sysuserdetails.getauthorities())).compact(); // 自定义其他属性，如用户组织机构id，用户所拥有的角色，用户权限信息等\n        return token;\n    }\n\n    /**\n     * 创建token\n     *\n     * @param claims claims信息\n     * @return\n     */\n    public static string generatetoken(map<string, object> claims) {\n        return jwts.builder()\n                .setclaims(claims)\n                .setexpiration(new date(system.currenttimemillis() + jwtconfig.expiration))\n                .signwith(signaturealgorithm.hs512, jwtconfig.secret)\n                .compact();\n    }\n\n    /**\n     * 解析token\n     *\n     * @param token token信息\n     * @return\n     */\n    public static sysuserdetails parseaccesstoken(string token) {\n        sysuserdetails sysuserdetails = null;\n        if (stringutils.isnotempty(token)) {\n            try {\n                // 去除jwt前缀\n                if (token.startswith(jwtconfig.tokenprefix)) {\n                    token = token.substring(jwtconfig.tokenprefix.length());\n                }\n                // 解析token\n                claims claims = jwts.parser().setsigningkey(jwtconfig.secret).parseclaimsjws(token).getbody();\n                // 获取用户信息\n                sysuserdetails = new sysuserdetails();\n                sysuserdetails.setid(claims.getid());\n                sysuserdetails.setusername(claims.getsubject());\n                // 获取角色\n                set<grantedauthority> authorities = new hashset<grantedauthority>();\n                string authority = claims.get("authorities").tostring();\n                if (stringutils.isnotempty(authority)) {\n                    list<map<string, string>> authoritylist = json.parseobject(authority,\n                            new typereference<list<map<string, string>>>() {\n                            });\n                    for (map<string, string> role : authoritylist) {\n                        if (!role.isempty()) {\n                            authorities.add(new simplegrantedauthority(role.get("authority")));\n                        }\n                    }\n                }\n                sysuserdetails.setauthorities(authorities);\n            } catch (exception e1) {\n                log.error("解析token异常：" + e1.getmessage());\n            }\n        }\n        return sysuserdetails;\n    }\n\n\n    /**\n     * 验证token是否过期\n     *\n     * @param token token信息\n     * @return\n     */\n    public static boolean verifytoken(string token) {\n        try {\n            // 去除jwt前缀\n            if (token.startswith(jwtconfig.tokenprefix)) {\n                token = token.substring(jwtconfig.tokenprefix.length());\n            }\n            jwts.parser().setsigningkey(jwtconfig.secret).parseclaimsjws(token).getbody();\n            return false;\n        } catch (expiredjwtexception e) {\n            log.debug(e.getmessage());\n            date expiration = e.getclaims().getexpiration();\n            return expiration.before(new date());\n        } catch (exception e1) {\n            log.error(e1.getmessage());\n            return false;\n        }\n    }\n\n    /**\n     * 刷新token\n     *\n     * @param token token信息\n     * @return 新的token\n     */\n    public static string refreshtoken(string token) {\n        try {\n            // 去除jwt前缀\n            if (token.startswith(jwtconfig.tokenprefix)) {\n                token = token.substring(jwtconfig.tokenprefix.length());\n            }\n            claims claims = jwts.parser().setsigningkey(jwtconfig.secret).parseclaimsjws(token).getbody();\n            return generatetoken(claims);\n        } catch (expiredjwtexception e) {\n            log.debug(e.getmessage());\n            return generatetoken(e.getclaims());\n        } catch (exception e1) {\n            log.error(e1.getmessage());\n            return e1.getmessage();\n        }\n    }\n\n\n    /**\n     * 过期时间还剩十分钟时刷新token\n     *\n     * @param token\n     * @return 新的token\n     */\n    public static string verifyexpired(string token) {\n        try {\n            // 去除jwt前缀\n            if (token.startswith(jwtconfig.tokenprefix)) {\n                token = token.substring(jwtconfig.tokenprefix.length());\n            }\n            claims claims = jwts.parser().setsigningkey(jwtconfig.secret).parseclaimsjws(token).getbody();\n            long expiretime = claims.getexpiration().gettime();\n            long nowtime = new date().gettime();\n            if (expiretime - nowtime < 10 * 60 * 1000) {\n                return generatetoken(claims);\n            } else {\n                return null;\n            }\n        } catch (exception e1) {\n            log.error(e1.getmessage());\n            return null;\n        }\n    }\n\n}\n\n\n# response工具类\n\nimport com.alibaba.fastjson.json;\nimport lombok.allargsconstructor;\nimport lombok.data;\nimport lombok.extern.slf4j.slf4j;\n\nimport javax.servlet.servletresponse;\nimport java.io.printwriter;\nimport java.time.instant;\nimport java.time.zoneddatetime;\n\n@slf4j\n@data\n@allargsconstructor\npublic class responseutils {\n\n    /**\n     * 返回编码\n     */\n    private string code;\n\n    /**\n     * 返回消息\n     */\n    private string msg;\n\n    /**\n     * 返回数据\n     */\n    private object data;\n\n    /**\n     * 请求结果生成时间戳\n     */\n    private instant time;\n\n    /**\n     * response输出json格式\n     *\n     * @param response\n     * @param data     返回数据\n     */\n    public static void responsejson(servletresponse response, object data) {\n        printwriter out = null;\n        try {\n            response.setcharacterencoding("utf-8");\n            response.setcontenttype("application/json");\n            out = response.getwriter();\n            out.println(json.tojsonstring(data));\n            out.flush();\n        } catch (exception e) {\n            log.error("response输出json异常：" + e);\n        } finally {\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n\n    /**\n     * 返回信息\n     *\n     * @param code 返回编码\n     * @param msg  返回消息\n     * @param data 返回数据\n     * @return\n     */\n    public static responseutils response(string code, string msg, object data) {\n        return new responseutils(code, msg, data, zoneddatetime.now().toinstant());\n    }\n}\n\n\n\n# handler配置\n\n# 无权限\n\n\n/**\n * 无权限处理类\n */\n@component\npublic class useraccessdeniedhandler implements accessdeniedhandler {\n\n    @override\n    public void handle(httpservletrequest request, httpservletresponse response, accessdeniedexception accessdeniedexception) {\n        responseutils.responsejson(response, result.fail(systemerrortype.no_permission));\n    }\n\n}\n\n\n# 未登录\n\n/**\n * 未登录处理类\n */\n@component\npublic class usernotloginhandler implements authenticationentrypoint {\n\n    @override\n    public void commence(httpservletrequest request, httpservletresponse response,\n                         authenticationexception authexception) {\n        responseutils.responsejson(response, result.fail(systemerrortype.not_login));\n    }\n    \n}\n\n\n# 登出\n\n/**\n * 登出成功处理类\n */\n@component\npublic class userlogoutsuccesshandler implements logoutsuccesshandler {\n\n    @override\n    public void onlogoutsuccess(httpservletrequest request, httpservletresponse response, authentication authentication) {\n        securitycontextholder.clearcontext();\n        responseutils.responsejson(response, result.success(systemerrortype.logout_success));\n    }\n    \n}\n\n\n\n# 其他配置\n\n# jwt基本配置\n\nimport org.springframework.boot.context.properties.configurationproperties;\nimport org.springframework.stereotype.component;\n\n/**\n * jwt配置基础类\n */\n@component\n@configurationproperties(prefix = "jwt")\n@suppresswarnings("static-access")\npublic class jwtconfig {\n\n    /**\n     * 密匙key\n     */\n    public static string secret;\n\n    /**\n     * headerkey\n     */\n    public static string tokenheader;\n\n    /**\n     * token前缀\n     */\n    public static string tokenprefix;\n\n    /**\n     * 过期时间\n     */\n    public static integer expiration;\n\n    /**\n     * 配置白名单\n     */\n    public static string antmatchers;\n\n    /**\n     * 将过期时间单位换算成毫秒\n     *\n     * @param expiration 过期时间，单位秒\n     */\n    public void setexpiration(integer expiration) {\n        this.expiration = expiration * 1000;\n    }\n\n    public void setsecret(string secret) {\n        this.secret = secret;\n    }\n\n    public void settokenheader(string tokenheader) {\n        this.tokenheader = tokenheader;\n    }\n\n    public void settokenprefix(string tokenprefix) {\n        this.tokenprefix = tokenprefix + " ";\n    }\n\n    public void setantmatchers(string antmatchers) {\n        this.antmatchers = antmatchers;\n    }\n\n}\n\n\n# 跨域配置\n\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.web.cors.corsconfiguration;\nimport org.springframework.web.cors.urlbasedcorsconfigurationsource;\nimport org.springframework.web.filter.corsfilter;\n\n@configuration\npublic class corsconfig {\n\n    private corsconfiguration buildconfig() {\n        corsconfiguration corsconfiguration = new corsconfiguration();\n        // 1允许任何域名使用\n        corsconfiguration.addallowedorigin("*");\n        // 2允许任何头\n        corsconfiguration.addallowedheader("*");\n        // 3允许任何方法（post、get等）\n        corsconfiguration.addallowedmethod("*");\n\n        corsconfiguration.setallowcredentials(true);\n        return corsconfiguration;\n    }\n\n    @bean\n    public corsfilter corsfilter() {\n        urlbasedcorsconfigurationsource source = new urlbasedcorsconfigurationsource();\n        source.registercorsconfiguration("/**", buildconfig());\n        return new corsfilter(source);\n    }\n\n}\n\n\n\n# 3.使用\n\n\n# entity层\n\n# 用户\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport com.springboot.system.entity.vo.sysuservo;\nimport lombok.data;\nimport org.springframework.beans.beanutils;\n\nimport java.util.date;\nimport java.util.list;\nimport java.util.set;\n\n@data\n@tablename("sys_user")\npublic class sysuser {\n\n    @tableid(type = idtype.id_worker_str)\n    private string id;\n\n    private string number;\n\n    private string username;\n\n    @tablefield(exist = false)\n    private string oldpassword;\n\n    private string password;\n\n    private string mobile;\n\n    private string avatar;\n\n    private string type;\n\n    private string status = "1";\n\n    @tablelogic\n    private string deleted = "n";\n\n    @tablefield(exist = false)\n    private list roles;\n\n    @tablefield(exist = false)\n    private set<string> roleids;\n\n    @tablefield(value = "created_by", fill = fieldfill.insert)\n    private string createdby;\n    @tablefield(value = "created_time", fill = fieldfill.insert)\n    private date createdtime;\n    @tablefield(value = "updated_by", fill = fieldfill.insert_update)\n    private string updatedby;\n    @tablefield(value = "updated_time", fill = fieldfill.insert_update)\n    private date updatedtime;\n\n\n    /**\n     * po转化为vo\n     *\n     * @param clazz\n     * @return\n     */\n    public sysuservo toparam(class<sysuservo> clazz) {\n        sysuservo t = beanutils.instantiateclass(clazz);\n        beanutils.copyproperties(this, t);\n        return t;\n    }\n}\n\n\n# 角色\n\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.data;\n\nimport java.util.date;\nimport java.util.list;\nimport java.util.set;\n\n@data\n@tablename("sys_role")\npublic class sysrole {\n\n    @tableid(type = idtype.id_worker_str)\n    private string id;\n\n    private string rolecode;\n\n    private string rolename;\n\n    private string roledescription;\n\n    @tablelogic\n    private string deleted = "n";\n\n    @tablefield(exist = false)\n    private set<string> resourcesids;\n\n    @tablefield(exist = false)\n    private list resources;\n\n    @tablefield(value = "created_by", fill = fieldfill.insert)\n    private string createdby;\n    @tablefield(value = "created_time", fill = fieldfill.insert)\n    private date createdtime;\n    @tablefield(value = "updated_by", fill = fieldfill.insert_update)\n    private string updatedby;\n    @tablefield(value = "updated_time", fill = fieldfill.insert_update)\n    private date updatedtime;\n\n}\n\n\n# 资源\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.data;\n\nimport java.util.date;\nimport java.util.list;\n\n@data\n@tablename("sys_resource")\npublic class sysresource {\n\n    @tableid(type = idtype.id_worker_str)\n    private string id;\n\n    private string parentid = "0";\n\n    private string title;\n\n    private string name;\n\n    private string url;\n\n    private string permission;\n\n    @tablelogic\n    private string deleted = "n";\n\n    private string menutype;\n\n    private string hidden;\n\n    private string status;\n\n    private string alwaysshow;\n\n    private int ordernumber;\n\n    private string redirect;\n\n    private string icon;\n\n    private string nocache;\n\n    private string affix;\n\n    private string breadcrumb;\n\n    private string component;\n\n    private string activemenu;\n\n    private string remark;\n\n    @tablefield(exist = false)\n    private list<sysresource> children;\n\n    @tablefield(value = "created_by", fill = fieldfill.insert)\n    private string createdby;\n    @tablefield(value = "created_time", fill = fieldfill.insert)\n    private date createdtime;\n    @tablefield(value = "updated_by", fill = fieldfill.insert_update)\n    private string updatedby;\n    @tablefield(value = "updated_time", fill = fieldfill.insert_update)\n    private date updatedtime;\n\n}\n\n\n# 用户角色关联\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.allargsconstructor;\nimport lombok.data;\nimport lombok.noargsconstructor;\n\nimport java.util.date;\n\n@data\n@allargsconstructor\n@noargsconstructor\n@tablename("sys_user_role")\npublic class sysuserrole {\n\n    @tableid(type = idtype.id_worker_str)\n    private string id;\n\n    private string userid;\n\n    private string roleid;\n\n    @tablelogic\n    private string deleted = "n";\n\n    @tablefield(value = "created_by", fill = fieldfill.insert)\n    private string createdby;\n    @tablefield(value = "created_time", fill = fieldfill.insert)\n    private date createdtime;\n    @tablefield(value = "updated_by", fill = fieldfill.insert_update)\n    private string updatedby;\n    @tablefield(value = "updated_time", fill = fieldfill.insert_update)\n    private date updatedtime;\n\n}\n\n\n# 角色资源关联\n\nimport com.baomidou.mybatisplus.annotation.*;\nimport lombok.allargsconstructor;\nimport lombok.data;\n\nimport java.util.date;\n\n@data\n@allargsconstructor\n@tablename("sys_role_resource")\npublic class sysroleresource {\n\n    @tableid(type = idtype.id_worker_str)\n    private string id;\n\n    /**\n     * 角色id\n     */\n    private string roleid;\n\n    /**\n     * 权限id\n     */\n    private string resourceid;\n\n    @tablelogic\n    private string deleted = "n";\n\n    @tablefield(value = "created_by", fill = fieldfill.insert)\n    private string createdby;\n    @tablefield(value = "created_time", fill = fieldfill.insert)\n    private date createdtime;\n    @tablefield(value = "updated_by", fill = fieldfill.insert_update)\n    private string updatedby;\n    @tablefield(value = "updated_time", fill = fieldfill.insert_update)\n    private date updatedtime;\n\n}\n\n\n# 登录\n\nimport com.springboot.system.entity.po.sysuser;\nimport lombok.data;\nimport lombok.equalsandhashcode;\nimport org.springframework.security.core.grantedauthority;\nimport org.springframework.security.core.userdetails.userdetails;\n\nimport java.io.serializable;\nimport java.util.collection;\n\n/**\n * 系统用户详情\n */\n@data\n@equalsandhashcode(callsuper = false)\npublic class sysuserdetails extends sysuser implements userdetails, serializable {\n    private static final long serialversionuid = 1l;\n\n    /**\n     * 用户角色\n     */\n    private collection<grantedauthority> authorities;\n\n    /**\n     * 账号是否过期\n     */\n    private boolean isaccountnonexpired = false;\n\n    /**\n     * 账号是否锁定\n     */\n    private boolean isaccountnonlocked = false;\n\n    /**\n     * 证书是否过期\n     */\n    private boolean iscredentialsnonexpired = false;\n\n    /**\n     * 账号是否有效\n     */\n    private boolean isenabled = true;\n\n    /**\n     * 获得用户权限\n     */\n    @override\n    public collection<? extends grantedauthority> getauthorities() {\n        return authorities;\n    }\n\n    /**\n     * 判断账号是否过期\n     */\n    @override\n    public boolean isaccountnonexpired() {\n        return isaccountnonexpired;\n    }\n\n    /**\n     * 判断账号是否锁定\n     */\n    @override\n    public boolean isaccountnonlocked() {\n        return isaccountnonlocked;\n    }\n\n    /**\n     * 判断证书是否过期\n     */\n    @override\n    public boolean iscredentialsnonexpired() {\n        return iscredentialsnonexpired;\n    }\n\n    /**\n     * 判断账号是否有效\n     */\n    @override\n    public boolean isenabled() {\n        return isenabled;\n    }\n\n}\n\n\n\n# mapper层\n\n# 用户\n\nimport com.baomidou.mybatisplus.core.mapper.basemapper;\nimport com.springboot.system.entity.po.sysuser;\nimport org.apache.ibatis.annotations.mapper;\nimport org.springframework.stereotype.repository;\n\n@mapper\n@repository\npublic interface sysusermapper extends basemapper<sysuser> {\n\n}\n\n\n# 角色\n\nimport com.baomidou.mybatisplus.core.mapper.basemapper;\nimport com.springboot.system.entity.po.sysrole;\nimport org.apache.ibatis.annotations.mapper;\nimport org.springframework.stereotype.repository;\n\n@repository\n@mapper\npublic interface sysrolemapper extends basemapper<sysrole> {\n}\n\n\n# 资源\n\nimport com.baomidou.mybatisplus.core.mapper.basemapper;\nimport com.springboot.system.entity.po.sysresource;\nimport org.apache.ibatis.annotations.mapper;\nimport org.springframework.stereotype.repository;\n\n@repository\n@mapper\npublic interface sysresourcemapper extends basemapper<sysresource> {\n\n}\n\n\n# 用户角色关联\n\nimport com.baomidou.mybatisplus.core.mapper.basemapper;\nimport com.springboot.system.entity.po.sysrole;\nimport org.apache.ibatis.annotations.mapper;\nimport org.springframework.stereotype.repository;\n\n@repository\n@mapper\npublic interface sysrolemapper extends basemapper<sysrole> {\n}\n\n\n# 角色资源关联\n\nimport com.baomidou.mybatisplus.core.mapper.basemapper;\nimport com.springboot.system.entity.po.sysroleresource;\nimport org.apache.ibatis.annotations.mapper;\nimport org.springframework.stereotype.repository;\n\n@repository\n@mapper\npublic interface sysroleresourcemapper extends basemapper<sysroleresource> {\n}\n\n\n\n# iservice层\n\n# 用户\n\nimport com.baomidou.mybatisplus.core.metadata.ipage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.page;\nimport com.springboot.common.core.entity.vo.result;\nimport com.springboot.system.entity.form.sysuserqueryform;\nimport com.springboot.system.entity.po.sysresource;\nimport com.springboot.system.entity.po.sysrole;\nimport com.springboot.system.entity.po.sysuser;\nimport com.springboot.system.entity.vo.sysuservo;\n\nimport javax.servlet.http.httpservletresponse;\nimport java.io.serializable;\nimport java.util.list;\n\npublic interface sysuserservice {\n\n    sysuser getbyid(serializable id);\n\n    /**\n     * 根据用户名称查询用户信息\n     *\n     * @param username 用户名称\n     * @return\n     */\n    sysuser finduserbyusername(string username);\n\n    /**\n     * 根据用户id查询角色\n     *\n     * @param userid 用户id\n     * @return\n     */\n    list<sysrole> findrolebyuserid(string userid);\n\n    /**\n     * 根据用户id查询权限\n     *\n     * @param userid 用户id\n     * @return\n     */\n    list<sysresource> findsourcebyuserid(string userid);\n\n\n    /**\n     * 根据token查询用户信息\n     *\n     * @param token\n     * @return\n     */\n    result finduserbytoken(string token);\n\n    /**\n     * 添加用户\n     *\n     * @param sysuser\n     * @return\n     */\n    result add(sysuser sysuser);\n\n    /**\n     * 更新用户信息\n     *\n     * @param sysuser\n     */\n    result update(sysuser sysuser);\n\n\n    /**\n     * 更改头像\n     *\n     * @param id 用户id\n     * @param avatar 头像\n     */\n    result updateavatar(string id,string avatar);\n\n    /**\n     * 根据id删除用户\n     *\n     * @param id\n     */\n    boolean delete(string id);\n\n    /**\n     * 获取用户\n     *\n     * @param id 用户id\n     * @return sysuser\n     */\n    sysuser get(string id);\n\n\n    /**\n     * 查询用户\n     *\n     * @return\n     */\n    ipage<sysuser> query(page<sysuser> page, sysuserqueryform sysuserqueryform);\n\n    /**\n     * 导出用户\n     *\n     * @return\n     */\n    void exportexcel(httpservletresponse response);\n\n\n    /**\n     * 根据角色查询用户\n     *\n     * @return\n     */\n    result getuserbyroleid(string roleid);\n\n}\n\n\n# 角色\n\nimport com.baomidou.mybatisplus.core.metadata.ipage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.page;\nimport com.springboot.common.core.entity.vo.result;\nimport com.springboot.system.entity.form.sysrolequeryform;\nimport com.springboot.system.entity.po.sysrole;\n\nimport java.io.serializable;\nimport java.util.list;\n\npublic interface sysroleservice {\n    sysrole getbyid(serializable id);\n\n    list<sysrole> getrolebyuserid(string userid);\n\n    list<sysrole> getrolelist();\n\n    result add(sysrole sysrole);\n\n    result update(sysrole sysrole);\n\n    result delete(string id);\n\n    sysrole get(string id);\n\n    ipage<sysrole> query(page<sysrole> page, sysrolequeryform sysrolequeryform);\n\n}\n\n\n# 资源\n\nimport com.springboot.common.core.entity.vo.result;\nimport com.springboot.system.entity.po.sysresource;\n\nimport java.io.serializable;\nimport java.util.list;\n\npublic interface sysresourceservice {\n\n    list<sysresource> getresourcebyroleid(string roleid);\n\n    list<sysresource> getresourcebyroleid(string roleid, string menutype);\n\n    boolean save(sysresource sysresource);\n\n    boolean updatebyid(sysresource sysresource);\n\n    boolean removebyid(serializable id);\n\n    result delete(string id);\n\n    sysresource getbyid(serializable id);\n\n    list<sysresource> getlist();\n\n    list<sysresource> getbyuserid(string userid, string menutype);\n\n}\n\n\n# 用户角色关联\n\nimport java.util.list;\nimport java.util.set;\n\npublic interface sysuserroleservice {\n\n    /**\n     * 用户id查询角色ids\n     *\n     * @param userid\n     * @return\n     */\n    list<string> getroleidsbyuserid(string userid);\n\n\n    /**\n     * 给用户添加角色\n     *\n     * @param userid\n     * @param roleids\n     * @return\n     */\n    boolean savebatch(string userid, set<string> roleids);\n\n    /**\n     * 删除用户拥有的角色\n     *\n     * @param userid\n     * @return\n     */\n    boolean removebyuserid(string userid);\n\n    /**\n     * 角色id查询用户ids\n     *\n     * @param roleid 角色id\n     * @return\n     */\n    list<string> getuseridsbyroleid(string roleid);\n\n}\n\n\n# 角色资源关联\n\nimport java.util.list;\nimport java.util.set;\n\npublic interface sysroleresourceservice {\n\n\n    /**\n     * 根据角色id查询资源列表id\n     *\n     * @param roleid      角色id\n     * @return 资源列表id\n     */\n    list<string> getresourceidsbyroleid(string roleid);\n\n    /**\n     * 批量给角色添加资源\n     *\n     * @param roleid      角色id\n     * @param resourceids 资源id列表\n     * @return 是否操作成功\n     */\n    boolean savebatch(string roleid, set<string> resourceids);\n\n\n    /**\n     * 删除角色拥有的资源\n     *\n     * @param roleid 角色id\n     * @return 是否操作成功\n     */\n    boolean removebyroleid(string roleid);\n\n\n}\n\n\n\n# service层\n\n# 用户\n\nimport com.alibaba.fastjson.jsonobject;\nimport com.baomidou.mybatisplus.core.conditions.query.querywrapper;\nimport com.baomidou.mybatisplus.core.metadata.ipage;\nimport com.baomidou.mybatisplus.core.toolkit.collectionutils;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.page;\nimport com.baomidou.mybatisplus.extension.service.impl.serviceimpl;\nimport com.springboot.common.core.entity.vo.result;\nimport com.springboot.common.core.exception.systemerrortype;\nimport com.springboot.common.core.util.configkeyenum;\nimport com.springboot.common.core.util.excelutil;\nimport com.springboot.system.dao.sysusermapper;\nimport com.springboot.system.entity.sysuserdetails;\nimport com.springboot.system.entity.form.sysuserqueryform;\nimport com.springboot.system.entity.po.sysresource;\nimport com.springboot.system.entity.po.sysrole;\nimport com.springboot.system.entity.po.sysuser;\nimport com.springboot.system.entity.vo.sysuservo;\nimport com.springboot.system.service.sysresourceservice;\nimport com.springboot.system.service.sysroleservice;\nimport com.springboot.system.service.sysuserroleservice;\nimport com.springboot.system.service.sysuserservice;\nimport com.springboot.system.util.jwttokenutil;\nimport org.apache.commons.lang.stringutils;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.security.crypto.bcrypt.bcryptpasswordencoder;\nimport org.springframework.stereotype.service;\nimport org.springframework.transaction.annotation.transactional;\n\nimport javax.servlet.http.httpservletresponse;\nimport java.util.*;\n\n\n@service\npublic class sysuserserviceimpl extends serviceimpl<sysusermapper, sysuser> implements sysuserservice {\n\n\n    @autowired\n    sysusermapper usermapper;\n\n    @autowired\n    sysroleservice roleservice;\n\n    @autowired\n    sysuserroleservice userroleservice;\n\n    @autowired\n    sysresourceservice resourceservice;\n\n    @autowired\n    bcryptpasswordencoder passwordencoder;\n\n    @autowired\n    sysconfigservice configservice;\n\n    /**\n     * 根据用户名称查询用户信息\n     *\n     * @param username 用户名称\n     * @return\n     */\n    @override\n    public sysuser finduserbyusername(string username) {\n        return this.getone(new querywrapper<sysuser>().apply("binary username = {0}", username));\n    }\n\n    /**\n     * 根据用户id查询角色\n     *\n     * @param userid 用户id\n     * @return\n     */\n    @override\n    public list<sysrole> findrolebyuserid(string userid) {\n        return roleservice.getrolebyuserid(userid);\n    }\n\n    /**\n     * 根据用户id查询权限\n     *\n     * @param userid 用户id\n     * @return\n     */\n    @override\n    public list<sysresource> findsourcebyuserid(string userid) {\n        list<sysrole> rolelist = roleservice.getrolebyuserid(userid);\n        if (collectionutils.isempty(rolelist)) {\n            return null;\n        }\n        set<sysresource> sysresources = new hashset<>();\n        for (sysrole sysrole : rolelist) {\n            list<sysresource> resourcelist = resourceservice.getresourcebyroleid(sysrole.getid(), "r");\n            if (collectionutils.isnotempty(resourcelist)) {\n                sysresources.addall(resourcelist);\n            }\n        }\n        arraylist<sysresource> list = new arraylist<>();\n        list.addall(sysresources);\n        if (collectionutils.isempty(list)) {\n            return null;\n        }\n        return list;\n    }\n\n    /**\n     * 根据token查询用户信息\n     *\n     * @param token\n     * @return\n     */\n    @override\n    public result finduserbytoken(string token) {\n        sysuserdetails sysuserdetails = jwttokenutil.parseaccesstoken(token);\n        if (sysuserdetails == null) {\n            return result.fail(systemerrortype.token_expired);\n        }\n        sysuser user = this.getbyid(sysuserdetails.getid());\n        arraylist<string> list = new arraylist<>();\n        list<sysrole> rolelist = roleservice.getrolebyuserid(sysuserdetails.getid());\n        for (sysrole sysrole : rolelist) {\n            list.add(sysrole.getrolecode());\n        }\n        user.setroles(list);\n        return result.success(user.toparam(sysuservo.class));\n    }\n\n    @override\n    public result add(sysuser sysuser) {\n        sysuser user = this.finduserbyusername(sysuser.getusername());\n        if (user != null) {\n            return result.fail("用户已存在！");\n        }\n        if (stringutils.isblank(sysuser.getpassword())) {\n            return result.fail("请输入密码！");\n        }\n        sysuser.setpassword(passwordencoder.encode(sysuser.getpassword()));\n        this.save(sysuser);\n        userroleservice.savebatch(sysuser.getid(), sysuser.getroleids());\n        return result.success();\n    }\n\n\n    @override\n    @transactional\n    public result update(sysuser sysuser) {\n        if (stringutils.isnotblank(sysuser.getoldpassword())) {\n            sysuser user = this.getbyid(sysuser.getid());\n            boolean matches = passwordencoder.matches(sysuser.getoldpassword(), user.getpassword());\n            if (!matches) {\n                return result.fail("旧密码错误！");\n            }\n            if (stringutils.isnotblank(sysuser.getpassword())) {\n                sysuser.setpassword(passwordencoder.encode(sysuser.getpassword()));\n            }\n        }\n        if (stringutils.isnotblank(sysuser.getavatar())) {\n            string nginx = configservice.getstrvalue(configkeyenum.nginx_pic_path.getconfigkey());\n            if (sysuser.getavatar().startswith(nginx)) {\n                sysuser.setavatar(sysuser.getavatar().substring(nginx.length()));\n            }\n        }\n        if (stringutils.isblank(sysuser.getpassword())) {\n            sysuser user = this.getbyid(sysuser.getid());\n            sysuser.setpassword(user.getpassword());\n        }\n        this.updatebyid(sysuser);\n        userroleservice.savebatch(sysuser.getid(), sysuser.getroleids());\n        return result.success();\n    }\n\n    @override\n    public result updateavatar(string id, string avatar) {\n        sysuser sysuser = this.getbyid(id);\n        if (stringutils.isnotblank(avatar)) {\n            string nginx = configservice.getstrvalue(configkeyenum.nginx_pic_path.getconfigkey());\n            if (avatar.startswith(nginx)) {\n                avatar = avatar.substring(nginx.length());\n            }\n        }\n        sysuser.setavatar(avatar);\n        this.updatebyid(sysuser);\n        return result.success();\n    }\n\n    @override\n    @transactional\n    public boolean delete(string id) {\n        this.removebyid(id);\n        return userroleservice.removebyuserid(id);\n    }\n\n    @override\n    public sysuser get(string id) {\n        sysuser sysuser = this.getbyid(id);\n        if (objects.isnull(sysuser)) {\n            return null;\n        }\n        if (stringutils.isnotblank(sysuser.getavatar())) {\n            string nginx = configservice.getstrvalue(configkeyenum.nginx_pic_path.getconfigkey());\n            stringbuilder stringbuilder = new stringbuilder(nginx);\n            stringbuilder.append(sysuser.getavatar());\n            sysuser.setavatar(stringbuilder.tostring());\n        }\n        list<sysrole> rolelist = roleservice.getrolebyuserid(sysuser.getid());\n        sysuser.setroles(rolelist);\n        return sysuser;\n    }\n\n    @override\n    public ipage<sysuser> query(page<sysuser> page, sysuserqueryform sysuserqueryform) {\n        querywrapper<sysuser> querywrapper = new querywrapper<>();\n        if (stringutils.isnotblank(sysuserqueryform.getnumber())) {\n            querywrapper.lambda().like(sysuser::getnumber, sysuserqueryform.getnumber());\n        }\n        if (stringutils.isnotblank(sysuserqueryform.getusername())) {\n//            querywrapper.apply("binary username = {0}", sysuserqueryform.getusername());\n            querywrapper.lambda().like(sysuser::getusername, sysuserqueryform.getusername());\n        }\n        if (stringutils.isnotblank(sysuserqueryform.gettype())) {\n            querywrapper.lambda().like(sysuser::gettype, sysuserqueryform.gettype());\n        }\n        if (sysuserqueryform.getcreatedtimestart() != null && sysuserqueryform.getcreatedtimeend() != null) {\n            querywrapper.lambda().between(sysuser::getcreatedtime, sysuserqueryform.getcreatedtimestart(), sysuserqueryform.getcreatedtimeend());\n        }\n        ipage userpage = this.page(page, querywrapper);\n        arraylist<sysuservo> list = new arraylist<>();\n        list<sysuser> records = userpage.getrecords();\n        for (sysuser user : records) {\n            user.setroles(roleservice.getrolebyuserid(user.getid()));\n            list.add(user.toparam(sysuservo.class));\n        }\n        userpage.setrecords(list);\n        return userpage;\n    }\n\n    @override\n    public void exportexcel(httpservletresponse response) {\n        list<sysuser> list = this.list();\n        arraylist<sysuservo> uservolist = new arraylist<>();\n        for (sysuser user : list) {\n            //user.setroles(roleservice.getrolebyuserid(user.getid()));\n            uservolist.add(user.toparam(sysuservo.class));\n        }\n        excelutil.exportexcel(uservolist, "用户列表", "sheet", sysuservo.class, "用户列表.xls", response);\n    }\n\n    @override\n    public result getuserbyroleid(string roleid) {\n        list<string> userids = userroleservice.getuseridsbyroleid(roleid);\n        if (userids == null || userids.isempty()) {\n            return result.success(new arraylist<>());\n        }\n        collection<sysuser> sysusers = this.listbyids(userids);\n        arraylist list = new arraylist<>();\n        sysusers.foreach(sysuser -> {\n            jsonobject jsonobject = new jsonobject();\n            jsonobject.put("id", sysuser.getid());\n            jsonobject.put("username", sysuser.getusername());\n            list.add(jsonobject);\n        });\n        return result.success(list);\n    }\n}\n\n\n# 角色\n\nimport com.baomidou.mybatisplus.core.conditions.query.lambdaquerywrapper;\nimport com.baomidou.mybatisplus.core.conditions.query.querywrapper;\nimport com.baomidou.mybatisplus.core.metadata.ipage;\nimport com.baomidou.mybatisplus.core.toolkit.collectionutils;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.page;\nimport com.baomidou.mybatisplus.extension.service.impl.serviceimpl;\nimport com.springboot.admin.entity.po.dailyreminder;\nimport com.springboot.admin.service.impl.dailyreminderservice;\nimport com.springboot.common.core.entity.vo.result;\nimport com.springboot.quartz.service.sysjobservice;\nimport com.springboot.system.dao.sysrolemapper;\nimport com.springboot.system.entity.form.sysrolequeryform;\nimport com.springboot.system.entity.po.sysresource;\nimport com.springboot.system.entity.po.sysrole;\nimport com.springboot.system.service.sysresourceservice;\nimport com.springboot.system.service.sysroleresourceservice;\nimport com.springboot.system.service.sysroleservice;\nimport com.springboot.system.service.sysuserroleservice;\nimport org.apache.commons.lang.stringutils;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.service;\nimport org.springframework.transaction.annotation.transactional;\n\nimport java.util.arraylist;\nimport java.util.hashset;\nimport java.util.list;\n\n@service\npublic class sysroleserviceimpl extends serviceimpl<sysrolemapper, sysrole> implements sysroleservice {\n\n\n    @autowired\n    sysuserroleservice userroleservice;\n\n    @autowired\n    sysroleresourceservice roleresourceservice;\n\n    @autowired\n    sysresourceservice resourceservice;\n\n    @autowired\n    dailyreminderservice dailyreminderservice;\n\n    /**\n     * 根据用户id查询角色\n     *\n     * @param userid 用户id\n     * @return\n     */\n    public list<sysrole> getrolebyuserid(string userid) {\n        list<string> roleids = userroleservice.getroleidsbyuserid(userid);\n        if (roleids.isempty()) {\n            return new arraylist<>();\n        }\n        return (list<sysrole>) this.listbyids(roleids);\n    }\n\n    /**\n     * 查询角色列表\n     */\n    @override\n    public list<sysrole> getrolelist() {\n        return this.list();\n    }\n\n    /**\n     * 添加角色\n     *\n     * @param sysrole\n     * @return result\n     */\n    @override\n    @transactional\n    public result add(sysrole sysrole) {\n        sysrole role = this.getone(new querywrapper<sysrole>().lambda().eq(sysrole::getrolecode, sysrole.getrolecode()));\n        if (role != null) {\n            return result.fail("已经存在该角色");\n        }\n        this.save(sysrole);\n        roleresourceservice.savebatch(sysrole.getid(), sysrole.getresourcesids());\n        return result.success();\n    }\n\n    /**\n     * 修改角色\n     *\n     * @param sysrole\n     * @return result\n     */\n    @override\n    @transactional\n    public result update(sysrole sysrole) {\n        sysrole sysroledata = this.getbyid(sysrole.getid());\n        list<dailyreminder> listbyrole = dailyreminderservice.getlistbyrole(sysroledata.getrolecode());\n        //修改每日待办事件里的角色\n        if (listbyrole.size() != 0 && !sysrole.getrolecode().equals(sysroledata.getrolecode())){\n            listbyrole.foreach(dailyreminder -> {\n                dailyreminder.setrole(sysrole.getrolecode());\n                dailyreminderservice.update(dailyreminder);\n            });\n        }\n        this.updatebyid(sysrole);\n        if (collectionutils.isnotempty(sysrole.getresourcesids())) {\n            roleresourceservice.savebatch(sysrole.getid(), sysrole.getresourcesids());\n        }\n        return result.success();\n    }\n\n    /**\n     * 删除角色\n     *\n     * @param id\n     * @return result\n     */\n    @override\n    public result delete(string id) {\n        sysrole sysroledata = this.getbyid(id);\n        list<dailyreminder> listbyrole = dailyreminderservice.getlistbyrole(sysroledata.getrolecode());\n        if (listbyrole.size() != 0){\n            return result.fail("每日待办事件里存在该角色，请先删除每日待办事件里的角色！");\n        }\n        this.removebyid(id);\n        roleresourceservice.removebyroleid(id);\n        return result.success();\n    }\n\n    /**\n     * 根据id获取角色\n     *\n     * @param id\n     * @return sysrole\n     */\n    @override\n    public sysrole get(string id) {\n        sysrole sysrole = this.getbyid(id);\n        arraylist<sysresource> list = new arraylist<>();\n        list<string> resourceids = roleresourceservice.getresourceidsbyroleid(id);\n        hashset<string> set = new hashset<>();\n        set.addall(resourceids);\n        sysrole.setresourcesids(set);\n        return sysrole;\n    }\n\n    @override\n    public ipage<sysrole> query(page<sysrole> page, sysrolequeryform sysrolequeryform) {\n        lambdaquerywrapper<sysrole> querywrapper = new querywrapper<sysrole>().lambda();\n        if (stringutils.isnotblank(sysrolequeryform.getrolename())) {\n            querywrapper.like(sysrole::getrolename, sysrolequeryform.getrolename());\n        }\n        return this.page(page, querywrapper);\n    }\n}\n\n\n# 资源\n\nimport com.baomidou.mybatisplus.core.conditions.query.querywrapper;\nimport com.baomidou.mybatisplus.core.toolkit.collectionutils;\nimport com.baomidou.mybatisplus.extension.service.impl.serviceimpl;\nimport com.springboot.common.core.entity.vo.result;\nimport com.springboot.system.dao.sysresourcemapper;\nimport com.springboot.system.entity.po.sysresource;\nimport com.springboot.system.entity.po.sysrole;\nimport com.springboot.system.service.sysresourceservice;\nimport com.springboot.system.service.sysroleresourceservice;\nimport com.springboot.system.service.sysroleservice;\nimport org.apache.commons.lang.stringutils;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.service;\n\nimport java.util.arraylist;\nimport java.util.collection;\nimport java.util.hashset;\nimport java.util.list;\n\nimport static java.util.comparator.comparing;\n\n@service\npublic class sysresourceserviceimpl extends serviceimpl<sysresourcemapper, sysresource> implements sysresourceservice {\n\n\n    @autowired\n    sysroleservice roleservice;\n\n    @autowired\n    sysroleresourceservice roleresourceservice;\n\n\n    /**\n     * 根据角色id查询资源\n     *\n     * @param roleid 用角色id\n     * @return\n     */\n    public list<sysresource> getresourcebyroleid(string roleid) {\n        list<string> resourceids = roleresourceservice.getresourceidsbyroleid(roleid);\n        if (collectionutils.isempty(resourceids)) {\n            return null;\n        }\n        return (list<sysresource>) this.listbyids(resourceids);\n    }\n\n\n    /**\n     * 根据角色id查询后端资源\n     *\n     * @param roleid 用角色id\n     * @return\n     */\n    public list<sysresource> getresourcebyroleid(string roleid, string menutype) {\n        list<string> resourceids = roleresourceservice.getresourceidsbyroleid(roleid);\n        if (collectionutils.isempty(resourceids)) {\n            return null;\n        }\n        arraylist<sysresource> list = new arraylist<>();\n        collection<sysresource> sysresources = this.listbyids(resourceids);\n        sysresources.foreach(sysresource -> {\n            if (stringutils.isnotblank(sysresource.getpermission()) || stringutils.equals(menutype, sysresource.getmenutype())) {\n                list.add(sysresource);\n            }\n        });\n        return list;\n    }\n\n    /**\n     * 根据id删除资源\n     *\n     * @param id 资源id\n     * @return\n     */\n    @override\n    public result delete(string id) {\n        list<sysresource> list = this.list(new querywrapper<sysresource>().lambda().eq(sysresource::getparentid, id));\n        if (collectionutils.isnotempty(list)) {\n            return result.fail("存在下级菜单，不允许删除！");\n        }\n        this.removebyid(id);\n        return result.success();\n    }\n\n\n    /**\n     * 获取资源列表\n     * 通过树的形式返回\n     */\n    @override\n    public list<sysresource> getlist() {\n        list<sysresource> resourcelist = this.list();\n        if (collectionutils.isempty(resourcelist)) {\n            return null;\n        }\n        //拿到顶级菜单\n        arraylist<sysresource> list = new arraylist<>();\n        for (sysresource sysresource : resourcelist) {\n            if (stringutils.equals(sysresource.getparentid(), "0")) {\n                list.add(sysresource);\n            }\n        }\n        list.sort(comparing(sysresource::getordernumber));\n        //循环顶级菜单设置子菜单\n        for (sysresource sysresource : list) {\n            sysresource.setchildren(getresourcechildren(sysresource.getid(), resourcelist));\n        }\n        return list;\n    }\n\n    /**\n     * 根据用户id查询资源\n     *\n     * @param userid   用户id\n     * @param menutype 菜单类型\n     * @return: 资源列表\n     */\n    @override\n    public list<sysresource> getbyuserid(string userid, string menutype) {\n        list<sysrole> rolelist = roleservice.getrolebyuserid(userid);\n        if (collectionutils.isempty(rolelist)) {\n            return null;\n        }\n        hashset<string> set = new hashset<>();\n        rolelist.foreach(sysrole -> {\n            list<string> resourceids = roleresourceservice.getresourceidsbyroleid(sysrole.getid());\n            set.addall(resourceids);\n        });\n        if (collectionutils.isempty(set)) {\n            return new arraylist<>();\n        }\n        list<sysresource> resourcelist = this.list(new querywrapper<sysresource>().lambda().eq(sysresource::getmenutype, menutype).in(sysresource::getid, set));\n        //拿到顶级菜单\n        arraylist<sysresource> list = new arraylist<>();\n        for (sysresource sysresource : resourcelist) {\n            if (stringutils.equals(sysresource.getparentid(), "0")) {\n                list.add(sysresource);\n            }\n        }\n        list.sort(comparing(sysresource::getordernumber));\n        //循环顶级菜单设置子菜单\n        for (sysresource sysresource : list) {\n            sysresource.setchildren(getresourcechildren(sysresource.getid(), resourcelist));\n        }\n        return list;\n    }\n\n    /**\n     * 递归查询资源\n     *\n     * @param list 顶级资源列表\n     * @return: 资源列表\n     */\n    private list<sysresource> getresourcechildren(string id, list<sysresource> list) {\n        list<sysresource> childrenlist = new arraylist<>();\n        if (collectionutils.isempty(list)) {\n            return null;\n        }\n        for (sysresource sysresource : list) {\n            if (stringutils.equals(sysresource.getparentid(), id)) {\n                childrenlist.add(sysresource);\n            }\n        }\n        for (sysresource sysresource : childrenlist) {\n            sysresource.setchildren(getresourcechildren(sysresource.getid(), list));\n        }\n        childrenlist.sort(comparing(sysresource::getordernumber));\n        return childrenlist;\n    }\n\n}\n\n\n# 用户角色关联\n\nimport com.baomidou.mybatisplus.core.conditions.query.querywrapper;\nimport com.baomidou.mybatisplus.core.toolkit.collectionutils;\nimport com.baomidou.mybatisplus.extension.service.impl.serviceimpl;\nimport com.springboot.system.dao.sysuserrolemapper;\nimport com.springboot.system.entity.po.sysuserrole;\nimport com.springboot.system.service.sysuserroleservice;\nimport org.springframework.stereotype.service;\nimport org.springframework.transaction.annotation.transactional;\n\nimport java.util.arraylist;\nimport java.util.list;\nimport java.util.set;\nimport java.util.stream.collectors;\n\n@service\npublic class sysuserroleserviceimpl extends serviceimpl<sysuserrolemapper, sysuserrole> implements sysuserroleservice {\n\n\n    /**\n     * 根据用户id查询角色ids\n     *\n     * @param userid 用户id\n     * @return\n     */\n    @override\n    public list<string> getroleidsbyuserid(string userid) {\n        list<sysuserrole> sysuserroles = this.list(new querywrapper<sysuserrole>().lambda().eq(sysuserrole::getuserid, userid));\n        if (sysuserroles.isempty()) {\n            return new arraylist<>();\n        }\n        arraylist<string> list = new arraylist<>();\n        for (sysuserrole sysuserrole : sysuserroles) {\n            list.add(sysuserrole.getroleid());\n        }\n        return list;\n    }\n\n\n    @override\n    @transactional\n    public boolean savebatch(string userid, set<string> roleids) {\n        if (collectionutils.isempty(roleids)) {\n            return false;\n        }\n        removebyuserid(userid);\n        set<sysuserrole> userroles = roleids.stream().map(roleid -> new sysuserrole(null, userid, roleid, "n", null, null, null, null)).collect(collectors.toset());\n        return savebatch(userroles);\n    }\n\n    @override\n    @transactional\n    public boolean removebyuserid(string userid) {\n        return remove(new querywrapper<sysuserrole>().lambda().eq(sysuserrole::getuserid, userid));\n    }\n\n    @override\n    public list<string> getuseridsbyroleid(string roleid) {\n        list<sysuserrole> sysuserroles = this.list(new querywrapper<sysuserrole>().lambda().eq(sysuserrole::getroleid, roleid));\n        if (sysuserroles.isempty()) {\n            return new arraylist<>();\n        }\n        arraylist<string> list = new arraylist<>();\n        for (sysuserrole sysuserrole : sysuserroles) {\n            list.add(sysuserrole.getuserid());\n        }\n        return list;\n    }\n\n}\n\n\n# 角色资源关联\n\nimport com.baomidou.mybatisplus.core.conditions.query.querywrapper;\nimport com.baomidou.mybatisplus.core.toolkit.collectionutils;\nimport com.baomidou.mybatisplus.extension.service.impl.serviceimpl;\nimport com.springboot.system.dao.sysroleresourcemapper;\nimport com.springboot.system.entity.po.sysroleresource;\nimport com.springboot.system.service.sysroleresourceservice;\nimport org.springframework.stereotype.service;\n\nimport java.util.arraylist;\nimport java.util.list;\nimport java.util.set;\nimport java.util.stream.collectors;\n\n@service\npublic class sysroleresourceserviceimpl extends serviceimpl<sysroleresourcemapper, sysroleresource> implements sysroleresourceservice {\n\n\n    /**\n     * 根据角色id查询资源ids\n     *\n     * @param roleid 用角色id\n     * @return\n     */\n    @override\n    public list<string> getresourceidsbyroleid(string roleid) {\n        list<sysroleresource> sysroleresources = this.list(new querywrapper<sysroleresource>().lambda().eq(sysroleresource::getroleid, roleid));\n        arraylist<string> list = new arraylist<>();\n        for (sysroleresource sysroleresource : sysroleresources) {\n            list.add(sysroleresource.getresourceid());\n        }\n        return list;\n    }\n\n    @override\n    public boolean savebatch(string roleid, set<string> resourceids) {\n        if (collectionutils.isempty(resourceids)) {\n            return false;\n        }\n        this.removebyroleid(roleid);\n        set<sysroleresource> userroles = resourceids.stream().map(resourceid -> new sysroleresource(null, roleid, resourceid, "n", null, null, null, null)).collect(collectors.toset());\n        return savebatch(userroles);\n    }\n\n\n    public boolean removebyroleid(string roleid) {\n        querywrapper<sysroleresource> querywrapper = new querywrapper<>();\n        querywrapper.lambda().eq(sysroleresource::getroleid, roleid);\n        return remove(querywrapper);\n    }\n\n}\n\n\n# 登录\n\nimport com.baomidou.mybatisplus.core.toolkit.collectionutils;\nimport com.springboot.system.entity.sysuserdetails;\nimport com.springboot.system.entity.po.sysrole;\nimport com.springboot.system.entity.po.sysuser;\nimport com.springboot.system.service.sysuserservice;\nimport org.springframework.beans.beanutils;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.security.core.grantedauthority;\nimport org.springframework.security.core.authority.simplegrantedauthority;\nimport org.springframework.security.core.userdetails.userdetails;\nimport org.springframework.security.core.userdetails.userdetailsservice;\nimport org.springframework.security.core.userdetails.usernamenotfoundexception;\nimport org.springframework.stereotype.service;\n\nimport java.util.hashset;\nimport java.util.list;\nimport java.util.set;\n\n/**\n * 用户登录service\n */\n@service\npublic class sysuserdetailsservice implements userdetailsservice {\n\n    @autowired\n    private sysuserservice sysuserservice;\n\n    /**\n     * 根据用户名查用户信息\n     *\n     * @param username 用户名\n     * @return 用户详细信息\n     */\n    @override\n    public userdetails loaduserbyusername(string username) throws usernamenotfoundexception {\n        sysuser sysuser = sysuserservice.finduserbyusername(username);\n        if (sysuser != null) {\n            sysuserdetails sysuserdetails = new sysuserdetails();\n            beanutils.copyproperties(sysuser, sysuserdetails);\n\n            set<grantedauthority> authorities = new hashset<>(); // 角色集合\n\n            list<sysrole> rolelist = sysuserservice.findrolebyuserid(sysuserdetails.getid());\n            if (collectionutils.isnotempty(rolelist)) {\n                rolelist.foreach(role -> {\n                    authorities.add(new simplegrantedauthority("role_" + role.getrolecode()));\n                });\n            }\n            sysuserdetails.setauthorities(authorities);\n\n            return sysuserdetails;\n        }\n        return null;\n    }\n}\n\n\n\n# controller层\n\n# 用户\n\nimport com.baomidou.mybatisplus.core.metadata.ipage;\nimport com.springboot.admin.service.ioutsideauditschemeservice;\nimport com.springboot.aop.annotation.syslog;\nimport com.springboot.aop.enums.sysoperatelogenum;\nimport com.springboot.common.core.entity.vo.result;\nimport com.springboot.system.entity.form.sysuserqueryform;\nimport com.springboot.system.entity.po.sysuser;\nimport com.springboot.system.entity.vo.sysuservo;\nimport com.springboot.system.service.sysuserservice;\nimport io.swagger.annotations.apiimplicitparam;\nimport io.swagger.annotations.apioperation;\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.security.access.prepost.preauthorize;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.httpservletresponse;\nimport javax.validation.valid;\n\n\n@slf4j\n@restcontroller\n@requestmapping("/user")\npublic class sysusercontroller {\n\n    @autowired\n    sysuserservice userservice;\n    @autowired\n    ioutsideauditschemeservice outsideauditschemeservice;\n\n    @apioperation(value = "根据token获取用户", notes = "根据token获取用户")\n    @apiimplicitparam(name = "token", value = "token", required = true, datatype = "string")\n    @preauthorize(value = "haspermission(\'/user/info\',\'sys:user:info\')")\n    @postmapping("/info")\n    public result info(@requestparam("token") string token) {\n        log.debug("get user with token:{}", token);\n        return userservice.finduserbytoken(token);\n    }\n\n    @apioperation(value = "新增用户", notes = "新增一个用户")\n    @apiimplicitparam(name = "sysuser", value = "新增用户sysuser表单", required = true, datatype = "sysuser")\n    @syslog(operatemodel = "用户管理", operatetype = sysoperatelogenum.insert)\n    @preauthorize(value = "haspermission(\'/user/add\',\'sys:user:add\')")\n    @postmapping("/add")\n    public result add(@valid @requestbody sysuser sysuser) {\n        log.debug("add user with:{}", sysuser);\n        return userservice.add(sysuser);\n    }\n\n    @apioperation(value = "修改用户", notes = "修改指定用户信息")\n    @apiimplicitparam(name = "sysuser", value = "用户实体", required = true, datatype = "sysuser")\n    @syslog(operatemodel = "用户管理", operatetype = sysoperatelogenum.update)\n    @preauthorize(value = "haspermission(\'/user/update\',\'sys:user:update\')")\n    @putmapping(value = "/update")\n    public result update(@valid @requestbody sysuser sysuser) {\n        log.debug("update user with:{}", sysuser);\n        return userservice.update(sysuser);\n    }\n\n    @apioperation(value = "修改头像", notes = "修改头像")\n    @syslog(operatemodel = "用户管理", operatetype = sysoperatelogenum.update)\n    @preauthorize(value = "haspermission(\'/user/updateavatar\',\'sys:user:updateavatar\')")\n    @putmapping(value = "/updateavatar")\n    public result updateavatar(@requestparam string id,@requestparam string avatar) {\n        log.debug("update avatar with userid:{}", id);\n        return userservice.updateavatar(id,avatar);\n    }\n\n    @apioperation(value = "删除用户", notes = "根据id来指定删除对象，逻辑删除")\n    @syslog(operatemodel = "用户管理", operatetype = sysoperatelogenum.delete)\n    @preauthorize(value = "haspermission(\'/user/delete\',\'sys:user:del\')")\n    @deletemapping(value = "/delete")\n    public result delete(@requestparam string id) {\n        log.debug("delete user for:{}", id);\n        if (outsideauditschemeservice.checkbyuserid(id)) {\n            return result.fail("该用户id在所外审批方案中被使用，无法删除！");\n        }\n        boolean result = userservice.delete(id);\n        if (result) {\n            return result.success();\n        }\n        return result.fail();\n    }\n\n    @apioperation(value = "获取用户", notes = "获取指定用户信息")\n    @preauthorize(value = "haspermission(\'/user/get\',\'sys:user:get\')")\n    @getmapping(value = "/get")\n    public result get(@requestparam string id) {\n        log.debug("get user with id:{}", id);\n        sysuser user = userservice.get(id);\n        sysuservo sysuservo = user.toparam(sysuservo.class);\n        return result.success(sysuservo);\n    }\n\n\n    @apioperation(value = "搜索用户", notes = "根据条件查询用户信息")\n    @apiimplicitparam(name = "sysuserqueryform", value = "用户查询参数", required = true, datatype = "sysuserqueryform")\n    @preauthorize(value = "haspermission(\'/user/query\',\'sys:user:query\')")\n    @postmapping(value = "/query")\n    public result query(@valid @requestbody sysuserqueryform sysuserqueryform) {\n        log.debug("query with sysuserqueryform:{}", sysuserqueryform);\n        ipage<sysuser> uservoipage = userservice.query(sysuserqueryform.getpage(), sysuserqueryform);\n        return result.success(uservoipage);\n    }\n\n    @apioperation(value = "导出用户列表", notes = "导出用户列表")\n    @syslog(operatemodel = "用户管理", operatetype = sysoperatelogenum.export)\n    @preauthorize(value = "haspermission(\'/user/export\',\'sys:user:export\')")\n    @getmapping(value = "/export")\n    public void export(httpservletresponse response) {\n        log.debug("export user list");\n        userservice.exportexcel(response);\n    }\n\n\n    @apioperation(value = "获取用户", notes = "根据角色获取用户")\n    @preauthorize(value = "haspermission(\'/user/getuserbyroleid\',\'sys:user:getuserbyroleid\')")\n    @getmapping(value = "/getuserbyroleid")\n    public result getuserbyrole(@requestparam string roleid) {\n        log.debug("get user roleid:{}", roleid);\n        return userservice.getuserbyroleid(roleid);\n    }\n\n}\n\n\n# 角色\n\nimport com.baomidou.mybatisplus.core.metadata.ipage;\nimport com.springboot.aop.annotation.syslog;\nimport com.springboot.aop.enums.sysoperatelogenum;\nimport com.springboot.common.core.entity.vo.result;\nimport com.springboot.admin.service.ioutsideauditschemeservice;\nimport com.springboot.system.entity.form.sysrolequeryform;\nimport com.springboot.system.entity.po.sysrole;\nimport com.springboot.system.entity.po.sysuser;\nimport com.springboot.system.service.sysroleservice;\nimport io.swagger.annotations.apiimplicitparam;\nimport io.swagger.annotations.apioperation;\nimport lombok.extern.slf4j.slf4j;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.security.access.prepost.preauthorize;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.valid;\n\n@slf4j\n@restcontroller\n@requestmapping("/role")\npublic class sysrolecontroller {\n\n    @autowired\n    sysroleservice roleservice;\n    @autowired\n    ioutsideauditschemeservice outsideauditschemeservice;\n\n\n    @apioperation(value = "新增角色", notes = "新增一个角色")\n    @apiimplicitparam(name = "sysrole", value = "新增角色sysrole表单", required = true, datatype = "sysrole")\n    @syslog(operatemodel = "角色管理", operatetype = sysoperatelogenum.insert)\n    @preauthorize(value = "haspermission(\'/role/add\',\'sys:role:add\')")\n    @postmapping("/add")\n    public result add(@valid @requestbody sysrole sysrole) {\n        log.debug("add role with:{}", sysrole);\n        return roleservice.add(sysrole);\n    }\n\n\n    @apioperation(value = "修改角色", notes = "修改指定角色信息")\n    @apiimplicitparam(name = "sysrole", value = "角色实体", required = true, datatype = "sysrole")\n    @syslog(operatemodel = "角色管理", operatetype = sysoperatelogenum.update)\n    @preauthorize(value = "haspermission(\'/role/update\',\'sys:role:update\')")\n    @putmapping(value = "/update")\n    public result update(@valid @requestbody sysrole sysrole) {\n        log.debug("update role with:{}", sysrole);\n        return roleservice.update(sysrole);\n    }\n\n    @apioperation(value = "删除角色", notes = "根据id来指定删除角色，逻辑删除")\n    @apiimplicitparam(paramtype = "param", name = "id", value = "角色id", required = true, datatype = "string")\n    @syslog(operatemodel = "角色管理", operatetype = sysoperatelogenum.delete)\n    @preauthorize(value = "haspermission(\'/role/delete\',\'sys:role:del\')")\n    @deletemapping(value = "/delete")\n    public result delete(@requestparam string id) {\n        log.debug("delete role for:{}", id);\n        if(outsideauditschemeservice.checkbyroleid(id)){\n            return result.fail("该角色id在所外审批方案中被使用，无法删除！");\n        }\n        return roleservice.delete(id);\n    }\n\n    @apioperation(value = "获取角色", notes = "获取指定角色信息")\n    @apiimplicitparam(paramtype = "param", name = "id", value = "角色id", required = true, datatype = "string")\n    @preauthorize(value = "haspermission(\'/role/get\',\'sys:role:get\')")\n    @getmapping(value = "/get")\n    public result get(@requestparam string id) {\n        log.debug("get role with id:{}", id);\n        sysrole sysrole = roleservice.get(id);\n        return result.success(sysrole);\n    }\n\n\n    @apioperation(value = "搜索角色", notes = "根据条件查询角色信息")\n    @apiimplicitparam(name = "sysrolequeryform", value = "角色查询参数", required = true, datatype = "sysrolequeryform")\n    @preauthorize(value = "haspermission(\'/role/query\',\'sys:role:query\')")\n    @postmapping(value = "/query")\n    public result query(@valid @requestbody sysrolequeryform sysrolequeryform) {\n        log.debug("query with sysrolequeryform:{}", sysrolequeryform);\n        ipage<sysuser> uservoipage = roleservice.query(sysrolequeryform.getpage(), sysrolequeryform);\n        return result.success(uservoipage);\n    }\n\n    @apioperation(value = "查询角色列表", notes = "查询角色列表")\n    @preauthorize(value = "haspermission(\'/role/lsit\',\'sys:role:list\')")\n    @getmapping("/list")\n    public result list() {\n        return result.success(roleservice.getrolelist());\n    }\n\n}\n\n\n# 资源\n\nimport com.springboot.aop.annotation.syslog;\nimport com.springboot.aop.enums.sysoperatelogenum;\nimport com.springboot.common.core.entity.vo.result;\nimport com.springboot.system.entity.po.sysresource;\nimport com.springboot.system.service.sysresourceservice;\nimport io.swagger.annotations.apiimplicitparam;\nimport io.swagger.annotations.apioperation;\nimport lombok.extern.slf4j.slf4j;\nimport org.apache.commons.lang.stringutils;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.security.access.prepost.preauthorize;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.valid;\nimport java.util.list;\n\n@slf4j\n@restcontroller\n@requestmapping("/resource")\npublic class sysresourcecontroller {\n\n    @autowired\n    sysresourceservice resourceservice;\n\n\n    @apioperation(value = "新增资源", notes = "新增一个资源")\n    @apiimplicitparam(name = "sysresource", value = "新增资源sysresource表单", required = true, datatype = "sysresource")\n    @syslog(operatemodel = "菜单资源管理", operatetype = sysoperatelogenum.insert)\n    @preauthorize(value = "haspermission(\'/resource/add\',\'sys:resource:add\')")\n    @postmapping("/add")\n    public result add(@valid @requestbody sysresource sysresource) {\n        log.debug("add resource with:{}", sysresource);\n        if (stringutils.isblank(sysresource.getparentid())) {\n            sysresource.setparentid("0");\n        }\n        boolean result = resourceservice.save(sysresource);\n        if (result) {\n            return result.success();\n        }\n        return result.fail();\n    }\n\n    @apioperation(value = "修改资源", notes = "修改指定资源信息")\n    @apiimplicitparam(name = "sysresource", value = "资源实体", required = true, datatype = "sysresource")\n    @syslog(operatemodel = "菜单资源管理", operatetype = sysoperatelogenum.update)\n    @preauthorize(value = "haspermission(\'/resource/update\',\'sys:resource:update\')")\n    @putmapping(value = "/update")\n    public result update(@valid @requestbody sysresource sysresource) {\n        log.debug("update resource with:{}", sysresource);\n        boolean result = resourceservice.updatebyid(sysresource);\n        if (result) {\n            return result.success();\n        }\n        return result.fail();\n    }\n\n    @apioperation(value = "删除资源", notes = "根据id来指定删除对象，逻辑删除")\n    @apiimplicitparam(paramtype = "param", name = "id", value = "资源id", required = true, datatype = "string")\n    @syslog(operatemodel = "菜单资源管理", operatetype = sysoperatelogenum.delete)\n    @preauthorize(value = "haspermission(\'/resource/delete\',\'sys:resource:del\')")\n    @deletemapping(value = "/delete")\n    public result delete(@requestparam string id) {\n        log.debug("delete resource for:{}", id);\n        return resourceservice.delete(id);\n    }\n\n    @apioperation(value = "获取资源", notes = "获取指定资源信息")\n    @apiimplicitparam(paramtype = "param", name = "id", value = "资源id", required = true, datatype = "string")\n    @preauthorize(value = "haspermission(\'/resource/get\',\'sys:resource:get\')")\n    @getmapping(value = "/get")\n    public result get(@requestparam string id) {\n        log.debug("get resource with id:{}", id);\n        sysresource sysresource = resourceservice.getbyid(id);\n        return result.success(sysresource);\n    }\n\n\n    @apioperation(value = "资源列表", notes = "资源列表")\n    @preauthorize(value = "haspermission(\'/resource/list\',\'sys:resource:list\')")\n    @getmapping(value = "/list")\n    public result list() {\n        log.debug("query resource list");\n        return result.success(resourceservice.getlist());\n    }\n\n\n    @apioperation(value = "获取资源", notes = "获取指定资源信息")\n    @preauthorize(value = "haspermission(\'/resource/getbyuserid\',\'sys:resource:getbyuserid\')")\n    @getmapping(value = "/getbyuserid")\n    public result getbyuserid(@requestparam string userid, @requestparam string menutype) {\n        log.debug("get resource with userid:{}", userid);\n        list<sysresource> resourcelist = resourceservice.getbyuserid(userid, menutype);\n        return result.success(resourcelist);\n    }\n\n}\n\n\n# 登录\n\nimport com.springboot.common.core.entity.vo.result;\nimport com.springboot.system.entity.sysuserdetails;\nimport com.springboot.system.entity.po.sysuser;\nimport com.springboot.system.provider.userauthenticationprovider;\nimport com.springboot.system.service.impl.sysuserdetailsservice;\nimport com.springboot.system.util.jwttokenutil;\nimport io.swagger.annotations.apioperation;\nimport lombok.sneakythrows;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.security.authentication.usernamepasswordauthenticationtoken;\nimport org.springframework.security.core.userdetails.userdetails;\nimport org.springframework.web.bind.annotation.postmapping;\nimport org.springframework.web.bind.annotation.requestbody;\nimport org.springframework.web.bind.annotation.requestparam;\nimport org.springframework.web.bind.annotation.restcontroller;\n\nimport javax.servlet.http.httpservletrequest;\nimport javax.validation.valid;\nimport java.util.base64;\n\n\n@restcontroller\npublic class logincontroller {\n\n    @autowired\n    private sysuserdetailsservice userdetailsservice;\n\n    @autowired\n    private userauthenticationprovider authenticationprovider;\n\n    /**\n     * 使用 /login 请求获得 token, /login 不经过拦截器\n     */\n    @sneakythrows\n    @postmapping("/login")\n    @apioperation(value = "登录接口", notes = "登录接口")\n    public result login(@valid @requestbody sysuser user, httpservletrequest request) {\n\n        // 密码通过base64解码\n        byte[] decode = base64.getdecoder().decode(user.getpassword());\n        string password = new string(decode, "utf-8");\n\n        userdetails userdetails = userdetailsservice.loaduserbyusername(user.getusername());\n        // 通过 username 和 password 构建一个 authentication 对象\n        usernamepasswordauthenticationtoken authrequest = new usernamepasswordauthenticationtoken(user.getusername(), password);\n        authenticationprovider.authenticate(authrequest, request);\n        string accesstoken = jwttokenutil.createaccesstoken((sysuserdetails) userdetails);\n        return result.success(accesstoken);\n    }\n\n    @apioperation(value = "刷新token接口", notes = "刷新token接口")\n    @postmapping("/refreshtoken")\n    public result refreshtoken(@requestparam string token) {\n        return result.success(jwttokenutil.refreshtoken(token));\n    }\n\n}\n',charsets:{cjk:!0}},{title:"Java设计模式",frontmatter:{title:"Java设计模式",date:"2022-04-08T10:13:15.000Z",permalink:"/pages/44301a/",categories:["学习资料","Java实战","设计模式"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/20.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",relativePath:"学习资料/03.Java/20.设计模式/01.Java设计模式.md",key:"v-1f6f6185",path:"/pages/44301a/",headersStr:null,content:"Java设计模式",normalizedContent:"java设计模式",charsets:{cjk:!0}},{title:"SpringCloud开始搭建",frontmatter:{title:"SpringCloud开始搭建",date:"2022-05-21T10:05:10.000Z",permalink:"/pages/723081/",categories:["学习资料","Java","SpringCloud实战"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/25.SpringCloud%E5%AE%9E%E6%88%98/01.SpringCloud%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA.html",relativePath:"学习资料/03.Java/25.SpringCloud实战/01.SpringCloud开始搭建.md",key:"v-55f08350",path:"/pages/723081/",headers:[{level:2,title:"环境准备（nacos）",slug:"环境准备-nacos",normalizedTitle:"环境准备（nacos）",charIndex:2},{level:3,title:"单机启动（windows）",slug:"单机启动-windows",normalizedTitle:"单机启动（windows）",charIndex:27},{level:3,title:"访问",slug:"访问",normalizedTitle:"访问",charIndex:154},{level:2,title:"新建maven项目（父工程）",slug:"新建maven项目-父工程",normalizedTitle:"新建maven项目（父工程）",charIndex:206},{level:3,title:"添加依赖",slug:"添加依赖",normalizedTitle:"添加依赖",charIndex:225}],headersStr:"环境准备（nacos） 单机启动（windows） 访问 新建maven项目（父工程） 添加依赖",content:'# 环境准备（nacos）\n\nnacos下载\n\n\n# 单机启动（windows）\n\n 1. 命令启动\n\n# 进入bin目录\nstartup.cmd -m standalone\n\n\n 2. 双击starup.cmd启动\n\n# 修改starup.cmd文件\nset MODE="standalone"\n\n\n\n# 访问\n\nlocalhost:8848/nacos\n\n> 账号：nacos\n> 密码：nacos\n\n\n# 新建maven项目（父工程）\n\n\n# 添加依赖\n\nspringBoot、springCloud、springCloudAlibaba对应版本关系\n\n<properties>\n    <spring-boot-version>2.6.3</spring-boot-version>\n    <spring-cloud-version>2021.0.1</spring-cloud-version>\n    <spring-cloud-alibaba-version>2021.0.1.0</spring-cloud-alibaba-version>\n    <java.version>1.8</java.version>\n    <spring-boot-maven-plugin-version>2.6.3</spring-boot-maven-plugin-version>\n</properties>\n\n\x3c!-- 引入 Spring Boot、Spring Cloud、Spring Cloud Alibaba 三者 BOM 文件，进行依赖版本的管理，防止不兼容 --\x3e\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-parent</artifactId>\n            <version>${spring-boot-version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>${spring-cloud-version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n            <version>${spring-cloud-alibaba-version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n    \x3c!-- 引入 Spring Cloud Alibaba Nacos Discovery 相关依赖，将 Nacos 作为注册中心，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupId>com.alibaba.cloud</groupId>\n        <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n    </dependency>\n</dependencies>\n\n',normalizedContent:'# 环境准备（nacos）\n\nnacos下载\n\n\n# 单机启动（windows）\n\n 1. 命令启动\n\n# 进入bin目录\nstartup.cmd -m standalone\n\n\n 2. 双击starup.cmd启动\n\n# 修改starup.cmd文件\nset mode="standalone"\n\n\n\n# 访问\n\nlocalhost:8848/nacos\n\n> 账号：nacos\n> 密码：nacos\n\n\n# 新建maven项目（父工程）\n\n\n# 添加依赖\n\nspringboot、springcloud、springcloudalibaba对应版本关系\n\n<properties>\n    <spring-boot-version>2.6.3</spring-boot-version>\n    <spring-cloud-version>2021.0.1</spring-cloud-version>\n    <spring-cloud-alibaba-version>2021.0.1.0</spring-cloud-alibaba-version>\n    <java.version>1.8</java.version>\n    <spring-boot-maven-plugin-version>2.6.3</spring-boot-maven-plugin-version>\n</properties>\n\n\x3c!-- 引入 spring boot、spring cloud、spring cloud alibaba 三者 bom 文件，进行依赖版本的管理，防止不兼容 --\x3e\n<dependencymanagement>\n    <dependencies>\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-parent</artifactid>\n            <version>${spring-boot-version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupid>org.springframework.cloud</groupid>\n            <artifactid>spring-cloud-dependencies</artifactid>\n            <version>${spring-cloud-version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupid>com.alibaba.cloud</groupid>\n            <artifactid>spring-cloud-alibaba-dependencies</artifactid>\n            <version>${spring-cloud-alibaba-version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencymanagement>\n\n<dependencies>\n    \x3c!-- 引入 spring cloud alibaba nacos discovery 相关依赖，将 nacos 作为注册中心，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupid>com.alibaba.cloud</groupid>\n        <artifactid>spring-cloud-starter-alibaba-nacos-discovery</artifactid>\n    </dependency>\n</dependencies>\n\n',charsets:{cjk:!0}},{title:"SpringCloud配置中心Config",frontmatter:{title:"SpringCloud配置中心Config",date:"2022-05-21T10:37:41.000Z",permalink:"/pages/73ae92/",categories:["学习资料","Java","SpringCloud实战"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/25.SpringCloud%E5%AE%9E%E6%88%98/02.SpringCloud%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83Config.html",relativePath:"学习资料/03.Java/25.SpringCloud实战/02.SpringCloud配置中心Config.md",key:"v-5889e6e6",path:"/pages/73ae92/",headers:[{level:2,title:"新建config配置模块",slug:"新建config配置模块",normalizedTitle:"新建config配置模块",charIndex:2},{level:3,title:"添加依赖",slug:"添加依赖",normalizedTitle:"添加依赖",charIndex:19},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:10},{level:2,title:"在nacos上添加配置",slug:"在nacos上添加配置",normalizedTitle:"在nacos上添加配置",charIndex:1710},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:1868},{level:3,title:"启动类",slug:"启动类",normalizedTitle:"启动类",charIndex:1875},{level:3,title:"controller",slug:"controller",normalizedTitle:"controller",charIndex:2370},{level:3,title:"访问",slug:"访问",normalizedTitle:"访问",charIndex:2403}],headersStr:"新建config配置模块 添加依赖 配置 在nacos上添加配置 使用 启动类 controller 访问",content:'# 新建config配置模块\n\n\n# 添加依赖\n\n<properties>\n    <spring-cloud-alibaba-nacos-config-version>2.2.0.RELEASE</spring-cloud-alibaba-nacos-config-version>\n</properties>\n\n<dependencies>\n    \x3c!-- 引入 SpringMVC 相关依赖，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    \x3c!--配置管理--\x3e\n    <dependency>\n        <groupId>com.alibaba.cloud</groupId>\n        <artifactId>spring-cloud-alibaba-nacos-config</artifactId>\n        <version>${spring-cloud-alibaba-nacos-config-version}</version>\n    </dependency>\n\n    \x3c!--springBoot版本问题已经不支持bootstrap.yml配置文件，需手动添加依赖--\x3e\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-bootstrap</artifactId>\n    </dependency>\n\n</dependencies>\n\n\n\n# 配置\n\n# application.yml\n\n# 当前版本原本是可以直接用import方式引用的，尝试了不行。所以还是用回bootstrap.yml方式引用\n#server:\n#  port: 8081\n#spring:\n#  profiles:\n#    active: dev\n#  application:\n#    name: config\n#  cloud:\n#    nacos:\n#      discovery:\n#        server-addr: localhost:8848\n#      config:\n#        group: DEFAULT_GROUP\n#        server-addr: localhost:8848\n#        file-extension: yml #配置的格式 yml\n#  config:\n#    import:\n        # 导入nacos配置中心的配置文件\n#      - optional:nacos:config.yaml\n#      - optional:nacos:config.yml  # 监听 DEFAULT_GROUP:config.yml\n#      - optional:nacos:config-dev.yml&refreshEnabled=true # 不开启动态刷新\n#      - nacos:config-dev.yaml # 在拉取nacos配置异常时会快速失败，会导致 spring 容器启动失败\n\n\n# bootstrap.yml\n\nspring:\n  application:\n    name: config\n  cloud:\n    nacos:\n      config:\n        server-addr: localhost:8848\n        group: DEFAULT_GROUP\n        file-extension: yml\n  profiles:\n    active: dev\n\n\n\n# 在nacos上添加配置\n\nconfig-dev.yml\n\nserver:\n  port: 8081\n\nspring:\n  appliation:\n    name: config\n\nuseLocalCache: true\n\nuser:\n  name: nacos-config-yml\n  age: 68\n\n\n\n# 使用\n\n\n# 启动类\n\n可以查看是否读取到nacos上的配置信息\n\n@SpringBootApplication\npublic class ConfigApplication {\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext applicationContext = SpringApplication.run(ConfigApplication.class);\n        String userName = applicationContext.getEnvironment().getProperty("user.name");\n        String userAge = applicationContext.getEnvironment().getProperty("user.age");\n        System.err.println("user name :"+userName+"; age: "+userAge);\n    }\n\n}\n\n\n\n# controller\n\n修改nacos上的配置文件，不用重启服务，访问接口可以看到配置生效\n\n@RestController\n@RequestMapping("/config")\n@RefreshScope\npublic class ConfigController {\n\n    @Value("${useLocalCache:false}")\n    private boolean useLocalCache;\n\n    @RequestMapping("/get")\n    public boolean get() {\n        return useLocalCache;\n    }\n}\n\n\n\n# 访问\n\nlocalhost:8081/config/get',normalizedContent:'# 新建config配置模块\n\n\n# 添加依赖\n\n<properties>\n    <spring-cloud-alibaba-nacos-config-version>2.2.0.release</spring-cloud-alibaba-nacos-config-version>\n</properties>\n\n<dependencies>\n    \x3c!-- 引入 springmvc 相关依赖，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-web</artifactid>\n    </dependency>\n    \x3c!--配置管理--\x3e\n    <dependency>\n        <groupid>com.alibaba.cloud</groupid>\n        <artifactid>spring-cloud-alibaba-nacos-config</artifactid>\n        <version>${spring-cloud-alibaba-nacos-config-version}</version>\n    </dependency>\n\n    \x3c!--springboot版本问题已经不支持bootstrap.yml配置文件，需手动添加依赖--\x3e\n    <dependency>\n        <groupid>org.springframework.cloud</groupid>\n        <artifactid>spring-cloud-starter-bootstrap</artifactid>\n    </dependency>\n\n</dependencies>\n\n\n\n# 配置\n\n# application.yml\n\n# 当前版本原本是可以直接用import方式引用的，尝试了不行。所以还是用回bootstrap.yml方式引用\n#server:\n#  port: 8081\n#spring:\n#  profiles:\n#    active: dev\n#  application:\n#    name: config\n#  cloud:\n#    nacos:\n#      discovery:\n#        server-addr: localhost:8848\n#      config:\n#        group: default_group\n#        server-addr: localhost:8848\n#        file-extension: yml #配置的格式 yml\n#  config:\n#    import:\n        # 导入nacos配置中心的配置文件\n#      - optional:nacos:config.yaml\n#      - optional:nacos:config.yml  # 监听 default_group:config.yml\n#      - optional:nacos:config-dev.yml&refreshenabled=true # 不开启动态刷新\n#      - nacos:config-dev.yaml # 在拉取nacos配置异常时会快速失败，会导致 spring 容器启动失败\n\n\n# bootstrap.yml\n\nspring:\n  application:\n    name: config\n  cloud:\n    nacos:\n      config:\n        server-addr: localhost:8848\n        group: default_group\n        file-extension: yml\n  profiles:\n    active: dev\n\n\n\n# 在nacos上添加配置\n\nconfig-dev.yml\n\nserver:\n  port: 8081\n\nspring:\n  appliation:\n    name: config\n\nuselocalcache: true\n\nuser:\n  name: nacos-config-yml\n  age: 68\n\n\n\n# 使用\n\n\n# 启动类\n\n可以查看是否读取到nacos上的配置信息\n\n@springbootapplication\npublic class configapplication {\n\n    public static void main(string[] args) {\n        configurableapplicationcontext applicationcontext = springapplication.run(configapplication.class);\n        string username = applicationcontext.getenvironment().getproperty("user.name");\n        string userage = applicationcontext.getenvironment().getproperty("user.age");\n        system.err.println("user name :"+username+"; age: "+userage);\n    }\n\n}\n\n\n\n# controller\n\n修改nacos上的配置文件，不用重启服务，访问接口可以看到配置生效\n\n@restcontroller\n@requestmapping("/config")\n@refreshscope\npublic class configcontroller {\n\n    @value("${uselocalcache:false}")\n    private boolean uselocalcache;\n\n    @requestmapping("/get")\n    public boolean get() {\n        return uselocalcache;\n    }\n}\n\n\n\n# 访问\n\nlocalhost:8081/config/get',charsets:{cjk:!0}},{title:"SpringCloud服务注册Discovery",frontmatter:{title:"SpringCloud服务注册Discovery",date:"2022-05-21T11:39:58.000Z",permalink:"/pages/90be9f/",categories:["学习资料","Java","SpringCloud实战"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/25.SpringCloud%E5%AE%9E%E6%88%98/03.SpringCloud%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8CDiscovery.html",relativePath:"学习资料/03.Java/25.SpringCloud实战/03.SpringCloud服务注册Discovery.md",key:"v-2c7c7647",path:"/pages/90be9f/",headers:[{level:2,title:"新建provider服务提供模块",slug:"新建provider服务提供模块",normalizedTitle:"新建provider服务提供模块",charIndex:2},{level:3,title:"添加依赖",slug:"添加依赖",normalizedTitle:"添加依赖",charIndex:23},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:79},{level:3,title:"启动类",slug:"启动类",normalizedTitle:"启动类",charIndex:682},{level:3,title:"controller",slug:"controller",normalizedTitle:"controller",charIndex:886},{level:2,title:"新建consumer服务消费模块",slug:"新建consumer服务消费模块",normalizedTitle:"新建consumer服务消费模块",charIndex:1108},{level:3,title:"添加依赖",slug:"添加依赖-2",normalizedTitle:"添加依赖",charIndex:23},{level:3,title:"配置",slug:"配置-2",normalizedTitle:"配置",charIndex:79},{level:3,title:"启动类",slug:"启动类-2",normalizedTitle:"启动类",charIndex:682},{level:3,title:"controller",slug:"controller-2",normalizedTitle:"controller",charIndex:886},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:2434},{level:3,title:"访问",slug:"访问",normalizedTitle:"访问",charIndex:2476}],headersStr:"新建provider服务提供模块 添加依赖 配置 启动类 controller 新建consumer服务消费模块 添加依赖 配置 启动类 controller 使用 访问",content:'# 新建provider服务提供模块\n\n\n# 添加依赖\n\n<dependencies>\n    \x3c!-- 引入 SpringMVC 相关依赖，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    \x3c!-- 引入 Spring Cloud Alibaba Nacos Discovery 相关依赖，将 Nacos 作为注册中心，并实现对其的自动配置 --\x3e\n    \x3c!-- 最好在父工程引入，子工程就不需在引入了 --\x3e\n    <dependency>\n        <groupId>com.alibaba.cloud</groupId>\n        <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n    </dependency>\n</dependencies>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8082\n\nspring:\n  application:\n    name: provider\n\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n\n\n\n# 启动类\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class ProviderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProviderApplication.class);\n    }\n\n}\n\n\n\n# controller\n\n@RestController\npublic class ProvideController {\n\n    @GetMapping(value = "/echo/{string}")\n    public String echo(@PathVariable String string) {\n        return "Hello Nacos Discovery " + string;\n    }\n\n}\n\n\n\n# 新建consumer服务消费模块\n\n\n# 添加依赖\n\n<dependencies>\n    \x3c!-- 引入 SpringMVC 相关依赖，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    \x3c!-- 引入 Spring Cloud Alibaba Nacos Discovery 相关依赖，将 Nacos 作为注册中心，并实现对其的自动配置 --\x3e\n    \x3c!-- 最好在父工程引入，子工程就不需在引入了 --\x3e\n    <dependency>\n        <groupId>com.alibaba.cloud</groupId>\n        <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n    </dependency>\n</dependencies>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8083\n\nspring:\n  application:\n    name: consumer\n\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n\n\n\n# 启动类\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class ConsumerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ConsumerApplication.class);\n    }\n\n    //实例化 RestTemplate 实例\n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n\n}\n\n\n\n# controller\n\n@RestController\npublic class ConsumeController {\n\n    @Value("${spring.application.name}")\n    private String name;\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    @Autowired\n    private DiscoveryClient discoveryClient;\n\n    @GetMapping("/echo/app-name")\n    public String echoAppName() {\n        //使用 LoadBalanceClient 和 RestTemolate 结合的方式来访问\n        List<ServiceInstance> instances = discoveryClient.getInstances("provider");\n        // 选择第一个\n        ServiceInstance instance = instances.size() > 0 ? instances.get(0) : null;\n        String url = String.format("http://%s:%s/echo/%s", instance.getHost(), instance.getPort(), name);\n        System.out.println("request url:" + url);\n        return restTemplate.getForObject(url, String.class);\n    }\n    \n}\n\n\n\n# 使用\n\n\n# 访问\n\nlocalhost:8083/echo/app-name',normalizedContent:'# 新建provider服务提供模块\n\n\n# 添加依赖\n\n<dependencies>\n    \x3c!-- 引入 springmvc 相关依赖，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-web</artifactid>\n    </dependency>\n    \x3c!-- 引入 spring cloud alibaba nacos discovery 相关依赖，将 nacos 作为注册中心，并实现对其的自动配置 --\x3e\n    \x3c!-- 最好在父工程引入，子工程就不需在引入了 --\x3e\n    <dependency>\n        <groupid>com.alibaba.cloud</groupid>\n        <artifactid>spring-cloud-starter-alibaba-nacos-discovery</artifactid>\n    </dependency>\n</dependencies>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8082\n\nspring:\n  application:\n    name: provider\n\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n\n\n\n# 启动类\n\n@springbootapplication\n@enablediscoveryclient\npublic class providerapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(providerapplication.class);\n    }\n\n}\n\n\n\n# controller\n\n@restcontroller\npublic class providecontroller {\n\n    @getmapping(value = "/echo/{string}")\n    public string echo(@pathvariable string string) {\n        return "hello nacos discovery " + string;\n    }\n\n}\n\n\n\n# 新建consumer服务消费模块\n\n\n# 添加依赖\n\n<dependencies>\n    \x3c!-- 引入 springmvc 相关依赖，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-web</artifactid>\n    </dependency>\n    \x3c!-- 引入 spring cloud alibaba nacos discovery 相关依赖，将 nacos 作为注册中心，并实现对其的自动配置 --\x3e\n    \x3c!-- 最好在父工程引入，子工程就不需在引入了 --\x3e\n    <dependency>\n        <groupid>com.alibaba.cloud</groupid>\n        <artifactid>spring-cloud-starter-alibaba-nacos-discovery</artifactid>\n    </dependency>\n</dependencies>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8083\n\nspring:\n  application:\n    name: consumer\n\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n\n\n\n# 启动类\n\n@springbootapplication\n@enablediscoveryclient\npublic class consumerapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(consumerapplication.class);\n    }\n\n    //实例化 resttemplate 实例\n    @bean\n    public resttemplate resttemplate() {\n        return new resttemplate();\n    }\n\n}\n\n\n\n# controller\n\n@restcontroller\npublic class consumecontroller {\n\n    @value("${spring.application.name}")\n    private string name;\n\n    @autowired\n    private resttemplate resttemplate;\n\n    @autowired\n    private discoveryclient discoveryclient;\n\n    @getmapping("/echo/app-name")\n    public string echoappname() {\n        //使用 loadbalanceclient 和 resttemolate 结合的方式来访问\n        list<serviceinstance> instances = discoveryclient.getinstances("provider");\n        // 选择第一个\n        serviceinstance instance = instances.size() > 0 ? instances.get(0) : null;\n        string url = string.format("http://%s:%s/echo/%s", instance.gethost(), instance.getport(), name);\n        system.out.println("request url:" + url);\n        return resttemplate.getforobject(url, string.class);\n    }\n    \n}\n\n\n\n# 使用\n\n\n# 访问\n\nlocalhost:8083/echo/app-name',charsets:{cjk:!0}},{title:"SpringCloud网关Gateway",frontmatter:{title:"SpringCloud网关Gateway",date:"2022-05-23T14:04:06.000Z",permalink:"/pages/b48b5b/",categories:["学习资料","Java","SpringCloud实战"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/25.SpringCloud%E5%AE%9E%E6%88%98/04.SpringCloud%E7%BD%91%E5%85%B3Gateway.html",relativePath:"学习资料/03.Java/25.SpringCloud实战/04.SpringCloud网关Gateway.md",key:"v-7b54e78f",path:"/pages/b48b5b/",headers:[{level:2,title:"新建gateway网关模块",slug:"新建gateway网关模块",normalizedTitle:"新建gateway网关模块",charIndex:2},{level:3,title:"添加依赖",slug:"添加依赖",normalizedTitle:"添加依赖",charIndex:20},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:688},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:517},{level:3,title:"启动类",slug:"启动类",normalizedTitle:"启动类",charIndex:1715},{level:3,title:"访问",slug:"访问",normalizedTitle:"访问",charIndex:1915},{level:2,title:"filter过滤器",slug:"filter过滤器",normalizedTitle:"filter过滤器",charIndex:1961},{level:3,title:"自定义过滤器",slug:"自定义过滤器",normalizedTitle:"自定义过滤器",charIndex:1975},{level:3,title:"自定义过滤器",slug:"自定义过滤器-2",normalizedTitle:"自定义过滤器",charIndex:1975},{level:3,title:"全局过滤器",slug:"全局过滤器",normalizedTitle:"全局过滤器",charIndex:4204},{level:3,title:"其他过滤器",slug:"其他过滤器",normalizedTitle:"其他过滤器",charIndex:4539},{level:2,title:"限流",slug:"限流",normalizedTitle:"限流",charIndex:4553},{level:3,title:"添加依赖",slug:"添加依赖-2",normalizedTitle:"添加依赖",charIndex:20},{level:3,title:"配置",slug:"配置-2",normalizedTitle:"配置",charIndex:688}],headersStr:"新建gateway网关模块 添加依赖 配置 使用 启动类 访问 filter过滤器 自定义过滤器 自定义过滤器 全局过滤器 其他过滤器 限流 添加依赖 配置",content:'# 新建gateway网关模块\n\n\n# 添加依赖\n\n<dependencies>\n    \x3c!-- gateway 网关依赖 --\x3e\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-gateway</artifactId>\n    </dependency>\n\n    \x3c!-- SpringCloudAlibaba2021弃用了ribbon，需手动引入才能通过lb路由实现负载均衡 --\x3e\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-loadbalancer</artifactId>\n    </dependency>\n\n    \x3c!-- SpringCloudAlibaba 负载均衡从ribbon替换成spring-cloud-loadbalancer 过程中出现警告。推荐使用caffeine --\x3e\n    <dependency>\n        <groupId>com.github.ben-manes.caffeine</groupId>\n        <artifactId>caffeine</artifactId>\n    </dependency>\n\n</dependencies>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8084\nspring:\n  application:\n    name: gateway\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      # 路由规则\n      routes:\n        # 路由标识，要求唯一，名称任意\n        - id: consumer\n          # 请求最终被转发到的目标地址\n          uri: lb://consumer\n          # 断言，满足 /gateway/consumer/** 路径的请求都会被路由到 lb://consumer 这个uri中\n          predicates:\n            - Path=/consumer/**\n          # 配置过滤器（局部）\n          filters:\n            - AddResponseHeader=X-Response-Foo, Bar\n            # 内置过滤器，写法等同于\n#             - name: AddResponseHeader\n#               args:\n#                name: X-Response-Foo\n#                value: Bar\n            - StripPrefix=1\n            # StripPrefix：去除原始请求路径中的前1级路径，即/gateway\n        - id: provider\n          uri: lb://provider\n          predicates:\n            - Path=/provider/**\n          filters:\n            - AddResponseHeader=X-Response-Foo, Bar\n            - StripPrefix=1\n            # TokenGatewayFilterFactory 这个过滤器\n            - Token\n\n\n\n# 使用\n\n\n# 启动类\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class GatewayApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class);\n    }\n}\n\n\n\n# 访问\n\nlocalhost:8084/consumer/echo/app-name\n\n\n# filter过滤器\n\n\n# 自定义过滤器\n\n以XXXGatewayFilterFactory命名，继承AbstractGatewayFilterFactory，在yml配置-XXX就可以使用\n\n@Component\npublic class TokenGatewayFilterFactory extends AbstractGatewayFilterFactory<TokenGatewayFilterFactory.Config> {\n\n    public TokenGatewayFilterFactory() {\n        super(Config.class);\n    }\n\n    @Override\n    public GatewayFilter apply(Config config) {\n        // 获取过滤器的配置属性\n\n        return (exchange, chain) -> {\n            // 前置过滤器pre\n            System.out.println("TokenGatewayFilterFactory filtered!--PRE");\n            ServerHttpRequest.Builder builder = exchange.getRequest().mutate();\n            // 后置过滤器post\n            System.out.println("TokenGatewayFilterFactory filtered!--POST");\n            return chain.filter(exchange.mutate().request(builder.build()).build());\n//            System.out.println("自定义过滤器......");\n//            return chain.filter(exchange);\n        };\n    }\n\n    public static class Config {\n        // 将过滤器的配置属性放这里\n    }\n\n}\n\n\n# 访问\n\nlocalhost:8084/provider/echo/app-name\n\n\n# 自定义过滤器\n\n实现GatewayFilter接口，Ordered接口是过滤器执行顺序，越高排在越后\n\n@Component\npublic class TokenGatewayFilter implements GatewayFilter, Ordered {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        // 前置过滤器pre\n        System.out.println("TokenGatewayFilter filtered!--PRE");\n        return chain.filter(exchange).then(\n                Mono.fromRunnable(() -> {\n                    // 后置过滤器post\n                    System.out.println("TokenGatewayFilter filtered!--POST");\n                })\n        );\n//        System.out.println("自定义过滤器......");\n//        return chain.filter(exchange);\n    }\n\n\n    @Override\n    public int getOrder() {\n        return 20;\n    }\n\n    @Configuration\n    class RouteConfiguration {\n        @Bean\n        public RouteLocator routeLocator(RouteLocatorBuilder builder) {\n            return builder.routes()\n                    .route("myFilter", r -> r.path("/myFilter/**")\n                            .filters(f -> f.stripPrefix(1)\n                                    .filters(new TokenGatewayFilter()))\n                            .uri("lb://consumer"))\n                    .build();\n\n        }\n    }\n}\n\n\n# 访问\n\nlocalhost:8084/myFilter/echo/app-name\n\n\n# 全局过滤器\n\n实现GlobalFilter接口\n\n@Component\npublic class GlobalGatewayFilter implements GlobalFilter {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        System.out.println("全局过滤器......");\n        return chain.filter(exchange);\n    }\n}\n\n\n# 访问\n\nlocalhost:8084/consumer/echo/app-name\n\n\n# 其他过滤器\n\n官网\n\n\n# 限流\n\n\n# 添加依赖\n\n\x3c!--redis gateway令牌桶依赖 --\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis-reactive</artifactId>\n</dependency>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8084\nspring:\n  application:\n    name: gateway\n  redis:  #当需要用到redis令牌桶限流的时候开启\n    host: localhost\n    port: 6379\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      # 全局过滤\n      default-filters:\n        # 限流\n        - name: RequestRateLimiter\n          args:\n            # 每秒处理多少个平均请求数（一秒填充速率）\n            redis-rate-limiter.replenishRate: 10\n            # 一秒钟内执行的最大请求数（总容量）\n            redis-rate-limiter.burstCapacity: 20\n            # 每个请求从存储桶中获取的令牌数\n            redis-rate-limiter.requestedTokens: 1\n            # 使用SpEL表达式从Spring容器中获取Bean对象\n            key-resolver: "#{@apiKeyResolver}"\n      # 路由规则\n      routes:\n        # 路由标识，要求唯一，名称任意\n        - id: consumer\n          # 请求最终被转发到的目标地址\n          uri: lb://consumer\n          # 断言，满足 /gateway/consumer/** 路径的请求都会被路由到 lb://consumer 这个uri中\n          predicates:\n            - Path=/consumer/**\n          # 配置过滤器（局部）\n          filters:\n            - AddResponseHeader=X-Response-Foo, Bar\n            # 内置过滤器，写法等同于\n#             - name: AddResponseHeader\n#               args:\n#                name: X-Response-Foo\n#                value: Bar\n            - StripPrefix=1\n            # StripPrefix：去除原始请求路径中的前1级路径，即/gateway\n        - id: provider\n          uri: lb://provider\n          predicates:\n            - Path=/provider/**\n          filters:\n            - AddResponseHeader=X-Response-Foo, Bar\n            - StripPrefix=1\n            # TokenGatewayFilterFactory 这个过滤器\n            - Token\n\n\n# key-resolver配置\n\n@Configuration\npublic class RequestRateLimiterConfig {\n\n    /**\n     * 接口限流\n     */\n    @Bean\n    @Primary\n    KeyResolver apiKeyResolver() {\n        return exchange -> Mono.just(exchange.getRequest().getPath().toString());\n    }\n\n    /**\n     * ip限流\n     */\n    @Bean\n    KeyResolver ipKeyResolver() {\n        return exchange -> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());\n    }\n\n    /**\n     * 用户限流\n     */\n    @Bean\n    KeyResolver userKeyResolver() {\n        return exchange -> Mono.just(exchange.getRequest().getQueryParams().getFirst("user"));\n    }\n\n}\n',normalizedContent:'# 新建gateway网关模块\n\n\n# 添加依赖\n\n<dependencies>\n    \x3c!-- gateway 网关依赖 --\x3e\n    <dependency>\n        <groupid>org.springframework.cloud</groupid>\n        <artifactid>spring-cloud-starter-gateway</artifactid>\n    </dependency>\n\n    \x3c!-- springcloudalibaba2021弃用了ribbon，需手动引入才能通过lb路由实现负载均衡 --\x3e\n    <dependency>\n        <groupid>org.springframework.cloud</groupid>\n        <artifactid>spring-cloud-starter-loadbalancer</artifactid>\n    </dependency>\n\n    \x3c!-- springcloudalibaba 负载均衡从ribbon替换成spring-cloud-loadbalancer 过程中出现警告。推荐使用caffeine --\x3e\n    <dependency>\n        <groupid>com.github.ben-manes.caffeine</groupid>\n        <artifactid>caffeine</artifactid>\n    </dependency>\n\n</dependencies>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8084\nspring:\n  application:\n    name: gateway\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      # 路由规则\n      routes:\n        # 路由标识，要求唯一，名称任意\n        - id: consumer\n          # 请求最终被转发到的目标地址\n          uri: lb://consumer\n          # 断言，满足 /gateway/consumer/** 路径的请求都会被路由到 lb://consumer 这个uri中\n          predicates:\n            - path=/consumer/**\n          # 配置过滤器（局部）\n          filters:\n            - addresponseheader=x-response-foo, bar\n            # 内置过滤器，写法等同于\n#             - name: addresponseheader\n#               args:\n#                name: x-response-foo\n#                value: bar\n            - stripprefix=1\n            # stripprefix：去除原始请求路径中的前1级路径，即/gateway\n        - id: provider\n          uri: lb://provider\n          predicates:\n            - path=/provider/**\n          filters:\n            - addresponseheader=x-response-foo, bar\n            - stripprefix=1\n            # tokengatewayfilterfactory 这个过滤器\n            - token\n\n\n\n# 使用\n\n\n# 启动类\n\n@springbootapplication\n@enablediscoveryclient\npublic class gatewayapplication {\n    public static void main(string[] args) {\n        springapplication.run(gatewayapplication.class);\n    }\n}\n\n\n\n# 访问\n\nlocalhost:8084/consumer/echo/app-name\n\n\n# filter过滤器\n\n\n# 自定义过滤器\n\n以xxxgatewayfilterfactory命名，继承abstractgatewayfilterfactory，在yml配置-xxx就可以使用\n\n@component\npublic class tokengatewayfilterfactory extends abstractgatewayfilterfactory<tokengatewayfilterfactory.config> {\n\n    public tokengatewayfilterfactory() {\n        super(config.class);\n    }\n\n    @override\n    public gatewayfilter apply(config config) {\n        // 获取过滤器的配置属性\n\n        return (exchange, chain) -> {\n            // 前置过滤器pre\n            system.out.println("tokengatewayfilterfactory filtered!--pre");\n            serverhttprequest.builder builder = exchange.getrequest().mutate();\n            // 后置过滤器post\n            system.out.println("tokengatewayfilterfactory filtered!--post");\n            return chain.filter(exchange.mutate().request(builder.build()).build());\n//            system.out.println("自定义过滤器......");\n//            return chain.filter(exchange);\n        };\n    }\n\n    public static class config {\n        // 将过滤器的配置属性放这里\n    }\n\n}\n\n\n# 访问\n\nlocalhost:8084/provider/echo/app-name\n\n\n# 自定义过滤器\n\n实现gatewayfilter接口，ordered接口是过滤器执行顺序，越高排在越后\n\n@component\npublic class tokengatewayfilter implements gatewayfilter, ordered {\n\n    @override\n    public mono<void> filter(serverwebexchange exchange, gatewayfilterchain chain) {\n        // 前置过滤器pre\n        system.out.println("tokengatewayfilter filtered!--pre");\n        return chain.filter(exchange).then(\n                mono.fromrunnable(() -> {\n                    // 后置过滤器post\n                    system.out.println("tokengatewayfilter filtered!--post");\n                })\n        );\n//        system.out.println("自定义过滤器......");\n//        return chain.filter(exchange);\n    }\n\n\n    @override\n    public int getorder() {\n        return 20;\n    }\n\n    @configuration\n    class routeconfiguration {\n        @bean\n        public routelocator routelocator(routelocatorbuilder builder) {\n            return builder.routes()\n                    .route("myfilter", r -> r.path("/myfilter/**")\n                            .filters(f -> f.stripprefix(1)\n                                    .filters(new tokengatewayfilter()))\n                            .uri("lb://consumer"))\n                    .build();\n\n        }\n    }\n}\n\n\n# 访问\n\nlocalhost:8084/myfilter/echo/app-name\n\n\n# 全局过滤器\n\n实现globalfilter接口\n\n@component\npublic class globalgatewayfilter implements globalfilter {\n\n    @override\n    public mono<void> filter(serverwebexchange exchange, gatewayfilterchain chain) {\n        system.out.println("全局过滤器......");\n        return chain.filter(exchange);\n    }\n}\n\n\n# 访问\n\nlocalhost:8084/consumer/echo/app-name\n\n\n# 其他过滤器\n\n官网\n\n\n# 限流\n\n\n# 添加依赖\n\n\x3c!--redis gateway令牌桶依赖 --\x3e\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-data-redis-reactive</artifactid>\n</dependency>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8084\nspring:\n  application:\n    name: gateway\n  redis:  #当需要用到redis令牌桶限流的时候开启\n    host: localhost\n    port: 6379\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      # 全局过滤\n      default-filters:\n        # 限流\n        - name: requestratelimiter\n          args:\n            # 每秒处理多少个平均请求数（一秒填充速率）\n            redis-rate-limiter.replenishrate: 10\n            # 一秒钟内执行的最大请求数（总容量）\n            redis-rate-limiter.burstcapacity: 20\n            # 每个请求从存储桶中获取的令牌数\n            redis-rate-limiter.requestedtokens: 1\n            # 使用spel表达式从spring容器中获取bean对象\n            key-resolver: "#{@apikeyresolver}"\n      # 路由规则\n      routes:\n        # 路由标识，要求唯一，名称任意\n        - id: consumer\n          # 请求最终被转发到的目标地址\n          uri: lb://consumer\n          # 断言，满足 /gateway/consumer/** 路径的请求都会被路由到 lb://consumer 这个uri中\n          predicates:\n            - path=/consumer/**\n          # 配置过滤器（局部）\n          filters:\n            - addresponseheader=x-response-foo, bar\n            # 内置过滤器，写法等同于\n#             - name: addresponseheader\n#               args:\n#                name: x-response-foo\n#                value: bar\n            - stripprefix=1\n            # stripprefix：去除原始请求路径中的前1级路径，即/gateway\n        - id: provider\n          uri: lb://provider\n          predicates:\n            - path=/provider/**\n          filters:\n            - addresponseheader=x-response-foo, bar\n            - stripprefix=1\n            # tokengatewayfilterfactory 这个过滤器\n            - token\n\n\n# key-resolver配置\n\n@configuration\npublic class requestratelimiterconfig {\n\n    /**\n     * 接口限流\n     */\n    @bean\n    @primary\n    keyresolver apikeyresolver() {\n        return exchange -> mono.just(exchange.getrequest().getpath().tostring());\n    }\n\n    /**\n     * ip限流\n     */\n    @bean\n    keyresolver ipkeyresolver() {\n        return exchange -> mono.just(exchange.getrequest().getremoteaddress().gethostname());\n    }\n\n    /**\n     * 用户限流\n     */\n    @bean\n    keyresolver userkeyresolver() {\n        return exchange -> mono.just(exchange.getrequest().getqueryparams().getfirst("user"));\n    }\n\n}\n',charsets:{cjk:!0}},{title:"SpringCloud授权OAuth2",frontmatter:{title:"SpringCloud授权OAuth2",date:"2022-05-27T10:40:21.000Z",permalink:"/pages/ffc151/",categories:["学习资料","Java","SpringCloud实战"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/25.SpringCloud%E5%AE%9E%E6%88%98/05.SpringCloud%E6%8E%88%E6%9D%83OAuth2.html",relativePath:"学习资料/03.Java/25.SpringCloud实战/05.SpringCloud授权OAuth2.md",key:"v-0f82412e",path:"/pages/ffc151/",headers:[{level:2,title:"oauth2 入门",slug:"oauth2-入门",normalizedTitle:"oauth2 入门",charIndex:2},{level:3,title:"oauth2 相关名词",slug:"oauth2-相关名词",normalizedTitle:"oauth2 相关名词",charIndex:16},{level:3,title:"四种授权模式",slug:"四种授权模式",normalizedTitle:"四种授权模式",charIndex:269},{level:3,title:"重要参数",slug:"重要参数",normalizedTitle:"重要参数",charIndex:553},{level:3,title:"新建oauth2-server认证模块",slug:"新建oauth2-server认证模块",normalizedTitle:"新建oauth2-server认证模块",charIndex:847},{level:3,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:163},{level:2,title:"oauth2 结合jwt使用",slug:"oauth2-结合jwt使用",normalizedTitle:"oauth2 结合jwt使用",charIndex:4106},{level:3,title:"添加依赖",slug:"添加依赖-2",normalizedTitle:"添加依赖",charIndex:870},{level:3,title:"配置",slug:"配置-2",normalizedTitle:"配置",charIndex:931},{level:3,title:"使用方法与上面一致",slug:"使用方法与上面一致",normalizedTitle:"使用方法与上面一致",charIndex:10087},{level:2,title:"oauth2 单点登录",slug:"oauth2-单点登录",normalizedTitle:"oauth2 单点登录",charIndex:10101},{level:3,title:"新建sso-server认证服务模块",slug:"新建sso-server认证服务模块",normalizedTitle:"新建sso-server认证服务模块",charIndex:10117},{level:3,title:"新建sso-client-one客户端模块",slug:"新建sso-client-one客户端模块",normalizedTitle:"新建sso-client-one客户端模块",charIndex:14248},{level:3,title:"新建sso-client-two客户端模块",slug:"新建sso-client-two客户端模块",normalizedTitle:"新建sso-client-two客户端模块",charIndex:15546},{level:3,title:"使用",slug:"使用-2",normalizedTitle:"使用",charIndex:163}],headersStr:"oauth2 入门 oauth2 相关名词 四种授权模式 重要参数 新建oauth2-server认证模块 使用 oauth2 结合jwt使用 添加依赖 配置 使用方法与上面一致 oauth2 单点登录 新建sso-server认证服务模块 新建sso-client-one客户端模块 新建sso-client-two客户端模块 使用",content:'# oauth2 入门\n\n\n# oauth2 相关名词\n\n * Resource owner（资源拥有者）：拥有该资源的最终用户，他有访问资源的账号密码；\n * Resource server（资源服务器）：拥有受保护资源的服务器，如果请求包含正确的访问令牌，可以访问资源；\n * Client（客户端）：访问资源的客户端，会使用访问令牌去获取资源服务器的资源，可以是浏览器、移动设备或者服务器；\n * Authorization server（认证服务器）：用于认证用户的服务器，如果客户端认证通过，发放访问资源服务器的令牌。\n\n\n# 四种授权模式\n\n * Authorization Code（授权码模式）：正宗的OAuth2的授权模式，客户端先将用户导向认证服务器，登录后获取授权码，然后进行授权，最后根据授权码获取访问令牌；\n * Implicit（简化模式）：和授权码模式相比，取消了获取授权码的过程，直接获取访问令牌；\n * Password（密码模式）：客户端直接向用户获取用户名和密码，之后向认证服务器获取访问令牌；\n * Client Credentials（客户端模式）：客户端直接通过客户端认证（比如client_id和client_secret）从认证服务器获取访问令牌。\n\n\n# 重要参数\n\n * response_type：code 表示要求返回授权码，token 表示直接返回令牌\n * client_id：客户端身份标识\n * client_secret：客户端密钥\n * redirect_uri：重定向地址\n * scope：表示授权的范围，read只读权限，all读写权限\n * grant_type：表示授权的方式，authorization_code（授权码）、password（密码）、client_credentials（凭证式）、refresh_token（更新令牌）\n * state：应用程序传递的一个随机数，用来防止CSRF攻击。\n\n\n# 新建oauth2-server认证模块\n\n# 添加依赖\n\n <dependencies>\n        \x3c!-- 引入 SpringMVC 相关依赖，并实现对其的自动配置 --\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        \x3c!-- oauth2认证授权 --\x3e\n        <dependency>\n            <groupId>org.springframework.security.oauth.boot</groupId>\n            <artifactId>spring-security-oauth2-autoconfigure</artifactId>\n        </dependency>\n\n        \x3c!-- spring security框架 --\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n\n    </dependencies>\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8085\nspring:\n  application:\n    name: auth-server\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\nsecurity:\n  oauth2:\n    client:\n      # 客户端身份标识\n      client-id: admin\n      # 客户端密钥\n      client-secret: admin123456\n      # 重定向地址\n      registered-redirect-uri: https://www.baidu.com\n\n\n# 认证服务器配置\n\n@Configuration\n@EnableAuthorizationServer\n//@Order(1)     //如出现 Full authentication is required to access this resource 先配置认证服务器，再配置资源\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n    \n}\n\n\n# 资源服务器配置\n\n@Configuration\n@EnableResourceServer\n//@Order(2)     //如出现 Full authentication is required to access this resource 先配置认证服务器，再配置资源\npublic class ResourceServerConfig extends ResourceServerConfigurerAdapter  {\n\n  @Override\n    public void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .anyRequest()\n                .authenticated()\n                .and()\n                .requestMatchers()\n                .antMatchers("/index"); //  配置需要保护的资源路径\n    }\n\n}\n\n\n# 用户登录校验配置\n\n@Service\npublic class UserDetailService implements UserDetailsService {\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        return new User(username, passwordEncoder.encode("123456"), AuthorityUtils.commaSeparatedStringToAuthorityList("admin"));\n    }\n    \n}\n\n\n\n# 使用\n\n# 启动类\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class OAuth2ServerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(OAuth2ServerApplication.class);\n    }\n}\n\n\n# controller\n\n@RestController\npublic class IndexController {\n\n    @GetMapping("/index")\n    public Object test(Authentication authentication){\n        return authentication;\n    }\n    \n}\n\n\n# 授权码模式\n\n 1. 获取授权码，访问接口\n    http://localhost:8085/oauth/authorize?response_type=code&client_id=admin&redirect_uri=https://www.baidu.com&scope=all&state=normal\n\n 2. 登录后进行授权操作，浏览器会带着授权码跳转到指定地址\n\n> https://www.baidu.com/?code=hxovq2&state=normal\n\n 3. 根据授权码去获取token，一个授权码只能获取一次token\n\n * 使用Basic Auth认证通过client_id和client_secret构造一个Authorization头信息\n\n * 在body中添加以下参数信息（code是获取的授权码），通过POST请求获取访问令牌\n\n 4. 访问需要登录认证的接口 使用Bearer Token认证通过获取的token构造一个Authorization头信息访问\n\n# 密码模式\n\n * 使用Basic Auth认证通过client_id和client_secret构造一个Authorization头信息\n\n * 在body中添加以下参数信息（用户名和密码），通过POST请求获取访问令牌\n\n\n# oauth2 结合jwt使用\n\n\n# 添加依赖\n\n\x3c!-- redis --\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n\n\x3c!-- jwt --\x3e\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt</artifactId>\n    <version>0.9.0</version>\n</dependency>\n\n\x3c!-- commons-lang3 --\x3e\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-lang3</artifactId>\n</dependency>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8085\nspring:\n  application:\n    name: auth-server\n  redis:\n    host: localhost\n    port: 6379\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n#security:\n#  oauth2:\n#    client:\n#      # 客户端身份标识\n#      client-id: admin\n#      # 客户端密钥\n#      client-secret: admin123456\n#      # 重定向地址\n#      registered-redirect-uri: https://www.baidu.com\n\n\n# 认证服务器配置\n\n@Configuration\n@EnableAuthorizationServer\npublic class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Autowired\n    private UserDetailService userDetailService;\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n\n//    @Qualifier("redisTokenStore")// redis存储\n\n    @Autowired\n    @Qualifier("jwtTokenStore")\n    private TokenStore tokenStore;\n\n    @Autowired\n    private JwtAccessTokenConverter jwtAccessTokenConverter;\n\n    @Autowired\n    private JwtTokenEnhancer jwtTokenEnhancer;\n\n\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n\n        TokenEnhancerChain enhancerChain = new TokenEnhancerChain();\n        List<TokenEnhancer> enhancers = new ArrayList<>();\n        enhancers.add(jwtTokenEnhancer);\n        enhancers.add(jwtAccessTokenConverter);\n        enhancerChain.setTokenEnhancers(enhancers);\n\n        endpoints.authenticationManager(authenticationManager)\n                .userDetailsService(userDetailService)\n                .tokenStore(tokenStore)\n                .tokenEnhancer(enhancerChain);\n    }\n\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        clients.inMemory()\n                // 配置client_id\n                .withClient("admin")\n                // 配置client_secret\n                .secret(passwordEncoder.encode("admin123456"))\n                // 配置访问token的有效期\n                .accessTokenValiditySeconds(3600)\n                // 配置刷新token的有效期\n                .refreshTokenValiditySeconds(864000)\n                // 配置redirect_uri，用于授权成功后跳转\n                .redirectUris("https://www.baidu.com")\n                // 配置申请的权限范围\n                .scopes("all")\n                // 配置grant_type，表示授权类型\n                .authorizedGrantTypes("authorization_code","password","refresh_token");\n    }\n}\n\n\n# 资源服务器配置\n\n@Configuration\n@EnableResourceServer\npublic class ResourceServerConfig extends ResourceServerConfigurerAdapter {\n\n    @Override\n    public void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests() // 授权配置\n                .anyRequest()  // 所有请求\n                .authenticated() // 都需要认证\n                .and()\n                .requestMatchers()\n                .antMatchers("/**");\n    }\n\n}\n\n\n# springSecurity配置\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Override\n    public void configure(HttpSecurity http) throws Exception {\n        http.csrf()\n                .disable()\n                .authorizeRequests()\n                .antMatchers("/oauth/**", "/login/**", "/logout/**")\n                .permitAll()\n                .anyRequest()\n                .authenticated()\n                .and()\n                .formLogin()\n                .permitAll();\n    }\n\n}\n\n\n# redis存储token配置\n\n//@Configuration    // 根据@Qualifier注入bean不生效，所以直接注释了\npublic class RedisTokenStoreConfig {\n\n    @Autowired\n    private RedisConnectionFactory redisConnectionFactory;\n\n    /**\n     * 存储token的bean\n     */\n    @Bean("redisTokenStore")\n    public TokenStore redisTokenStore() {\n        return new RedisTokenStore(redisConnectionFactory);\n    }\n}\n\n\n# jwt存储token配置\n\n@Configuration\npublic class JwtTokenStoreConfig {\n\n    /**\n     * 扩展JWT内容的bean\n     */\n    @Bean\n    public JwtTokenEnhancer jwtTokenEnhancer() {\n        return new JwtTokenEnhancer();\n    }\n\n    /**\n     * 存储token的bean\n     */\n    @Bean("jwtTokenStore")\n    public TokenStore jwtTokenStore() {\n        return new JwtTokenStore(jwtAccessTokenConverter());\n    }\n\n    /**\n     * token转换器\n     */\n    @Bean\n    public JwtAccessTokenConverter jwtAccessTokenConverter() {\n        JwtAccessTokenConverter accessTokenConverter = new JwtAccessTokenConverter();\n        // 配置JWT使用的秘钥\n        accessTokenConverter.setSigningKey("test_key");\n        return accessTokenConverter;\n    }\n\n}\n\n\n# jwt内容扩充配置\n\npublic class JwtTokenEnhancer implements TokenEnhancer {\n    @Override\n    public OAuth2AccessToken enhance(OAuth2AccessToken oAuth2AccessToken, OAuth2Authentication oAuth2Authentication) {\n        HashMap<String, Object> map = new HashMap<>();\n        map.put("message","hello world");\n        ((DefaultOAuth2AccessToken) oAuth2AccessToken).setAdditionalInformation(map);\n        return oAuth2AccessToken;\n    }\n}\n\n\n# jwt解析\n\n@RestController\npublic class IndexController {\n\n    @GetMapping("/index")\n    public Object test(Authentication authentication, HttpServletRequest request){\n        String header = request.getHeader("Authorization");\n        String token = StringUtils.substringAfter(header, "Bearer ");\n        return Jwts.parser()\n                .setSigningKey("test_key".getBytes(StandardCharsets.UTF_8))\n                .parseClaimsJws(token)\n                .getBody();\n    }\n\n}\n\n\n\n# 使用方法与上面一致\n\n\n# oauth2 单点登录\n\n\n# 新建sso-server认证服务模块\n\n# yml配置\n\nserver:\n  port: 8085\nspring:\n  application:\n    name: auth-sso-server\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n\n\n# 认证服务器配置\n\n@Configuration\n@EnableAuthorizationServer\npublic class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Autowired\n    private UserDetailService userDetailService;\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    @Autowired\n    private TokenStore tokenStore;\n\n    @Autowired\n    private JwtAccessTokenConverter jwtAccessTokenConverter;\n\n\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n        endpoints.authenticationManager(authenticationManager)\n                .userDetailsService(userDetailService)\n                .tokenStore(tokenStore)\n                .accessTokenConverter(jwtAccessTokenConverter);\n    }\n\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        clients.inMemory()\n                // 配置client_id\n                .withClient("client1")\n                // 配置client_secret\n                .secret(passwordEncoder.encode("client1_123456"))\n                // 配置访问token的有效期\n                .accessTokenValiditySeconds(3600)\n                // 配置刷新token的有效期\n                .refreshTokenValiditySeconds(86400)\n                // 配置redirect_uri，用于授权成功后跳转\n                .redirectUris("http://localhost:8086/login")\n                // 自动授权配置\n                .autoApprove(true)\n                // 配置申请的权限范围\n                .scopes("all")\n                // 配置grant_type，表示授权类型\n                .authorizedGrantTypes("authorization_code","refresh_token")\n        .and()\n                .withClient("client2")\n                .secret(passwordEncoder.encode("client2_123456"))\n                .accessTokenValiditySeconds(3600)\n                .refreshTokenValiditySeconds(86400)\n                .redirectUris("http://localhost:8087/login")\n                .autoApprove(true)\n                .scopes("all")\n                .authorizedGrantTypes("authorization_code","refresh_token");\n    }\n\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer security) {\n        // 获取密钥需要身份认证，使用单点登录时必须配置\n        security.tokenKeyAccess("isAuthenticated()");\n    }\n}\n\n\n# springSecurity配置\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Override\n    public void configure(HttpSecurity http) throws Exception {\n        http.csrf()\n                .disable()\n                .authorizeRequests()\n                .antMatchers("/oauth/**", "/login/**", "/logout/**")\n                .permitAll()\n                .anyRequest()\n                .authenticated()\n                .and()\n                .formLogin()\n                .permitAll();\n    }\n\n}\n\n\n# jwt存储token配置\n\n@Configuration\npublic class JwtTokenStoreConfig {\n\n    /**\n     * 存储token的bean\n     */\n    @Bean("jwtTokenStore")\n    public TokenStore jwtTokenStore() {\n        return new JwtTokenStore(jwtAccessTokenConverter());\n    }\n\n    /**\n     * token转换器\n     */\n    @Bean\n    public JwtAccessTokenConverter jwtAccessTokenConverter() {\n        JwtAccessTokenConverter accessTokenConverter = new JwtAccessTokenConverter();\n        // 配置JWT使用的秘钥\n        accessTokenConverter.setSigningKey("test_key");\n        return accessTokenConverter;\n    }\n    \n}\n\n\n# 用户密码配置\n\n@Service\npublic class UserDetailService implements UserDetailsService {\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        return new User(username, passwordEncoder.encode("123456"), AuthorityUtils.commaSeparatedStringToAuthorityList("admin"));\n    }\n}\n\n\n\n# 新建sso-client-one客户端模块\n\n# yml配置\n\nserver:\n  port: 8086\n  # 防止Cookie冲突，冲突会导致登录验证不通过,两种方式都可以避免\n  servlet:\n#    context-path: /client1\n    session:\n      cookie:\n        name: AUTH-SSO-CLIENT1-SESSIONID\nspring:\n  application:\n    name: auth-sso-client1\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\nsecurity:\n  oauth2:\n    client:\n      # 客户端身份标识\n      client-id: client1\n      # 客户端密钥\n      client-secret: client1_123456\n      user-authorization-uri: http://localhost:8085/oauth/authorize\n      access-token-uri: http://localhost:8085/oauth/token\n    resource:\n      jwt:\n        key-uri: http://localhost:8085/oauth/token_key\n\n\n# controller\n\n@RestController\npublic class IndexController {\n\n    @GetMapping("/index")\n    public Object getCurrentUser(Authentication authentication) {\n        return authentication;\n    }\n\n    @GetMapping("auth/test1")\n    @PreAuthorize("hasAuthority(\'user\')")\n    public String authTest1(){\n        return "您拥有\'user\'权限";\n    }\n\n    @GetMapping("auth/test2")\n    @PreAuthorize("hasAuthority(\'admin\')")\n    public String authTest2(){\n        return "您拥有\'admin\'权限";\n    }\n}\n\n\n# 单点登录权限配置\n\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\n@Order(101)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n}\n\n\n\n# 新建sso-client-two客户端模块\n\n# yml配置\n\nserver:\n  port: 8087\n  # 防止Cookie冲突，冲突会导致登录验证不通过,两种方式都可以避免\n  servlet:\n#    context-path: /client2\n    session:\n      cookie:\n        name: AUTH-SSO-CLIENT2-SESSIONID\nspring:\n  application:\n    name: auth-sso-client2\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\nsecurity:\n  oauth2:\n    client:\n      # 客户端身份标识\n      client-id: client2\n      # 客户端密钥\n      client-secret: client2_123456\n      user-authorization-uri: http://localhost:8085/oauth/authorize\n      access-token-uri: http://localhost:8085/oauth/token\n    resource:\n      jwt:\n        key-uri: http://localhost:8085/oauth/token_key\n\n\n# controller\n\n@RestController\npublic class IndexController {\n\n    @GetMapping("/index")\n    public Object getCurrentUser(Authentication authentication) {\n        return authentication;\n    }\n\n    @GetMapping("auth/test1")\n    @PreAuthorize("hasAuthority(\'user\')")\n    public String authTest1(){\n        return "您拥有\'user\'权限";\n    }\n\n    @GetMapping("auth/test2")\n    @PreAuthorize("hasAuthority(\'admin\')")\n    public String authTest2(){\n        return "您拥有\'admin\'权限";\n    }\n}\n\n\n\n# 使用\n\n# 访问\n\nhttp://localhost:8086/index\n\n> 发现会跳转到认证服务器的登录\n\n# 再访问\n\nhttp://localhost:8087/index\n\n> 发现可以直接访问不需要重新登录了',normalizedContent:'# oauth2 入门\n\n\n# oauth2 相关名词\n\n * resource owner（资源拥有者）：拥有该资源的最终用户，他有访问资源的账号密码；\n * resource server（资源服务器）：拥有受保护资源的服务器，如果请求包含正确的访问令牌，可以访问资源；\n * client（客户端）：访问资源的客户端，会使用访问令牌去获取资源服务器的资源，可以是浏览器、移动设备或者服务器；\n * authorization server（认证服务器）：用于认证用户的服务器，如果客户端认证通过，发放访问资源服务器的令牌。\n\n\n# 四种授权模式\n\n * authorization code（授权码模式）：正宗的oauth2的授权模式，客户端先将用户导向认证服务器，登录后获取授权码，然后进行授权，最后根据授权码获取访问令牌；\n * implicit（简化模式）：和授权码模式相比，取消了获取授权码的过程，直接获取访问令牌；\n * password（密码模式）：客户端直接向用户获取用户名和密码，之后向认证服务器获取访问令牌；\n * client credentials（客户端模式）：客户端直接通过客户端认证（比如client_id和client_secret）从认证服务器获取访问令牌。\n\n\n# 重要参数\n\n * response_type：code 表示要求返回授权码，token 表示直接返回令牌\n * client_id：客户端身份标识\n * client_secret：客户端密钥\n * redirect_uri：重定向地址\n * scope：表示授权的范围，read只读权限，all读写权限\n * grant_type：表示授权的方式，authorization_code（授权码）、password（密码）、client_credentials（凭证式）、refresh_token（更新令牌）\n * state：应用程序传递的一个随机数，用来防止csrf攻击。\n\n\n# 新建oauth2-server认证模块\n\n# 添加依赖\n\n <dependencies>\n        \x3c!-- 引入 springmvc 相关依赖，并实现对其的自动配置 --\x3e\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-web</artifactid>\n        </dependency>\n\n        \x3c!-- oauth2认证授权 --\x3e\n        <dependency>\n            <groupid>org.springframework.security.oauth.boot</groupid>\n            <artifactid>spring-security-oauth2-autoconfigure</artifactid>\n        </dependency>\n\n        \x3c!-- spring security框架 --\x3e\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-security</artifactid>\n        </dependency>\n\n    </dependencies>\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8085\nspring:\n  application:\n    name: auth-server\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\nsecurity:\n  oauth2:\n    client:\n      # 客户端身份标识\n      client-id: admin\n      # 客户端密钥\n      client-secret: admin123456\n      # 重定向地址\n      registered-redirect-uri: https://www.baidu.com\n\n\n# 认证服务器配置\n\n@configuration\n@enableauthorizationserver\n//@order(1)     //如出现 full authentication is required to access this resource 先配置认证服务器，再配置资源\npublic class securityconfig extends websecurityconfigureradapter {\n    \n    @bean\n    public passwordencoder passwordencoder(){\n        return new bcryptpasswordencoder();\n    }\n    \n}\n\n\n# 资源服务器配置\n\n@configuration\n@enableresourceserver\n//@order(2)     //如出现 full authentication is required to access this resource 先配置认证服务器，再配置资源\npublic class resourceserverconfig extends resourceserverconfigureradapter  {\n\n  @override\n    public void configure(httpsecurity http) throws exception {\n        http.authorizerequests()\n                .anyrequest()\n                .authenticated()\n                .and()\n                .requestmatchers()\n                .antmatchers("/index"); //  配置需要保护的资源路径\n    }\n\n}\n\n\n# 用户登录校验配置\n\n@service\npublic class userdetailservice implements userdetailsservice {\n\n    @autowired\n    private passwordencoder passwordencoder;\n\n    @override\n    public userdetails loaduserbyusername(string username) throws usernamenotfoundexception {\n        return new user(username, passwordencoder.encode("123456"), authorityutils.commaseparatedstringtoauthoritylist("admin"));\n    }\n    \n}\n\n\n\n# 使用\n\n# 启动类\n\n@springbootapplication\n@enablediscoveryclient\npublic class oauth2serverapplication {\n    public static void main(string[] args) {\n        springapplication.run(oauth2serverapplication.class);\n    }\n}\n\n\n# controller\n\n@restcontroller\npublic class indexcontroller {\n\n    @getmapping("/index")\n    public object test(authentication authentication){\n        return authentication;\n    }\n    \n}\n\n\n# 授权码模式\n\n 1. 获取授权码，访问接口\n    http://localhost:8085/oauth/authorize?response_type=code&client_id=admin&redirect_uri=https://www.baidu.com&scope=all&state=normal\n\n 2. 登录后进行授权操作，浏览器会带着授权码跳转到指定地址\n\n> https://www.baidu.com/?code=hxovq2&state=normal\n\n 3. 根据授权码去获取token，一个授权码只能获取一次token\n\n * 使用basic auth认证通过client_id和client_secret构造一个authorization头信息\n\n * 在body中添加以下参数信息（code是获取的授权码），通过post请求获取访问令牌\n\n 4. 访问需要登录认证的接口 使用bearer token认证通过获取的token构造一个authorization头信息访问\n\n# 密码模式\n\n * 使用basic auth认证通过client_id和client_secret构造一个authorization头信息\n\n * 在body中添加以下参数信息（用户名和密码），通过post请求获取访问令牌\n\n\n# oauth2 结合jwt使用\n\n\n# 添加依赖\n\n\x3c!-- redis --\x3e\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-data-redis</artifactid>\n</dependency>\n\n\x3c!-- jwt --\x3e\n<dependency>\n    <groupid>io.jsonwebtoken</groupid>\n    <artifactid>jjwt</artifactid>\n    <version>0.9.0</version>\n</dependency>\n\n\x3c!-- commons-lang3 --\x3e\n<dependency>\n    <groupid>org.apache.commons</groupid>\n    <artifactid>commons-lang3</artifactid>\n</dependency>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8085\nspring:\n  application:\n    name: auth-server\n  redis:\n    host: localhost\n    port: 6379\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n#security:\n#  oauth2:\n#    client:\n#      # 客户端身份标识\n#      client-id: admin\n#      # 客户端密钥\n#      client-secret: admin123456\n#      # 重定向地址\n#      registered-redirect-uri: https://www.baidu.com\n\n\n# 认证服务器配置\n\n@configuration\n@enableauthorizationserver\npublic class authorizationserverconfig extends authorizationserverconfigureradapter {\n\n    @autowired\n    private passwordencoder passwordencoder;\n\n    @autowired\n    private userdetailservice userdetailservice;\n\n    @autowired\n    private authenticationmanager authenticationmanager;\n\n\n//    @qualifier("redistokenstore")// redis存储\n\n    @autowired\n    @qualifier("jwttokenstore")\n    private tokenstore tokenstore;\n\n    @autowired\n    private jwtaccesstokenconverter jwtaccesstokenconverter;\n\n    @autowired\n    private jwttokenenhancer jwttokenenhancer;\n\n\n    @override\n    public void configure(authorizationserverendpointsconfigurer endpoints) {\n\n        tokenenhancerchain enhancerchain = new tokenenhancerchain();\n        list<tokenenhancer> enhancers = new arraylist<>();\n        enhancers.add(jwttokenenhancer);\n        enhancers.add(jwtaccesstokenconverter);\n        enhancerchain.settokenenhancers(enhancers);\n\n        endpoints.authenticationmanager(authenticationmanager)\n                .userdetailsservice(userdetailservice)\n                .tokenstore(tokenstore)\n                .tokenenhancer(enhancerchain);\n    }\n\n    @override\n    public void configure(clientdetailsserviceconfigurer clients) throws exception {\n        clients.inmemory()\n                // 配置client_id\n                .withclient("admin")\n                // 配置client_secret\n                .secret(passwordencoder.encode("admin123456"))\n                // 配置访问token的有效期\n                .accesstokenvalidityseconds(3600)\n                // 配置刷新token的有效期\n                .refreshtokenvalidityseconds(864000)\n                // 配置redirect_uri，用于授权成功后跳转\n                .redirecturis("https://www.baidu.com")\n                // 配置申请的权限范围\n                .scopes("all")\n                // 配置grant_type，表示授权类型\n                .authorizedgranttypes("authorization_code","password","refresh_token");\n    }\n}\n\n\n# 资源服务器配置\n\n@configuration\n@enableresourceserver\npublic class resourceserverconfig extends resourceserverconfigureradapter {\n\n    @override\n    public void configure(httpsecurity http) throws exception {\n        http.authorizerequests() // 授权配置\n                .anyrequest()  // 所有请求\n                .authenticated() // 都需要认证\n                .and()\n                .requestmatchers()\n                .antmatchers("/**");\n    }\n\n}\n\n\n# springsecurity配置\n\n@configuration\npublic class securityconfig extends websecurityconfigureradapter {\n\n    @bean\n    public passwordencoder passwordencoder(){\n        return new bcryptpasswordencoder();\n    }\n\n    @bean\n    @override\n    public authenticationmanager authenticationmanagerbean() throws exception {\n        return super.authenticationmanagerbean();\n    }\n\n    @override\n    public void configure(httpsecurity http) throws exception {\n        http.csrf()\n                .disable()\n                .authorizerequests()\n                .antmatchers("/oauth/**", "/login/**", "/logout/**")\n                .permitall()\n                .anyrequest()\n                .authenticated()\n                .and()\n                .formlogin()\n                .permitall();\n    }\n\n}\n\n\n# redis存储token配置\n\n//@configuration    // 根据@qualifier注入bean不生效，所以直接注释了\npublic class redistokenstoreconfig {\n\n    @autowired\n    private redisconnectionfactory redisconnectionfactory;\n\n    /**\n     * 存储token的bean\n     */\n    @bean("redistokenstore")\n    public tokenstore redistokenstore() {\n        return new redistokenstore(redisconnectionfactory);\n    }\n}\n\n\n# jwt存储token配置\n\n@configuration\npublic class jwttokenstoreconfig {\n\n    /**\n     * 扩展jwt内容的bean\n     */\n    @bean\n    public jwttokenenhancer jwttokenenhancer() {\n        return new jwttokenenhancer();\n    }\n\n    /**\n     * 存储token的bean\n     */\n    @bean("jwttokenstore")\n    public tokenstore jwttokenstore() {\n        return new jwttokenstore(jwtaccesstokenconverter());\n    }\n\n    /**\n     * token转换器\n     */\n    @bean\n    public jwtaccesstokenconverter jwtaccesstokenconverter() {\n        jwtaccesstokenconverter accesstokenconverter = new jwtaccesstokenconverter();\n        // 配置jwt使用的秘钥\n        accesstokenconverter.setsigningkey("test_key");\n        return accesstokenconverter;\n    }\n\n}\n\n\n# jwt内容扩充配置\n\npublic class jwttokenenhancer implements tokenenhancer {\n    @override\n    public oauth2accesstoken enhance(oauth2accesstoken oauth2accesstoken, oauth2authentication oauth2authentication) {\n        hashmap<string, object> map = new hashmap<>();\n        map.put("message","hello world");\n        ((defaultoauth2accesstoken) oauth2accesstoken).setadditionalinformation(map);\n        return oauth2accesstoken;\n    }\n}\n\n\n# jwt解析\n\n@restcontroller\npublic class indexcontroller {\n\n    @getmapping("/index")\n    public object test(authentication authentication, httpservletrequest request){\n        string header = request.getheader("authorization");\n        string token = stringutils.substringafter(header, "bearer ");\n        return jwts.parser()\n                .setsigningkey("test_key".getbytes(standardcharsets.utf_8))\n                .parseclaimsjws(token)\n                .getbody();\n    }\n\n}\n\n\n\n# 使用方法与上面一致\n\n\n# oauth2 单点登录\n\n\n# 新建sso-server认证服务模块\n\n# yml配置\n\nserver:\n  port: 8085\nspring:\n  application:\n    name: auth-sso-server\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n\n\n# 认证服务器配置\n\n@configuration\n@enableauthorizationserver\npublic class authorizationserverconfig extends authorizationserverconfigureradapter {\n\n    @autowired\n    private passwordencoder passwordencoder;\n\n    @autowired\n    private userdetailservice userdetailservice;\n\n    @autowired\n    private authenticationmanager authenticationmanager;\n\n    @autowired\n    private tokenstore tokenstore;\n\n    @autowired\n    private jwtaccesstokenconverter jwtaccesstokenconverter;\n\n\n    @override\n    public void configure(authorizationserverendpointsconfigurer endpoints) {\n        endpoints.authenticationmanager(authenticationmanager)\n                .userdetailsservice(userdetailservice)\n                .tokenstore(tokenstore)\n                .accesstokenconverter(jwtaccesstokenconverter);\n    }\n\n    @override\n    public void configure(clientdetailsserviceconfigurer clients) throws exception {\n        clients.inmemory()\n                // 配置client_id\n                .withclient("client1")\n                // 配置client_secret\n                .secret(passwordencoder.encode("client1_123456"))\n                // 配置访问token的有效期\n                .accesstokenvalidityseconds(3600)\n                // 配置刷新token的有效期\n                .refreshtokenvalidityseconds(86400)\n                // 配置redirect_uri，用于授权成功后跳转\n                .redirecturis("http://localhost:8086/login")\n                // 自动授权配置\n                .autoapprove(true)\n                // 配置申请的权限范围\n                .scopes("all")\n                // 配置grant_type，表示授权类型\n                .authorizedgranttypes("authorization_code","refresh_token")\n        .and()\n                .withclient("client2")\n                .secret(passwordencoder.encode("client2_123456"))\n                .accesstokenvalidityseconds(3600)\n                .refreshtokenvalidityseconds(86400)\n                .redirecturis("http://localhost:8087/login")\n                .autoapprove(true)\n                .scopes("all")\n                .authorizedgranttypes("authorization_code","refresh_token");\n    }\n\n    @override\n    public void configure(authorizationserversecurityconfigurer security) {\n        // 获取密钥需要身份认证，使用单点登录时必须配置\n        security.tokenkeyaccess("isauthenticated()");\n    }\n}\n\n\n# springsecurity配置\n\n@configuration\npublic class securityconfig extends websecurityconfigureradapter {\n\n    @bean\n    public passwordencoder passwordencoder(){\n        return new bcryptpasswordencoder();\n    }\n\n    @bean\n    @override\n    public authenticationmanager authenticationmanagerbean() throws exception {\n        return super.authenticationmanagerbean();\n    }\n\n    @override\n    public void configure(httpsecurity http) throws exception {\n        http.csrf()\n                .disable()\n                .authorizerequests()\n                .antmatchers("/oauth/**", "/login/**", "/logout/**")\n                .permitall()\n                .anyrequest()\n                .authenticated()\n                .and()\n                .formlogin()\n                .permitall();\n    }\n\n}\n\n\n# jwt存储token配置\n\n@configuration\npublic class jwttokenstoreconfig {\n\n    /**\n     * 存储token的bean\n     */\n    @bean("jwttokenstore")\n    public tokenstore jwttokenstore() {\n        return new jwttokenstore(jwtaccesstokenconverter());\n    }\n\n    /**\n     * token转换器\n     */\n    @bean\n    public jwtaccesstokenconverter jwtaccesstokenconverter() {\n        jwtaccesstokenconverter accesstokenconverter = new jwtaccesstokenconverter();\n        // 配置jwt使用的秘钥\n        accesstokenconverter.setsigningkey("test_key");\n        return accesstokenconverter;\n    }\n    \n}\n\n\n# 用户密码配置\n\n@service\npublic class userdetailservice implements userdetailsservice {\n\n    @autowired\n    private passwordencoder passwordencoder;\n\n    @override\n    public userdetails loaduserbyusername(string username) throws usernamenotfoundexception {\n        return new user(username, passwordencoder.encode("123456"), authorityutils.commaseparatedstringtoauthoritylist("admin"));\n    }\n}\n\n\n\n# 新建sso-client-one客户端模块\n\n# yml配置\n\nserver:\n  port: 8086\n  # 防止cookie冲突，冲突会导致登录验证不通过,两种方式都可以避免\n  servlet:\n#    context-path: /client1\n    session:\n      cookie:\n        name: auth-sso-client1-sessionid\nspring:\n  application:\n    name: auth-sso-client1\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\nsecurity:\n  oauth2:\n    client:\n      # 客户端身份标识\n      client-id: client1\n      # 客户端密钥\n      client-secret: client1_123456\n      user-authorization-uri: http://localhost:8085/oauth/authorize\n      access-token-uri: http://localhost:8085/oauth/token\n    resource:\n      jwt:\n        key-uri: http://localhost:8085/oauth/token_key\n\n\n# controller\n\n@restcontroller\npublic class indexcontroller {\n\n    @getmapping("/index")\n    public object getcurrentuser(authentication authentication) {\n        return authentication;\n    }\n\n    @getmapping("auth/test1")\n    @preauthorize("hasauthority(\'user\')")\n    public string authtest1(){\n        return "您拥有\'user\'权限";\n    }\n\n    @getmapping("auth/test2")\n    @preauthorize("hasauthority(\'admin\')")\n    public string authtest2(){\n        return "您拥有\'admin\'权限";\n    }\n}\n\n\n# 单点登录权限配置\n\n@configuration\n@enableglobalmethodsecurity(prepostenabled = true)\n@order(101)\npublic class securityconfig extends websecurityconfigureradapter {\n    \n}\n\n\n\n# 新建sso-client-two客户端模块\n\n# yml配置\n\nserver:\n  port: 8087\n  # 防止cookie冲突，冲突会导致登录验证不通过,两种方式都可以避免\n  servlet:\n#    context-path: /client2\n    session:\n      cookie:\n        name: auth-sso-client2-sessionid\nspring:\n  application:\n    name: auth-sso-client2\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\nsecurity:\n  oauth2:\n    client:\n      # 客户端身份标识\n      client-id: client2\n      # 客户端密钥\n      client-secret: client2_123456\n      user-authorization-uri: http://localhost:8085/oauth/authorize\n      access-token-uri: http://localhost:8085/oauth/token\n    resource:\n      jwt:\n        key-uri: http://localhost:8085/oauth/token_key\n\n\n# controller\n\n@restcontroller\npublic class indexcontroller {\n\n    @getmapping("/index")\n    public object getcurrentuser(authentication authentication) {\n        return authentication;\n    }\n\n    @getmapping("auth/test1")\n    @preauthorize("hasauthority(\'user\')")\n    public string authtest1(){\n        return "您拥有\'user\'权限";\n    }\n\n    @getmapping("auth/test2")\n    @preauthorize("hasauthority(\'admin\')")\n    public string authtest2(){\n        return "您拥有\'admin\'权限";\n    }\n}\n\n\n\n# 使用\n\n# 访问\n\nhttp://localhost:8086/index\n\n> 发现会跳转到认证服务器的登录\n\n# 再访问\n\nhttp://localhost:8087/index\n\n> 发现可以直接访问不需要重新登录了',charsets:{cjk:!0}},{title:"SpringCloud哨兵Sentinel",frontmatter:{title:"SpringCloud哨兵Sentinel",date:"2022-06-08T10:52:08.000Z",permalink:"/pages/9d5dbe/",categories:["学习资料","Java","SpringCloud实战"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/25.SpringCloud%E5%AE%9E%E6%88%98/06.SpringCloud%E5%93%A8%E5%85%B5Sentinel.html",relativePath:"学习资料/03.Java/25.SpringCloud实战/06.SpringCloud哨兵Sentinel.md",key:"v-7c876527",path:"/pages/9d5dbe/",headers:[{level:2,title:"环境准备（sentinel）",slug:"环境准备-sentinel",normalizedTitle:"环境准备（sentinel）",charIndex:2},{level:3,title:"启动",slug:"启动",normalizedTitle:"启动",charIndex:33},{level:2,title:"新建sentinel哨兵模块",slug:"新建sentinel哨兵模块",normalizedTitle:"新建sentinel哨兵模块",charIndex:175},{level:3,title:"添加依赖",slug:"添加依赖",normalizedTitle:"添加依赖",charIndex:194},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:426},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:905},{level:3,title:"启动类",slug:"启动类",normalizedTitle:"启动类",charIndex:1084},{level:3,title:"controller",slug:"controller",normalizedTitle:"controller",charIndex:1724},{level:3,title:"json文件",slug:"json文件",normalizedTitle:"json文件",charIndex:1992},{level:2,title:"更多操作",slug:"更多操作",normalizedTitle:"更多操作",charIndex:2319}],headersStr:"环境准备（sentinel） 启动 新建sentinel哨兵模块 添加依赖 配置 使用 启动类 controller json文件 更多操作",content:'# 环境准备（sentinel）\n\nsentinel下载\n\n\n# 启动\n\njava -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar\n\n\n\n# 新建sentinel哨兵模块\n\n\n# 添加依赖\n\n<dependencies>\n    \x3c!-- Sentinel哨兵 --\x3e\n    <dependency>\n        <groupId>com.alibaba.cloud</groupId>\n        <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n    </dependency>\n\n    \x3c!-- 引入 SpringMVC 相关依赖，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    \n</dependencies>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8089\nspring:\n  application:\n    name: sentinel\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    # sentinel 环境地址    \n    sentinel:\n      transport:\n        dashboard: localhost:8080\n      eager: true\n      web-context-unify: true\n      # 数据源 可自定义使用nacos、redis、file...\n      datasource:\n        ds1:\n          file:\n            file: classpath:flowrule.json\n            data-type: json\n            rule-type: flow\n\n\n\n# 使用\n\n\n# 启动类\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class SentinelApplication {\n\n    public static void main(String[] args) {\n//        initFlowRules();\n        SpringApplication.run(SentinelApplication.class);\n\n    }\n\n    /**\n    * Java代码定义规则\n    */\n    private static void initFlowRules(){\n        List<FlowRule> rules = new ArrayList<>(); //定义规则列表\n        FlowRule rule = new FlowRule(); //定义一个规则\n        rule.setResource("/hello"); //什么资源应用此规则\n        rule.setGrade(RuleConstant.FLOW_GRADE_QPS);\n        rule.setCount(2); //没秒只能2次请求\n        rules.add(rule);//加入该规则\n        FlowRuleManager.loadRules(rules); //载入规则列表\n    }\n\n}\n\n\n\n# controller\n\n@RestController\npublic class HelloController {\n\n    @SentinelResource("resource")\n    @GetMapping("/hello")\n    public String hello() {\n        return "Hello";\n    }\n\n    @GetMapping("/test")\n    public String test() {\n        return "test";\n    }\n\n}\n\n\n\n# json文件\n\nresource下的flowrule.json（对应yml配置文件）\n\n[\n  {\n    "resource": "/hello",\n    "controlBehavior": 0,\n    "count": 2,\n    "grade": 1,\n    "limitApp": "default",\n    "strategy": 0\n  },\n  {\n    "resource": "/test",\n    "controlBehavior": 0,\n    "count": 2,\n    "grade": 1,\n    "limitApp": "default",\n    "strategy": 0\n  }\n]\n\n\n\n# 更多操作\n\nsentinel官网',normalizedContent:'# 环境准备（sentinel）\n\nsentinel下载\n\n\n# 启动\n\njava -dserver.port=8080 -dcsp.sentinel.dashboard.server=localhost:8080 -dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar\n\n\n\n# 新建sentinel哨兵模块\n\n\n# 添加依赖\n\n<dependencies>\n    \x3c!-- sentinel哨兵 --\x3e\n    <dependency>\n        <groupid>com.alibaba.cloud</groupid>\n        <artifactid>spring-cloud-starter-alibaba-sentinel</artifactid>\n    </dependency>\n\n    \x3c!-- 引入 springmvc 相关依赖，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-web</artifactid>\n    </dependency>\n    \n</dependencies>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8089\nspring:\n  application:\n    name: sentinel\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    # sentinel 环境地址    \n    sentinel:\n      transport:\n        dashboard: localhost:8080\n      eager: true\n      web-context-unify: true\n      # 数据源 可自定义使用nacos、redis、file...\n      datasource:\n        ds1:\n          file:\n            file: classpath:flowrule.json\n            data-type: json\n            rule-type: flow\n\n\n\n# 使用\n\n\n# 启动类\n\n@springbootapplication\n@enablediscoveryclient\npublic class sentinelapplication {\n\n    public static void main(string[] args) {\n//        initflowrules();\n        springapplication.run(sentinelapplication.class);\n\n    }\n\n    /**\n    * java代码定义规则\n    */\n    private static void initflowrules(){\n        list<flowrule> rules = new arraylist<>(); //定义规则列表\n        flowrule rule = new flowrule(); //定义一个规则\n        rule.setresource("/hello"); //什么资源应用此规则\n        rule.setgrade(ruleconstant.flow_grade_qps);\n        rule.setcount(2); //没秒只能2次请求\n        rules.add(rule);//加入该规则\n        flowrulemanager.loadrules(rules); //载入规则列表\n    }\n\n}\n\n\n\n# controller\n\n@restcontroller\npublic class hellocontroller {\n\n    @sentinelresource("resource")\n    @getmapping("/hello")\n    public string hello() {\n        return "hello";\n    }\n\n    @getmapping("/test")\n    public string test() {\n        return "test";\n    }\n\n}\n\n\n\n# json文件\n\nresource下的flowrule.json（对应yml配置文件）\n\n[\n  {\n    "resource": "/hello",\n    "controlbehavior": 0,\n    "count": 2,\n    "grade": 1,\n    "limitapp": "default",\n    "strategy": 0\n  },\n  {\n    "resource": "/test",\n    "controlbehavior": 0,\n    "count": 2,\n    "grade": 1,\n    "limitapp": "default",\n    "strategy": 0\n  }\n]\n\n\n\n# 更多操作\n\nsentinel官网',charsets:{cjk:!0}},{title:"SpringCloud监控Admin",frontmatter:{title:"SpringCloud监控Admin",date:"2022-06-22T14:02:56.000Z",permalink:"/pages/fde21f/",categories:["学习资料","Java","SpringCloud实战"],tags:[null]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/03.Java/25.SpringCloud%E5%AE%9E%E6%88%98/07.SpringCloud%E7%9B%91%E6%8E%A7Admin.html",relativePath:"学习资料/03.Java/25.SpringCloud实战/07.SpringCloud监控Admin.md",key:"v-b54b2dd0",path:"/pages/fde21f/",headers:[{level:2,title:"新建Admin监控模块",slug:"新建admin监控模块",normalizedTitle:"新建admin监控模块",charIndex:2},{level:3,title:"添加依赖",slug:"添加依赖",normalizedTitle:"添加依赖",charIndex:18},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:276},{level:2,title:"使用",slug:"使用",normalizedTitle:"使用",charIndex:2406},{level:3,title:"启动类",slug:"启动类",normalizedTitle:"启动类",charIndex:2832},{level:3,title:"访问",slug:"访问",normalizedTitle:"访问",charIndex:1855}],headersStr:"新建Admin监控模块 添加依赖 配置 使用 启动类 访问",content:'# 新建Admin监控模块\n\n\n# 添加依赖\n\n<dependencies>\n    \x3c!-- admin监控 --\x3e\n    <dependency>\n        <groupId>de.codecentric</groupId>\n        <artifactId>spring-boot-admin-starter-server</artifactId>\n        <version>2.6.3</version>\n    </dependency>\n    \n    \x3c!-- 引入 SpringMVC 相关依赖，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    \n   \x3c!-- 自省和监控 --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n\n    \x3c!-- spring security安全 --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n\n</dependencies>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8088\nspring:\n  application:\n    name: admin\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n  security:\n    user:\n      name: admin\n      password: 123456\nmanagement:\n  # 暴露监控端点web端\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  # 显示服务健康具体信息\n  endpoint:\n    health:\n      show-details: always\n\n\n# 安全配置\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    private final String adminContextPath;\n\n    public SecurityConfig(AdminServerProperties adminServerProperties) {\n        this.adminContextPath = adminServerProperties.getContextPath();\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();\n        successHandler.setTargetUrlParameter("redirectTo");\n        successHandler.setDefaultTargetUrl(adminContextPath + "/");\n\n        http.authorizeRequests()\n                //1.配置所有静态资源和登录页可以公开访问\n                .antMatchers(adminContextPath + "/assets/**").permitAll()\n                .antMatchers(adminContextPath + "/login").permitAll()\n                .antMatchers(adminContextPath + "/actuator/**").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                //2.配置登录和登出路径\n                .formLogin().loginPage(adminContextPath + "/login").successHandler(successHandler).and()\n                .logout().logoutUrl(adminContextPath + "/logout").and()\n                //3.开启http basic支持，admin-client注册时需要使用\n                .httpBasic().and()\n                .csrf()\n                //4.开启基于cookie的csrf保护\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                //5.忽略这些路径的csrf保护以便admin-client注册\n                .ignoringAntMatchers(\n                        adminContextPath + "/instances",\n                        adminContextPath + "/actuator/**"\n                );\n    }\n}\n\n\n\n# 使用\n\n\n# 启动类\n\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableAdminServer\npublic class AdminApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminApplication.class);\n    }\n\n}\n\n\n\n# 访问\n\nhttp://localhost:8088',normalizedContent:'# 新建admin监控模块\n\n\n# 添加依赖\n\n<dependencies>\n    \x3c!-- admin监控 --\x3e\n    <dependency>\n        <groupid>de.codecentric</groupid>\n        <artifactid>spring-boot-admin-starter-server</artifactid>\n        <version>2.6.3</version>\n    </dependency>\n    \n    \x3c!-- 引入 springmvc 相关依赖，并实现对其的自动配置 --\x3e\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-web</artifactid>\n    </dependency>\n    \n   \x3c!-- 自省和监控 --\x3e\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-actuator</artifactid>\n    </dependency>\n\n    \x3c!-- spring security安全 --\x3e\n    <dependency>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-security</artifactid>\n    </dependency>\n\n</dependencies>\n\n\n\n# 配置\n\n# yml配置\n\nserver:\n  port: 8088\nspring:\n  application:\n    name: admin\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n  security:\n    user:\n      name: admin\n      password: 123456\nmanagement:\n  # 暴露监控端点web端\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  # 显示服务健康具体信息\n  endpoint:\n    health:\n      show-details: always\n\n\n# 安全配置\n\n@configuration\npublic class securityconfig extends websecurityconfigureradapter {\n\n    private final string admincontextpath;\n\n    public securityconfig(adminserverproperties adminserverproperties) {\n        this.admincontextpath = adminserverproperties.getcontextpath();\n    }\n\n    @override\n    protected void configure(httpsecurity http) throws exception {\n        savedrequestawareauthenticationsuccesshandler successhandler = new savedrequestawareauthenticationsuccesshandler();\n        successhandler.settargeturlparameter("redirectto");\n        successhandler.setdefaulttargeturl(admincontextpath + "/");\n\n        http.authorizerequests()\n                //1.配置所有静态资源和登录页可以公开访问\n                .antmatchers(admincontextpath + "/assets/**").permitall()\n                .antmatchers(admincontextpath + "/login").permitall()\n                .antmatchers(admincontextpath + "/actuator/**").permitall()\n                .anyrequest().authenticated()\n                .and()\n                //2.配置登录和登出路径\n                .formlogin().loginpage(admincontextpath + "/login").successhandler(successhandler).and()\n                .logout().logouturl(admincontextpath + "/logout").and()\n                //3.开启http basic支持，admin-client注册时需要使用\n                .httpbasic().and()\n                .csrf()\n                //4.开启基于cookie的csrf保护\n                .csrftokenrepository(cookiecsrftokenrepository.withhttponlyfalse())\n                //5.忽略这些路径的csrf保护以便admin-client注册\n                .ignoringantmatchers(\n                        admincontextpath + "/instances",\n                        admincontextpath + "/actuator/**"\n                );\n    }\n}\n\n\n\n# 使用\n\n\n# 启动类\n\n@springbootapplication\n@enablediscoveryclient\n@enableadminserver\npublic class adminapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(adminapplication.class);\n    }\n\n}\n\n\n\n# 访问\n\nhttp://localhost:8088',charsets:{cjk:!0}},{title:"Tomcat最佳实践",frontmatter:{title:"Tomcat最佳实践",date:"2022-01-17T17:30:46.000Z",permalink:"/pages/a1549e/",categories:["学习资料","笔记"],tags:["Tomcat"]},regularPath:"/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/21.%E7%AC%94%E8%AE%B0/01.Tomcat%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html",relativePath:"学习资料/21.笔记/01.Tomcat最佳实践.md",key:"v-e40802de",path:"/pages/a1549e/",headers:[{level:2,title:"运行模式",slug:"运行模式",normalizedTitle:"运行模式",charIndex:2},{level:3,title:"BIO",slug:"bio",normalizedTitle:"bio",charIndex:31},{level:3,title:"NIO",slug:"nio",normalizedTitle:"nio",charIndex:36},{level:3,title:"APR",slug:"apr",normalizedTitle:"apr",charIndex:41},{level:2,title:"连接池",slug:"连接池",normalizedTitle:"连接池",charIndex:867},{level:2,title:"端口配置",slug:"端口配置",normalizedTitle:"端口配置",charIndex:2226},{level:2,title:"JVM 优化",slug:"jvm-优化",normalizedTitle:"jvm 优化",charIndex:2641}],headersStr:"运行模式 BIO NIO APR 连接池 端口配置 JVM 优化",content:'# 运行模式\n\nTomcat Connector三种运行模式（BIO, NIO, APR）的比较和优化。\n\norg.apache.coyote.http11.Http11Protocol：BIO\norg.apache.coyote.http11.Http11NioProtocol：NIO\norg.apache.coyote.http11.Http11Nio2Protocol：NIO2\norg.apache.coyote.http11.Http11AprProtocol：APR\n\n\n\n# BIO\n\n一个线程处理一个请求。缺点：并发量高时，线程数较多，浪费资源。Tomcat7或以下，在Linux系统中默认使用这种方式。\n\n\n# NIO\n\n利用Java的异步IO处理，可以通过少量的线程处理大量的请求。Tomcat8在Linux系统中默认使用这种方式。Tomcat7必须修改Connector配置来启动：\n\n<Connector port="8080" \n           protocol="org.apache.coyote.http11.Http11NioProtocol"\n           connectionTimeout="20000"\n\t\t   redirectPort="8443"/>\n\n\nTomcat8以后NIO2模式：\n\n<Connector  port="8080"\n            protocol="org.apache.coyote.http11.Http11Nio2Protocol"\n            connectionTimeout="20000"\n\t\t    redirectPort="8443"/>\n\n\n\n# APR\n\n即Apache Portable Runtime，从操作系统层面解决io阻塞问题。Tomcat7或Tomcat8在Win7或以上的系统中启动默认使用这种方式。Linux如果安装了apr和native，Tomcat直接启动就支持apr。\n\n\n# 连接池\n\n默认值：\n\n<Executor name="tomcatThreadPool" namePrefix="catalina-exec-"\n        maxThreads="150" minSpareThreads="4"/>\n\n\n修改为：\n\n<Executor \n    name="tomcatThreadPool" \n    namePrefix="catalina-exec-"\n    maxThreads="500" \n    minSpareThreads="100" \n    prestartminSpareThreads = "true"\n    maxQueueSize = "100"\n/>\n\n\n参数解释：\n\n * maxThreads，最大并发数，默认设置 200，一般建议在 500 ~ 800，根据硬件设施和业务来判断\n * minSpareThreads，Tomcat 初始化时创建的线程数，默认设置 25\n * prestartminSpareThreads，在 Tomcat 初始化的时候就初始化 minSpareThreads 的参数值，如果不等于 true，minSpareThreads 的值就没啥效果了\n * maxQueueSize，最大的等待队列数，超过则拒绝请求\n\n默认的链接参数配置：\n\n<Connector \n    port="8080" \n    protocol="HTTP/1.1" \n    connectionTimeout="20000" \n    redirectPort="8443" \n/>\n\n\n修改为：\n\n<Connector  executor="tomcatThreadPool"\n            port="8080"\n            protocol="org.apache.coyote.http11.Http11Nio2Protocol"\n            connectionTimeout="20000"\n\t\t    redirectPort="8443"/>\n\n\n参数解释：\n\n * protocol，Tomcat 8 设置 nio2 更好：org.apache.coyote.http11.Http11Nio2Protocol\n * protocol，Tomcat 6、7 设置 nio 更好：org.apache.coyote.http11.Http11NioProtocol\n * enableLookups，禁用DNS查询\n * acceptCount，指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理，默认设置 100\n * maxPostSize，以 FORM URL 参数方式的 POST 提交方式，限制提交最大的大小，默认是 2097152(2兆)，它使用的单位是字节。10485760 为 10M。如果要禁用限制，则可以设置为 -1\n * acceptorThreadCount，用于接收连接的线程的数量，默认值是1。一般这个指需要改动的时候是因为该服务器是一个多核CPU，如果是多核 CPU 一般配置为 2\n\n\n# 端口配置\n\nTomcat服务器需配置三个端口才能启动，安装时默认启用了这三个端口，当要运行多个tomcat服务时需要修改这三个端口。\n\n\x3c!-- 端口-1即可，标识随机 --\x3e\n<Server port="-1" shutdown="SHUTDOWN">\n\n\n\x3c!-- 访问端口，必须配置 --\x3e\n<Connector  port="8080"\n            protocol="org.apache.coyote.http11.Http11Nio2Protocol"\n            connectionTimeout="20000"\n\t\t    redirectPort="8443"/>\n\n\n\x3c!-- 配置Apache使用，如果使用Nginx代理注释掉即可 --\x3e\n<Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />\n\n\n\n# JVM 优化\n\nJava 的内存模型分为：\n\n * Young，年轻代（易被 GC）。Young 区被划分为三部分，Eden 区和两个大小严格相同的 Survivor 区，其中 Survivor 区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用，在 Young 区间变满的时候，minor GC 就会将存活的对象移到空闲的Survivor 区间中，根据 JVM 的策略，在经过几次垃圾收集后，任然存活于 Survivor 的对象将被移动到 Tenured 区间。\n\n * Tenured，终身代。Tenured 区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在 Young 复制转移一定的次数以后，对象就会被转移到 Tenured 区，一般如果系统中用了 application 级别的缓存，缓存中的对象往往会被转移到这一区间。\n\n * Perm，永久代。主要保存 class,method,filed 对象，这部门的空间一般不会溢出，除非一次性加载了很多的类，不过在涉及到热部署的应用服务器的时候，有时候会遇到 java.lang.OutOfMemoryError : PermGen space 的错误，造成这个错误的很大原因就有可能是每次都重新部署，但是重新部署后，类的 class 没有被卸载掉，这样就造成了大量的 class 对象保存在了 perm 中，这种情况下，一般重新启动应用服务器可以解决问题。\n\nLinux 修改 /tomcat/bin/catalina.sh 文件，把下面信息添加到文件第一行。\n\n机子内存如果是 8G，一般 PermSize 配置是主要保证系统能稳定起来就行：\n\nJAVA_OPTS="-Dfile.encoding=UTF-8 -server -Xms6144m -Xmx6144m -XX:NewSize=1024m -XX:MaxNewSize=2048m -XX:PermSize=512m -XX:MaxPermSize=512m -XX:MaxTenuringThreshold=10 -XX:NewRatio=2 -XX:+DisableExplicitGC"\n\n\n参数说明：\n\n-Dfile.encoding：默认文件编码\n-server：表示这是应用于服务器的配置，JVM 内部会有特殊处理的\n-Xmx1024m：设置JVM最大可用内存为1024MB\n-Xms1024m：设置JVM最小内存为1024m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。\n-XX:NewSize：设置年轻代大小\n-XX:MaxNewSize：设置最大的年轻代大小\n-XX:PermSize：设置永久代大小\n-XX:MaxPermSize：设置最大永久代大小\n-XX:NewRatio=4：设置年轻代（包括 Eden 和两个 Survivor 区）与终身代的比值（除去永久代）。设置为 4，则年轻代与终身代所占比值为 1：4，年轻代占整个堆栈的 1/5\n-XX:MaxTenuringThreshold=10：设置垃圾最大年龄，默认为：15。如果设置为 0 的话，则年轻代对象不经过 Survivor 区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在 Survivor 区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n-XX:+DisableExplicitGC：这个将会忽略手动调用 GC 的代码使得 System.gc() 的调用就会变成一个空调用，完全不会触发任何 GC\n',normalizedContent:'# 运行模式\n\ntomcat connector三种运行模式（bio, nio, apr）的比较和优化。\n\norg.apache.coyote.http11.http11protocol：bio\norg.apache.coyote.http11.http11nioprotocol：nio\norg.apache.coyote.http11.http11nio2protocol：nio2\norg.apache.coyote.http11.http11aprprotocol：apr\n\n\n\n# bio\n\n一个线程处理一个请求。缺点：并发量高时，线程数较多，浪费资源。tomcat7或以下，在linux系统中默认使用这种方式。\n\n\n# nio\n\n利用java的异步io处理，可以通过少量的线程处理大量的请求。tomcat8在linux系统中默认使用这种方式。tomcat7必须修改connector配置来启动：\n\n<connector port="8080" \n           protocol="org.apache.coyote.http11.http11nioprotocol"\n           connectiontimeout="20000"\n\t\t   redirectport="8443"/>\n\n\ntomcat8以后nio2模式：\n\n<connector  port="8080"\n            protocol="org.apache.coyote.http11.http11nio2protocol"\n            connectiontimeout="20000"\n\t\t    redirectport="8443"/>\n\n\n\n# apr\n\n即apache portable runtime，从操作系统层面解决io阻塞问题。tomcat7或tomcat8在win7或以上的系统中启动默认使用这种方式。linux如果安装了apr和native，tomcat直接启动就支持apr。\n\n\n# 连接池\n\n默认值：\n\n<executor name="tomcatthreadpool" nameprefix="catalina-exec-"\n        maxthreads="150" minsparethreads="4"/>\n\n\n修改为：\n\n<executor \n    name="tomcatthreadpool" \n    nameprefix="catalina-exec-"\n    maxthreads="500" \n    minsparethreads="100" \n    prestartminsparethreads = "true"\n    maxqueuesize = "100"\n/>\n\n\n参数解释：\n\n * maxthreads，最大并发数，默认设置 200，一般建议在 500 ~ 800，根据硬件设施和业务来判断\n * minsparethreads，tomcat 初始化时创建的线程数，默认设置 25\n * prestartminsparethreads，在 tomcat 初始化的时候就初始化 minsparethreads 的参数值，如果不等于 true，minsparethreads 的值就没啥效果了\n * maxqueuesize，最大的等待队列数，超过则拒绝请求\n\n默认的链接参数配置：\n\n<connector \n    port="8080" \n    protocol="http/1.1" \n    connectiontimeout="20000" \n    redirectport="8443" \n/>\n\n\n修改为：\n\n<connector  executor="tomcatthreadpool"\n            port="8080"\n            protocol="org.apache.coyote.http11.http11nio2protocol"\n            connectiontimeout="20000"\n\t\t    redirectport="8443"/>\n\n\n参数解释：\n\n * protocol，tomcat 8 设置 nio2 更好：org.apache.coyote.http11.http11nio2protocol\n * protocol，tomcat 6、7 设置 nio 更好：org.apache.coyote.http11.http11nioprotocol\n * enablelookups，禁用dns查询\n * acceptcount，指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理，默认设置 100\n * maxpostsize，以 form url 参数方式的 post 提交方式，限制提交最大的大小，默认是 2097152(2兆)，它使用的单位是字节。10485760 为 10m。如果要禁用限制，则可以设置为 -1\n * acceptorthreadcount，用于接收连接的线程的数量，默认值是1。一般这个指需要改动的时候是因为该服务器是一个多核cpu，如果是多核 cpu 一般配置为 2\n\n\n# 端口配置\n\ntomcat服务器需配置三个端口才能启动，安装时默认启用了这三个端口，当要运行多个tomcat服务时需要修改这三个端口。\n\n\x3c!-- 端口-1即可，标识随机 --\x3e\n<server port="-1" shutdown="shutdown">\n\n\n\x3c!-- 访问端口，必须配置 --\x3e\n<connector  port="8080"\n            protocol="org.apache.coyote.http11.http11nio2protocol"\n            connectiontimeout="20000"\n\t\t    redirectport="8443"/>\n\n\n\x3c!-- 配置apache使用，如果使用nginx代理注释掉即可 --\x3e\n<connector port="8009" protocol="ajp/1.3" redirectport="8443" />\n\n\n\n# jvm 优化\n\njava 的内存模型分为：\n\n * young，年轻代（易被 gc）。young 区被划分为三部分，eden 区和两个大小严格相同的 survivor 区，其中 survivor 区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用，在 young 区间变满的时候，minor gc 就会将存活的对象移到空闲的survivor 区间中，根据 jvm 的策略，在经过几次垃圾收集后，任然存活于 survivor 的对象将被移动到 tenured 区间。\n\n * tenured，终身代。tenured 区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在 young 复制转移一定的次数以后，对象就会被转移到 tenured 区，一般如果系统中用了 application 级别的缓存，缓存中的对象往往会被转移到这一区间。\n\n * perm，永久代。主要保存 class,method,filed 对象，这部门的空间一般不会溢出，除非一次性加载了很多的类，不过在涉及到热部署的应用服务器的时候，有时候会遇到 java.lang.outofmemoryerror : permgen space 的错误，造成这个错误的很大原因就有可能是每次都重新部署，但是重新部署后，类的 class 没有被卸载掉，这样就造成了大量的 class 对象保存在了 perm 中，这种情况下，一般重新启动应用服务器可以解决问题。\n\nlinux 修改 /tomcat/bin/catalina.sh 文件，把下面信息添加到文件第一行。\n\n机子内存如果是 8g，一般 permsize 配置是主要保证系统能稳定起来就行：\n\njava_opts="-dfile.encoding=utf-8 -server -xms6144m -xmx6144m -xx:newsize=1024m -xx:maxnewsize=2048m -xx:permsize=512m -xx:maxpermsize=512m -xx:maxtenuringthreshold=10 -xx:newratio=2 -xx:+disableexplicitgc"\n\n\n参数说明：\n\n-dfile.encoding：默认文件编码\n-server：表示这是应用于服务器的配置，jvm 内部会有特殊处理的\n-xmx1024m：设置jvm最大可用内存为1024mb\n-xms1024m：设置jvm最小内存为1024m。此值可以设置与-xmx相同，以避免每次垃圾回收完成后jvm重新分配内存。\n-xx:newsize：设置年轻代大小\n-xx:maxnewsize：设置最大的年轻代大小\n-xx:permsize：设置永久代大小\n-xx:maxpermsize：设置最大永久代大小\n-xx:newratio=4：设置年轻代（包括 eden 和两个 survivor 区）与终身代的比值（除去永久代）。设置为 4，则年轻代与终身代所占比值为 1：4，年轻代占整个堆栈的 1/5\n-xx:maxtenuringthreshold=10：设置垃圾最大年龄，默认为：15。如果设置为 0 的话，则年轻代对象不经过 survivor 区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在 survivor 区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n-xx:+disableexplicitgc：这个将会忽略手动调用 gc 的代码使得 system.gc() 的调用就会变成一个空调用，完全不会触发任何 gc\n',charsets:{cjk:!0}}],themeConfig:{logo:"/images/logo.jpg",bodyBgImg:"/images/bg.jpg",bodyBgImgOpacity:.7,sidebar:{"/00.目录页/":[["01.centos7.md","centos7","/centos7/"],["02.常用命令.md","常用命令","/command/"],["03.Java.md","Java","/java/"]],catalogue:{centos7:"/centos7/","常用命令":"/command/",Java:"/java/"},"/学习资料/":[{title:"centos7",collapsable:!0,children:[{title:"centos7常用配置",collapsable:!0,children:[["01.centos7/01.centos7常用配置/02.Centos7配置静态网络.md","Centos7配置静态网络","/pages/ef2f99/"],["01.centos7/01.centos7常用配置/04.Centos7配置定时任务.md","Centos7配置定时任务","/pages/59c52f/"]]},{title:"centos7安装服务",collapsable:!0,children:[["01.centos7/03.centos7安装服务/01.Centos7安装Docker.md","Centos7安装Docker","/pages/a0deac/"]]},{title:"docker安装服务",collapsable:!0,children:[["01.centos7/05.docker安装服务/01.Docker安装Nginx.md","Docker安装Nginx","/pages/64523d/"],["01.centos7/05.docker安装服务/02.Docker安装MySQL.md","Docker安装MySQL","/pages/02c95e/"],["01.centos7/05.docker安装服务/03.Docker安装Tomcat.md","Docker安装Tomcat","/pages/cdbdbb/"],["01.centos7/05.docker安装服务/04.Docker安装Gitlab.md","Docker安装Gitlab","/pages/8b837f/"],["01.centos7/05.docker安装服务/05.Docker安装Ftp.md","Docker安装Ftp","/pages/02a6d1/"],["01.centos7/05.docker安装服务/06.Docker安装Trojan.md","Docker安装Trojan","/pages/7b6292/"],["01.centos7/05.docker安装服务/07.Docker安装V2ray.md","Docker安装V2ray","/pages/a7c015/"],["01.centos7/05.docker安装服务/08.Docker安装Frp.md","Docker安装Frp","/pages/c1ed84/"],["01.centos7/05.docker安装服务/09.Docker安装Redis.md","Docker安装Redis","/pages/0000a6/"],["01.centos7/05.docker安装服务/10.Docker安装Nacos.md","Docker安装Nacos","/pages/a45d98/"],["01.centos7/05.docker安装服务/11.Docker安装Rabbitmq.md","Docker安装Rabbitmq","/pages/c54468/"],["01.centos7/05.docker安装服务/12.Docker安装Elasticsearch.md","Docker安装Elasticsearch","/pages/1e85fd/"],["01.centos7/05.docker安装服务/13.Docker安装Logstash.md","Docker安装Logstash","/pages/8a8651/"],["01.centos7/05.docker安装服务/14.Docker安装Kibana.md","Docker安装Kibana","/pages/25aa1b/"]]}]},{title:"常用命令",collapsable:!0,children:[["02.常用命令/01.Docker常用命令.md","Docker常用命令","/pages/ab63d6/"],["02.常用命令/02.Git常用命令.md","Git常用命令","/pages/115b69/"],["02.常用命令/03.Linux常用命令.md","Linux常用命令","/pages/33ee6d/"],["02.常用命令/04.MySQL常用命令.md","MySQL常用命令","/pages/3c4d4a/"],["02.常用命令/05.Nginx常用命令.md","Nginx常用命令","/pages/a1ed3d/"]]},{title:"Java",collapsable:!0,children:[{title:"Java基础",collapsable:!0,children:[["03.Java/01.Java基础/01.基础知识.md","基础知识","/pages/07cc6a/"],["03.Java/01.Java基础/03.数据类型.md","数据类型","/pages/118174/"],["03.Java/01.Java基础/05.面向对象.md","面向对象","/pages/15942a/"],["03.Java/01.Java基础/07.异常处理.md","异常处理","/pages/b5379c/"]]},{title:"集合",collapsable:!0,children:[["03.Java/03.集合/01.Java集合.md","Java集合","/pages/4cb86a/"]]},{title:"JVM",collapsable:!0,children:[["03.Java/05.JVM/01.JVM相关知识体系.md","JVM相关知识体系","/pages/c3df4e/"]]},{title:"IO",collapsable:!0,children:[["03.Java/07.IO/01.Java IO知识体系图.md","Java IO知识体系图","/pages/27f6bd/"]]},{title:"并发",collapsable:!0,children:[["03.Java/09.并发/01.Java并发知识体系.md","Java并发知识体系","/pages/5f1d51/"],["03.Java/09.并发/03.Java线程基础.md","Java线程基础","/pages/20b9df/"]]},{title:"SpringBoot实战",collapsable:!0,children:[["03.Java/18.SpringBoot实战/01.SpringBoot整合MybatisPlus.md","SpringBoot整合MybatisPlus","/pages/5f83bc/"],["03.Java/18.SpringBoot实战/02.SpringBoot整合SwaggerUI.md","SpringBoot整合SwaggerUI","/pages/5d1537/"],["03.Java/18.SpringBoot实战/03.SpringBoot整合SpringTask.md","SpringBoot整合SpringTask","/pages/d0754d/"],["03.Java/18.SpringBoot实战/04.SpringBoot整合Redis.md","SpringBoot整合Redis","/pages/a36330/"],["03.Java/18.SpringBoot实战/05.SpringBoot整合RabbitMQ.md","SpringBoot整合RabbitMQ","/pages/73b1ea/"],["03.Java/18.SpringBoot实战/06.SpringBoot整合ElasticSearch.md","SpringBoot整合ElasticSearch","/pages/b7c905/"],["03.Java/18.SpringBoot实战/07.SpringBoot整合SpringSecurity.md","SpringBoot整合SpringSecurity","/pages/464d7a/"]]},{title:"设计模式",collapsable:!0,children:[["03.Java/20.设计模式/01.Java设计模式.md","Java设计模式","/pages/44301a/"]]},{title:"SpringCloud实战",collapsable:!0,children:[["03.Java/25.SpringCloud实战/01.SpringCloud开始搭建.md","SpringCloud开始搭建","/pages/723081/"],["03.Java/25.SpringCloud实战/02.SpringCloud配置中心Config.md","SpringCloud配置中心Config","/pages/73ae92/"],["03.Java/25.SpringCloud实战/03.SpringCloud服务注册Discovery.md","SpringCloud服务注册Discovery","/pages/90be9f/"],["03.Java/25.SpringCloud实战/04.SpringCloud网关Gateway.md","SpringCloud网关Gateway","/pages/b48b5b/"],["03.Java/25.SpringCloud实战/05.SpringCloud授权OAuth2.md","SpringCloud授权OAuth2","/pages/ffc151/"],["03.Java/25.SpringCloud实战/06.SpringCloud哨兵Sentinel.md","SpringCloud哨兵Sentinel","/pages/9d5dbe/"],["03.Java/25.SpringCloud实战/07.SpringCloud监控Admin.md","SpringCloud监控Admin","/pages/fde21f/"]]}]},{title:"笔记",collapsable:!0,children:[["21.笔记/01.Tomcat最佳实践.md","Tomcat最佳实践","/pages/a1549e/"]]}]},sidebarDepth:2,category:!0,tags:!0,archive:!0,searchMaxSuggestions:10,repo:"https://github.com/xiaomai653/blog",docsDir:"docs",editLinks:!0,editLinkText:"编辑",author:{name:"xiaomai"},blogger:{avatar:"/images/author.jpg",name:"小麦",slogan:"不积硅步，无以至千里。"},nav:[{text:"首页",link:"/"},{text:"centos7",link:"/centos7/"},{text:"常用命令",link:"/command/"},{text:"Java",link:"/java/"}],footer:{createYear:2022,copyrightInfo:""}}},Ks=(t(147),t(202),t(138),t(214)),Ys=t(215),Xs=(t(369),t(231),t(42));var Zs={computed:{$filterPosts:function(){return this.$site.pages.filter((function(n){var e=n.frontmatter,t=e.pageComponent,r=e.article,o=e.home;return!(t||!1===r||!0===o)}))},$sortPosts:function(){return(n=this.$filterPosts).sort((function(n,e){var t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(Xs.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(Xs.a)(n,e)})),n;var n},$sortPostsByDate:function(){return(n=this.$filterPosts).sort((function(n,e){return Object(Xs.a)(n,e)})),n;var n},$groupPosts:function(){return function(n){for(var e={},t={},r=function(r,o){var i=n[r].frontmatter,a=i.categories,s=i.tags;"array"===Object(Xs.n)(a)&&a.forEach((function(t){t&&(e[t]||(e[t]=[]),e[t].push(n[r]))})),"array"===Object(Xs.n)(s)&&s.forEach((function(e){e&&(t[e]||(t[e]=[]),t[e].push(n[r]))}))},o=0,i=n.length;o<i;o++)r(o);return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags:function(){return function(n){var e=[],t=[];for(var r in n.categories)e.push({key:r,length:n.categories[r].length});for(var o in n.tags)t.push({key:o,length:n.tags[o].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Bo.component(Ks.default),Bo.component(Ys.default);function nc(n){return n.toString().padStart(2,"0")}t(373);Bo.component("Badge",(function(){return Promise.all([t.e(0),t.e(3)]).then(t.bind(null,531))})),Bo.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,214))})),Bo.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,215))}));t(374),t(205),t(206);function ec(n,e){return(ec=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}function tc(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&ec(n,e)}t(207),t(208);function rc(n){return(rc=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function oc(n,e){if(e&&("object"===Ta(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n)}function ic(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,r=rc(n);if(e){var o=rc(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return oc(this,t)}}var ac=t(136),sc=(t(378),function(){function n(e){var t=e.origin,r=e.size,o=e.speed,i=e.color,a=e.angle,s=e.context;ls(this,n),this.origin=t,this.position=Object(ac.a)({},this.origin),this.size=r,this.color=i,this.speed=o,this.angle=a,this.context=s,this.renderCount=0}return ps(n,[{key:"draw",value:function(){}},{key:"move",value:function(){this.position.x=Math.sin(this.angle)*this.speed+this.position.x,this.position.y=Math.cos(this.angle)*this.speed+this.position.y+.3*this.renderCount,this.renderCount++}}]),n}()),cc=function(n){tc(t,n);var e=ic(t);function t(){return ls(this,t),e.apply(this,arguments)}return ps(t,[{key:"draw",value:function(){this.context.fillStyle=this.color,this.context.beginPath(),this.context.arc(this.position.x,this.position.y,this.size,0,2*Math.PI),this.context.fill()}}]),t}(sc),lc=function(n){tc(t,n);var e=ic(t);function t(n){var r,o=n.origin,i=n.size,a=n.speed,s=n.color,c=n.angle,l=n.context;return ls(this,t),(r=e.call(this,{origin:o,size:i,speed:a,color:s,angle:c,context:l})).rotate=0,r}return ps(t,[{key:"draw",value:function(){this.context.fillStyle=this.color,this.context.beginPath();for(var n=2*this.size,e=this.size,t=0;t<5;t++)this.context.lineTo(Math.cos((18+72*t-this.rotate)/180*Math.PI)*n+this.position.x,-Math.sin((18+72*t-this.rotate)/180*Math.PI)*n+this.position.y),this.context.lineTo(Math.cos((54+72*t-this.rotate)/180*Math.PI)*e+this.position.x,-Math.sin((54+72*t-this.rotate)/180*Math.PI)*e+this.position.y);this.context.fill(),this.rotate+=5}}]),t}(sc),uc=function(){function n(e){var t=e.origin,r=e.context,o=e.shape,i=void 0===o?"star":o,a=e.size,s=void 0===a?2:a,c=e.particleCount,l=void 0===c?10:c,u=e.clientSize;ls(this,n),this.origin=t,this.context=r,this.shape=i,this.size=s,this.particleCount=l,this.clientSize=u,this.stop=!1,this.particles=[]}return ps(n,[{key:"randomArray",value:function(n){var e=n.length;return n[Math.floor(e*Math.random())]}},{key:"randomColor",value:function(){var n=["8","9","A","B","C","D","E","F"];return"#"+this.randomArray(n)+this.randomArray(n)+this.randomArray(n)+this.randomArray(n)+this.randomArray(n)+this.randomArray(n)}},{key:"randomRange",value:function(n,e){return(e-n)*Math.random()+n}},{key:"getShape",value:function(n){return{star:lc,circle:cc}[n]}},{key:"init",value:function(){for(var n=0;n<this.particleCount;n++){var e=new(this.getShape(this.shape))({context:this.context,origin:this.origin,size:this.size,color:this.randomColor(),angle:this.randomRange(Math.PI-1,Math.PI+1),speed:this.randomRange(1,6)});this.particles.push(e)}}},{key:"move",value:function(){var n=this;this.particles.forEach((function(e,t){e.position.x<0||e.position.x>n.clientSize.width||e.position.y>n.clientSize.height?n.particles.splice(t,1):e.move()})),0==this.particles.length&&(this.stop=!0)}},{key:"draw",value:function(){this.particles.forEach((function(n){return n.draw()}))}}]),n}(),pc={name:"CursorEffects",data:function(){return{shape:"star",size:2,zIndex:999999999,computerCanvas:null,renderCanvas:null,computerContext:null,renderContext:null,clientSize:{width:0,height:0},resizeTimeout:null}},mounted:function(){this.computerCanvas=document.createElement("canvas"),this.renderCanvas=document.getElementById("vuepress-canvas-cursor"),this.computerContext=this.computerCanvas.getContext("2d"),this.renderContext=this.renderCanvas.getContext("2d"),this.clientSize.width=window.innerWidth,this.clientSize.height=window.innerHeight,this.booms=[],this.running=!1,this.init()},methods:{init:function(){this.setStyle(this.renderCanvas.style),this.renderCanvas.width=this.computerCanvas.width=this.clientSize.width,this.renderCanvas.height=this.computerCanvas.height=this.clientSize.height,this.makeHighRes(this.renderCanvas,this.renderContext),this.makeHighRes(this.computerCanvas,this.computerContext),window.addEventListener("mousedown",this.handleMouseDown),window.addEventListener("pagehide",this.handlePageHide),window.addEventListener("resize",this.handleResize)},setStyle:function(n){n.position="fixed",n.top=0,n.left=0,n.zIndex=this.zIndex,n.pointerEvents="none",n.width=this.clientSize.width,n.height=this.clientSize.height},makeHighRes:function(n,e){var t=window.devicePixelRatio||1,r=n.width,o=n.height;n.width=Math.round(r*t),n.height=Math.round(o*t),n.style.width=r+"px",n.style.height=o+"px",e.scale(t,t)},handleMouseDown:function(n){var e=new uc({origin:{x:n.clientX,y:n.clientY},context:this.computerContext,size:this.size,shape:this.shape,clientSize:this.clientSize});e.init(),this.booms.push(e),this.running||this.run()},handlePageHide:function(){this.booms=[],this.running=!1},handleResize:function(){var n=this;null!=this.resizeTimeout&&clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout((function(){n.clientSize.width=window.innerWidth,n.clientSize.height=window.innerHeight,n.renderCanvas.width=n.computerCanvas.width=n.clientSize.width,n.renderCanvas.height=n.computerCanvas.height=n.clientSize.height,n.makeHighRes(n.renderCanvas,n.renderContext),n.makeHighRes(n.computerCanvas,n.computerContext)}),500)},run:function(){var n=this;if(this.running=!0,0==this.booms.length)return this.running=!1;requestAnimationFrame(this.run),this.computerContext.clearRect(0,0,this.clientSize.width,this.clientSize.height),this.renderContext.clearRect(0,0,this.clientSize.width,this.clientSize.height),this.booms.forEach((function(e,t){e.stop?n.booms.splice(t,1):(e.move(),e.draw())})),this.renderContext.drawImage(this.computerCanvas,0,0,this.clientSize.width,this.clientSize.height)}}},dc=Object(Ws.a)(pc,(function(){var n=this.$createElement;return(this._self._c||n)("canvas",{attrs:{id:"vuepress-canvas-cursor"}})}),[],!1,null,null,null).exports,mc={name:"GoTop",data:function(){return{visibilityHeight:500,catStyle:"hide-cat"}},mounted:function(){window.addEventListener("scroll",this.handleScroll,!0)},destroyed:function(){window.removeEventListener("scroll",this.handleScroll)},methods:{handleScroll:function(){this.catStyle=this.getScrollTop()>this.visibilityHeight?"show-cat":"hide-cat"},getScrollTop:function(){return window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},goTop:function(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},gc=(t(380),Object(Ws.a)(mc,(function(){var n=this.$createElement;return(this._self._c||n)("div",{class:this.catStyle,attrs:{id:"goTop"},on:{click:this.goTop}})}),[],!1,null,"bf92849a",null).exports),fc=[function(n){n.Vue,n.options,n.router,n.siteData,n.isServer},function(n){var e=n.Vue,t=(n.options,n.router,n.siteData);t.pages.map((function(n){var e=n.frontmatter,r=e.date,o=e.author;"string"==typeof r&&"Z"===r.charAt(r.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return"".concat(n.getUTCFullYear(),"-").concat(nc(n.getUTCMonth()+1),"-").concat(nc(n.getUTCDate())," ").concat(nc(n.getUTCHours()),":").concat(nc(n.getUTCMinutes()),":").concat(nc(n.getUTCSeconds()))}(r)),o?n.author=o:t.themeConfig.author&&(n.author=t.themeConfig.author)})),e.mixin(Zs)},{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(n){n.Vue.component("CursorEffects",dc)},function(n){n.Vue.component("GoTop",gc)}],hc=["CursorEffects","GoTop"];t(135);var yc=function(n){tc(t,n);var e=ic(t);function t(){return ls(this,t),e.apply(this,arguments)}return ps(t)}(function(){function n(){ls(this,n),this.store=new Bo({data:{state:{}}})}return ps(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){Bo.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(yc.prototype,{getPageAsyncComponent:Na,getLayoutAsyncComponent:Fa,getAsyncComponent:Ja,getVueComponent:Ha});var vc={install:function(n){var e=new yc;n.$vuepress=e,n.prototype.$vuepress=e}};function bc(n){n.beforeEach((function(e,t,r){if(kc(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var o=e.path.replace(/\/$/,"")+".html";kc(n,o)?r(o):r()}else r();else{var i=e.path+"/",a=e.path+".html";kc(n,a)?r(a):kc(n,i)?r(i):r()}}))}function kc(n,e){var t=e.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===t}))}var xc={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return Ga("pageKey",e),Bo.component(e)||Bo.component(e,Na(e)),Bo.component(e)?n(e):n("")}},wc={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,r=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},r()[t.slotKey])}},Sc={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Ec=(t(381),t(382),Object(Ws.a)(Sc,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function _c(){return(_c=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,o,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Qs.routerBase||Qs.base,bc(r=new Ea({base:t,mode:"history",fallback:!1,routes:Vs,scrollBehavior:function(n,e,t){return t||(n.hash?!Bo.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),o={},n.prev=4,n.next=7,Promise.all(fc.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:Bo,options:o,router:r,siteData:Qs,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return i=new Bo(Object.assign(o,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},hc.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:i,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}Bo.config.productionTip=!1,Bo.use(Ea),Bo.use(vc),Bo.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Bo;_a(e),t.$vuepress.$set("siteData",e);var r=n(t.$vuepress.$get("siteData")),o=new r,i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),a={};return Object.keys(i).reduce((function(n,e){return e.startsWith("$")&&(n[e]=i[e].get),n}),a),{computed:a}}((function(n){return function(){function e(){ls(this,e)}return ps(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,r=void 0===t?{}:t;for(var o in r)"/"===o?e=r[o]:0===this.$page.path.indexOf(o)&&(n=r[o]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),Qs)),Bo.component("Content",xc),Bo.component("ContentSlotsDistributor",wc),Bo.component("OutboundLink",Ec),Bo.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,r=e.children;if(t._isMounted)return r;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),Bo.component("Layout",Fa("Layout")),Bo.component("NotFound",Fa("NotFound")),Bo.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.5",hash:"dcc5511"},function(n){return _c.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);